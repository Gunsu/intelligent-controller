   1               		.file	"blocks.c"
   2               		.arch at90s8535
   3               	__SREG__ = 0x3f
   4               	__SP_H__ = 0x3e
   5               	__SP_L__ = 0x3d
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.global __do_copy_data
   9               		.global __do_clear_bss
  11               		.text
  12               	.Ltext0:
  78               	.global	BlockConst3
  80               	BlockConst3:
   1:blocks.c      **** #include <avr\io.h>
   2:blocks.c      **** #include <avr\interrupt.h>
   3:blocks.c      **** #include "buffers.h"
   4:blocks.c      **** #include "blocks.h"
   5:blocks.c      **** #include "comproc.h"
   6:blocks.c      **** #include "hal.h"
   7:blocks.c      **** 
   8:blocks.c      **** #define PARAM_MODIFIER_VAR				0
   9:blocks.c      **** #define PARAM_MODIFIER_CONST			1
  10:blocks.c      **** #define PARAM_MODIFIER_BUFFER			2
  11:blocks.c      **** 
  12:blocks.c      **** #define HEX_TO_HALF_BYTE(n, success) {success = 1; if ((n >= '0') && (n <= '9')) n = n - '0'; else 
  13:blocks.c      **** #define HALF_BYTE_TO_HEX(n) {if (n <= 9) n = n + '0'; else if ((n >= 0x0A) && (n <= 0x0F)) n = n + 
  14:blocks.c      **** 
  15:blocks.c      **** unsigned char Block0 (unsigned short paramsAddr)
  16:blocks.c      **** {	
  17:blocks.c      **** 	unsigned char paramsCount;
  18:blocks.c      **** 	unsigned char paramSize;
  19:blocks.c      **** 	unsigned char from;
  20:blocks.c      **** 	unsigned char to;
  21:blocks.c      **** 	unsigned char i;
  22:blocks.c      **** 	unsigned char j;
  23:blocks.c      **** 	unsigned short pos;
  24:blocks.c      **** 
  25:blocks.c      **** 	paramsCount = HALGetExtROMByte (paramsAddr);
  26:blocks.c      **** 	pos = paramsAddr + 1;
  27:blocks.c      **** 
  28:blocks.c      **** 	for (i = 0; i < paramsCount; i++)
  29:blocks.c      **** 	{
  30:blocks.c      **** 		from = HALGetExtROMByte (pos);
  31:blocks.c      **** 		to = HALGetExtROMByte (pos + 1);
  32:blocks.c      **** 		paramSize = HALGetExtROMByte (pos + 2);
  33:blocks.c      **** 
  34:blocks.c      **** 		for (j = 0; j < paramSize; j++)
  35:blocks.c      **** 			ComProcData.Memory [to + j] = Buffers[BUFFER_IN_COMMAND_ID].Data[from + j];
  36:blocks.c      **** 
  37:blocks.c      **** 		pos += 3;
  38:blocks.c      **** 	}
  39:blocks.c      **** 
  40:blocks.c      **** 	return BLOCK_RES_SUCCESS;
  41:blocks.c      **** }
  42:blocks.c      **** 
  43:blocks.c      **** unsigned char Block1 (unsigned short paramsAddr)
  44:blocks.c      **** {
  45:blocks.c      **** 	unsigned char paramsCount;
  46:blocks.c      **** 	unsigned char paramSize;
  47:blocks.c      **** 	unsigned char from;
  48:blocks.c      **** 	unsigned char paramModifier;
  49:blocks.c      **** 	unsigned char i;
  50:blocks.c      **** 	unsigned char j;
  51:blocks.c      **** 	unsigned short pos;
  52:blocks.c      **** 	unsigned char buffId;
  53:blocks.c      **** 	unsigned char halfByteLo;
  54:blocks.c      **** 	unsigned char halfByteHi;
  55:blocks.c      **** 	unsigned char bufSizeInBytes;
  56:blocks.c      **** 
  57:blocks.c      **** 	paramsCount = HALGetExtROMByte (paramsAddr);
  58:blocks.c      **** 	pos = paramsAddr + 1;
  59:blocks.c      **** 
  60:blocks.c      **** 	for (i = 0; i < paramsCount; i++)
  61:blocks.c      **** 	{
  62:blocks.c      **** 		from = HALGetExtROMByte (pos);
  63:blocks.c      **** 		paramModifier = HALGetExtROMByte (pos + 1);
  64:blocks.c      **** 		paramSize = HALGetExtROMByte (pos + 2);
  65:blocks.c      **** 
  66:blocks.c      **** 		if (paramModifier == PARAM_MODIFIER_VAR)
  67:blocks.c      **** 		{
  68:blocks.c      **** 			// отправляем параметр фиксированного размера
  69:blocks.c      **** 			
  70:blocks.c      **** 			for (j = 0; j < paramSize; j++)
  71:blocks.c      **** 				HALWriteOutCommandByte (ComProcData.Memory [from + j]);
  72:blocks.c      **** 		}
  73:blocks.c      **** 		else if (paramModifier == PARAM_MODIFIER_BUFFER)
  74:blocks.c      **** 		{
  75:blocks.c      **** 			// отправляем содержимое буфера
  76:blocks.c      **** 			buffId = ComProcData.Memory [from]; // индекс буфера
  77:blocks.c      **** 			
  78:blocks.c      **** 			if (Buffers[buffId].ElementSize == 1)
  79:blocks.c      **** 				bufSizeInBytes = Buffers[buffId].Size;
  80:blocks.c      **** 			else if (Buffers[buffId].ElementSize == 2)
  81:blocks.c      **** 				bufSizeInBytes = Buffers[buffId].Size + Buffers[buffId].Size;
  82:blocks.c      **** 			else
  83:blocks.c      **** 				bufSizeInBytes = 0;	
  84:blocks.c      **** 			
  85:blocks.c      **** 			if (buffId >= BUFFERS_COUNT)
  86:blocks.c      **** 			{
  87:blocks.c      **** 				ComProcData.LastError = LAST_ERROR_OUT_OF_RANGE_PARAM;
  88:blocks.c      **** 				HALWriteOutCommandByte (EOC);
  89:blocks.c      **** 				return BLOCK_RES_ERROR;
  90:blocks.c      **** 			}
  91:blocks.c      **** 			
  92:blocks.c      **** 			if (Buffers[buffId].NeedConvertToASCII) // преобразуем содержимое буфера в ASCII коды
  93:blocks.c      **** 			{
  94:blocks.c      **** 				for (j = 0; j < bufSizeInBytes; j++)
  95:blocks.c      **** 				{
  96:blocks.c      **** 					halfByteLo = Buffers[buffId].Data[j];
  97:blocks.c      **** 					halfByteHi = halfByteLo;
  98:blocks.c      **** 					halfByteLo &= 0x0F;
  99:blocks.c      **** 					halfByteHi >>= 4;
 100:blocks.c      **** 					HALF_BYTE_TO_HEX (halfByteLo);
 101:blocks.c      **** 					HALF_BYTE_TO_HEX (halfByteHi);
 102:blocks.c      **** 					HALWriteOutCommandByte (halfByteHi);	
 103:blocks.c      **** 					HALWriteOutCommandByte (halfByteLo);
 104:blocks.c      **** 				}
 105:blocks.c      **** 			}
 106:blocks.c      **** 			else // отправляем содержимое буфера как есть
 107:blocks.c      **** 			{
 108:blocks.c      **** 				for (j = 0; j < bufSizeInBytes; j++)
 109:blocks.c      **** 				{
 110:blocks.c      **** 					HALWriteOutCommandByte (Buffers[buffId].Data[j]);	
 111:blocks.c      **** 				}
 112:blocks.c      **** 			}			
 113:blocks.c      **** 		}
 114:blocks.c      **** 		else if (paramModifier == PARAM_MODIFIER_CONST)
 115:blocks.c      **** 		{
 116:blocks.c      **** 			// отправляем константу
 117:blocks.c      **** 			HALWriteOutCommandByte (from);
 118:blocks.c      **** 		}
 119:blocks.c      **** 
 120:blocks.c      **** 		pos+= 3;
 121:blocks.c      **** 	}
 122:blocks.c      ****    HALWriteOutCommandByte (EOC);
 123:blocks.c      **** 	return BLOCK_RES_SUCCESS;
 124:blocks.c      **** }
 125:blocks.c      **** 
 126:blocks.c      **** unsigned char BlockPlus (unsigned short paramsAddr)
 127:blocks.c      **** {
 128:blocks.c      **** 	ComProcData.Memory [HALGetExtROMByte (paramsAddr + 2)] =
 129:blocks.c      **** 		ComProcData.Memory [HALGetExtROMByte (paramsAddr)] + ComProcData.Memory [HALGetExtROMByte (params
 130:blocks.c      **** 	return BLOCK_RES_SUCCESS;
 131:blocks.c      **** }
 132:blocks.c      **** 
 133:blocks.c      **** unsigned char BlockMinus (unsigned short paramsAddr)
 134:blocks.c      **** {
 135:blocks.c      **** 	ComProcData.Memory [HALGetExtROMByte (paramsAddr + 2)] =
 136:blocks.c      **** 		ComProcData.Memory [HALGetExtROMByte (paramsAddr)] - ComProcData.Memory [HALGetExtROMByte (params
 137:blocks.c      **** 	return BLOCK_RES_SUCCESS;
 138:blocks.c      **** }
 139:blocks.c      **** 
 140:blocks.c      **** unsigned char BlockHexStrToByte (unsigned short paramsAddr)
 141:blocks.c      **** {	
 142:blocks.c      **** 	unsigned char n1;
 143:blocks.c      **** 	unsigned char n2;
 144:blocks.c      **** 	unsigned char success;
 145:blocks.c      **** 	unsigned char index = 0;
 146:blocks.c      **** 	
 147:blocks.c      **** 	index = HALGetExtROMByte (paramsAddr);
 148:blocks.c      **** 	
 149:blocks.c      **** 	n1 = ComProcData.Memory [index + 1];
 150:blocks.c      **** 	HEX_TO_HALF_BYTE(n1, success);
 151:blocks.c      **** 	if (!success)
 152:blocks.c      **** 		goto Err;
 153:blocks.c      **** 		
 154:blocks.c      **** 	n2 = ComProcData.Memory [index];
 155:blocks.c      **** 	HEX_TO_HALF_BYTE(n2, success);
 156:blocks.c      **** 	if (!success)
 157:blocks.c      **** 		goto Err;
 158:blocks.c      **** 		
 159:blocks.c      **** 	ComProcData.Memory [HALGetExtROMByte (paramsAddr + 1)] = n1 | (n2 << 4);
 160:blocks.c      **** 	return BLOCK_RES_SUCCESS;
 161:blocks.c      **** 	
 162:blocks.c      **** Err:
 163:blocks.c      **** 	ComProcData.LastError = LAST_ERROR_INVALID_PARAM;
 164:blocks.c      **** 	return BLOCK_RES_ERROR;	
 165:blocks.c      **** }
 166:blocks.c      **** 
 167:blocks.c      **** unsigned char BlockByteToHexStr (unsigned short paramsAddr)
 168:blocks.c      **** {
 169:blocks.c      **** 	unsigned char n1;
 170:blocks.c      **** 	unsigned char n2;
 171:blocks.c      **** 	unsigned char index;
 172:blocks.c      **** 	
 173:blocks.c      **** 	index = HALGetExtROMByte (paramsAddr + 1);
 174:blocks.c      **** 	
 175:blocks.c      **** 	n1 = ComProcData.Memory [HALGetExtROMByte (paramsAddr)];
 176:blocks.c      **** 	n2 = n1 >> 4;
 177:blocks.c      **** 	n1 &= 0x0F;
 178:blocks.c      **** 	
 179:blocks.c      **** 	HALF_BYTE_TO_HEX (n1);
 180:blocks.c      **** 	HALF_BYTE_TO_HEX (n2);
 181:blocks.c      **** 	
 182:blocks.c      **** 	ComProcData.Memory [index] = n2;
 183:blocks.c      **** 	ComProcData.Memory [index + 1] = n1;
 184:blocks.c      **** 	
 185:blocks.c      **** 	return BLOCK_RES_SUCCESS;
 186:blocks.c      **** }
 187:blocks.c      **** 
 188:blocks.c      **** unsigned char BlockConst0 (unsigned short paramsAddr)
 189:blocks.c      **** {
 190:blocks.c      **** 	ComProcData.Memory [HALGetExtROMByte (paramsAddr)] = 0;
 191:blocks.c      **** 	return BLOCK_RES_SUCCESS;		
 192:blocks.c      **** }
 193:blocks.c      **** 
 194:blocks.c      **** unsigned char BlockConst1 (unsigned short paramsAddr)
 195:blocks.c      **** {
 196:blocks.c      **** 	ComProcData.Memory [HALGetExtROMByte (paramsAddr)] = 1;
 197:blocks.c      **** 	return BLOCK_RES_SUCCESS;		
 198:blocks.c      **** }
 199:blocks.c      **** 
 200:blocks.c      **** unsigned char BlockConst2 (unsigned short paramsAddr)
 201:blocks.c      **** {
 202:blocks.c      **** 	ComProcData.Memory [HALGetExtROMByte (paramsAddr)] = 2;
 203:blocks.c      **** 	return BLOCK_RES_SUCCESS;		
 204:blocks.c      **** }
 205:blocks.c      **** 
 206:blocks.c      **** unsigned char BlockModuleAddress (unsigned short paramsAddr)
 207:blocks.c      **** {
 208:blocks.c      **** 	unsigned char addr;
 209:blocks.c      **** 	
 210:blocks.c      **** 	if (ComProcData.Memory [HALGetExtROMByte (paramsAddr)] == 0)
 211:blocks.c      **** 	{
 212:blocks.c      **** 		// read
 213:blocks.c      **** 		addr = HALGetModuleAddress();
 214:blocks.c      **** 	}
 215:blocks.c      **** 	else
 216:blocks.c      **** 	{
 217:blocks.c      **** 		// write
 218:blocks.c      **** 		addr = ComProcData.Memory [HALGetExtROMByte (paramsAddr + 1)];
 219:blocks.c      **** 		HALSetModuleAddress(addr);
 220:blocks.c      **** 	}
 221:blocks.c      **** 	ComProcData.Memory [HALGetExtROMByte (paramsAddr + 3)] = addr;
 222:blocks.c      **** 	
 223:blocks.c      **** 	return BLOCK_RES_SUCCESS;		
 224:blocks.c      **** }
 225:blocks.c      **** 
 226:blocks.c      **** unsigned char BlockCmpByte (unsigned short paramsAddr)
 227:blocks.c      **** {
 228:blocks.c      **** 	unsigned char res;
 229:blocks.c      **** 	
 230:blocks.c      **** 	if (ComProcData.Memory [HALGetExtROMByte (paramsAddr)] == ComProcData.Memory [HALGetExtROMByte (pa
 231:blocks.c      **** 		res = 1;
 232:blocks.c      **** 	else
 233:blocks.c      **** 		res = 0;
 234:blocks.c      **** 	ComProcData.Memory [HALGetExtROMByte (paramsAddr + 2)] = res;	
 235:blocks.c      **** 	return BLOCK_RES_SUCCESS;		
 236:blocks.c      **** }
 237:blocks.c      **** 
 238:blocks.c      **** unsigned char BlockBreak (unsigned short paramsAddr)
 239:blocks.c      **** {
 240:blocks.c      **** 	if (ComProcData.Memory [HALGetExtROMByte (paramsAddr)])
 241:blocks.c      **** 		return BLOCK_RES_SKIP_PROCESSING;
 242:blocks.c      **** 	return BLOCK_RES_SUCCESS;		
 243:blocks.c      **** }
 244:blocks.c      **** 
 245:blocks.c      **** unsigned char BlockNot (unsigned short paramsAddr)
 246:blocks.c      **** {		
 247:blocks.c      **** 	ComProcData.Memory [HALGetExtROMByte (paramsAddr + 1)] = !(ComProcData.Memory [HALGetExtROMByte (p
 248:blocks.c      **** 	return BLOCK_RES_SUCCESS;		
 249:blocks.c      **** }
 250:blocks.c      **** 
 251:blocks.c      **** unsigned char BlockLastError (unsigned short paramsAddr)
 252:blocks.c      **** {
 253:blocks.c      **** 	ComProcData.Memory [HALGetExtROMByte (paramsAddr)] = ComProcData.LastError;
 254:blocks.c      **** 	return BLOCK_RES_SUCCESS;
 255:blocks.c      **** }
 256:blocks.c      **** 
 257:blocks.c      **** unsigned char BlockSortBuf (unsigned short paramsAddr)
 258:blocks.c      **** {
 259:blocks.c      **** 	unsigned char bufId;
 260:blocks.c      **** 	short i;
 261:blocks.c      **** 	short j;
 262:blocks.c      **** 	unsigned short* data;
 263:blocks.c      **** 	unsigned char dataSize;
 264:blocks.c      **** 	unsigned short buf;
 265:blocks.c      **** 	
 266:blocks.c      **** 	//TODO: сейчас всегда подразумевается, что буфер с 2х байтными элементами
 267:blocks.c      **** 	
 268:blocks.c      **** 	bufId = ComProcData.Memory [HALGetExtROMByte (paramsAddr)];
 269:blocks.c      **** 	ComProcData.Memory [HALGetExtROMByte (paramsAddr + 3)] = bufId;
 270:blocks.c      **** 	
 271:blocks.c      **** 	// если блок disabled
 272:blocks.c      **** 	if (!ComProcData.Memory[HALGetExtROMByte(paramsAddr + 1)])
 273:blocks.c      **** 		return BLOCK_RES_SUCCESS;
 274:blocks.c      **** 			
 275:blocks.c      **** 	if (bufId >= BUFFERS_COUNT)
 276:blocks.c      **** 	{
 277:blocks.c      **** 		ComProcData.LastError = LAST_ERROR_OUT_OF_RANGE_PARAM;
 278:blocks.c      **** 		return BLOCK_RES_ERROR;
 279:blocks.c      **** 	}
 280:blocks.c      **** 	
 281:blocks.c      **** 	data = (unsigned short*)Buffers[bufId].Data;
 282:blocks.c      **** 	dataSize = Buffers[bufId].Size;
 283:blocks.c      **** 	
 284:blocks.c      ****   	for(i = 1; i < dataSize; i++) // пробегаем весь массив, кроме начального эл-та
 285:blocks.c      ****   	{
 286:blocks.c      **** 		buf = data[i]; 				// запомнили текущий эл-т, его мы затрем, надвигая массив
 287:blocks.c      **** 		for(j = i-1; (j >= 0) && (data[j] > buf); j--) // сдвигаем массив, прямо на текущий эл-т
 288:blocks.c      **** 			data[j+1] = data[j]; 	// этот сдвиг происходит пока сдвигаемые эл-ты больше, чем тот, на который
 289:blocks.c      **** 		data[j+1] = buf; 				// теперь наш i-тый эл-т, который оказался меньше пачки сдвинутых эл-тов, по
 290:blocks.c      **** 	}
 291:blocks.c      **** 			
 292:blocks.c      **** 	return BLOCK_RES_SUCCESS;	
 293:blocks.c      **** }
 294:blocks.c      **** 
 295:blocks.c      **** unsigned char BlockAnd (unsigned short paramsAddr)
 296:blocks.c      **** {	
 297:blocks.c      **** 	ComProcData.Memory[HALGetExtROMByte (paramsAddr + 2)] = (ComProcData.Memory[HALGetExtROMByte (para
 298:blocks.c      **** 	return BLOCK_RES_SUCCESS;
 299:blocks.c      **** }
 300:blocks.c      **** 
 301:blocks.c      **** unsigned char BlockCRC (unsigned short paramsAddr)
 302:blocks.c      **** {
 303:blocks.c      **** 	unsigned char buffId;
 304:blocks.c      **** 	unsigned char sz;
 305:blocks.c      **** 	unsigned char crc = 0xFF;
 306:blocks.c      ****    unsigned char i;
 307:blocks.c      ****    unsigned char* pcBlock;
 308:blocks.c      **** 	
 309:blocks.c      **** 	// если блок disabled
 310:blocks.c      **** 	if (!ComProcData.Memory[HALGetExtROMByte(paramsAddr + 2)])
 311:blocks.c      **** 		return BLOCK_RES_SUCCESS;
 312:blocks.c      **** 	
 313:blocks.c      **** 	buffId = ComProcData.Memory[HALGetExtROMByte (paramsAddr)];
 314:blocks.c      **** 			
 315:blocks.c      **** 	if (buffId >= BUFFERS_COUNT)
 316:blocks.c      **** 	{
 317:blocks.c      **** 		ComProcData.LastError = LAST_ERROR_OUT_OF_RANGE_PARAM;
 318:blocks.c      **** 		return BLOCK_RES_ERROR;
 319:blocks.c      **** 	}
 320:blocks.c      **** 	
 321:blocks.c      **** 	sz = ComProcData.Memory[HALGetExtROMByte(paramsAddr + 1)];
 322:blocks.c      **** 	
 323:blocks.c      **** 	if (sz > Buffers[buffId].Size)
 324:blocks.c      **** 	{
 325:blocks.c      **** 		ComProcData.LastError = LAST_ERROR_OUT_OF_RANGE_PARAM;
 326:blocks.c      **** 		return BLOCK_RES_ERROR;
 327:blocks.c      **** 	}
 328:blocks.c      **** 	
 329:blocks.c      **** 	sz *= Buffers[buffId].ElementSize;
 330:blocks.c      **** 	
 331:blocks.c      **** 	pcBlock = Buffers[buffId].Data;
 332:blocks.c      **** 	
 333:blocks.c      ****    while (sz--)
 334:blocks.c      ****    {
 335:blocks.c      ****         crc ^= *pcBlock++;
 336:blocks.c      **** 
 337:blocks.c      ****         for (i = 0; i < 8; i++)
 338:blocks.c      ****             crc = crc & 0x80 ? (crc << 1) ^ 0x31 : crc << 1;
 339:blocks.c      ****    }
 340:blocks.c      **** 	
 341:blocks.c      **** 	ComProcData.Memory[HALGetExtROMByte(paramsAddr + 4)] = crc; // сейчас CRC всегда = 7
 342:blocks.c      **** 	
 343:blocks.c      **** 	return BLOCK_RES_SUCCESS;	
 344:blocks.c      **** }
 345:blocks.c      **** 
 346:blocks.c      **** unsigned char BlockCRCError (unsigned short paramsAddr)
 347:blocks.c      **** {
 348:blocks.c      **** 	if (ComProcData.Memory[HALGetExtROMByte(paramsAddr)])
 349:blocks.c      **** 	{
 350:blocks.c      **** 		ComProcData.LastError = LAST_ERROR_INVALID_CRC;
 351:blocks.c      **** 		return BLOCK_RES_ERROR;
 352:blocks.c      **** 	}
 353:blocks.c      **** 	return BLOCK_RES_SUCCESS;
 354:blocks.c      **** }
 355:blocks.c      **** 
 356:blocks.c      **** unsigned char BlockInCommandBuffId (unsigned short paramsAddr)
 357:blocks.c      **** {
 358:blocks.c      **** 	ComProcData.Memory[HALGetExtROMByte(paramsAddr)] = BUFFER_IN_COMMAND_ID;
 359:blocks.c      **** 	return BLOCK_RES_SUCCESS;	
 360:blocks.c      **** }
 361:blocks.c      **** 
 362:blocks.c      **** unsigned char BlockADC (unsigned short paramsAddr)
 363:blocks.c      **** {
 364:blocks.c      **** 	unsigned char mask;
 365:blocks.c      **** 	
 366:blocks.c      **** 	if (ComProcData.Memory[HALGetExtROMByte(paramsAddr)]) // если write
 367:blocks.c      **** 	{
 368:blocks.c      **** 		if (!HALGetADCReady())
 369:blocks.c      **** 		{
 370:blocks.c      **** 			ComProcData.LastError = LAST_ERROR_ADC_NOT_READY;
 371:blocks.c      **** 			return BLOCK_RES_ERROR;
 372:blocks.c      **** 		}
 373:blocks.c      **** 		mask = HALGetADCMask();
 374:blocks.c      **** 		HALRunADC(mask);
 375:blocks.c      **** 	}
 376:blocks.c      **** 	else // если read
 377:blocks.c      **** 	{
 378:blocks.c      **** 		if (!HALGetADCReady())
 379:blocks.c      **** 		{
 380:blocks.c      **** 			ComProcData.LastError = LAST_ERROR_ADC_NOT_READY;
 381:blocks.c      **** 			return BLOCK_RES_ERROR;
 382:blocks.c      **** 		}
 383:blocks.c      **** 		
 384:blocks.c      **** 		ComProcData.Memory[HALGetExtROMByte(paramsAddr + 3)] =  0;
 385:blocks.c      **** 		ComProcData.Memory[HALGetExtROMByte(paramsAddr + 4)] =  1;
 386:blocks.c      **** 		ComProcData.Memory[HALGetExtROMByte(paramsAddr + 5)] =  2;
 387:blocks.c      **** 		ComProcData.Memory[HALGetExtROMByte(paramsAddr + 6)] =  3;
 388:blocks.c      **** 		ComProcData.Memory[HALGetExtROMByte(paramsAddr + 7)] =  4;
 389:blocks.c      **** 		ComProcData.Memory[HALGetExtROMByte(paramsAddr + 8)] =  5;
 390:blocks.c      **** 		ComProcData.Memory[HALGetExtROMByte(paramsAddr + 9)] =  6;
 391:blocks.c      **** 		ComProcData.Memory[HALGetExtROMByte(paramsAddr + 10)] = 7;
 392:blocks.c      **** 	}
 393:blocks.c      **** 	return BLOCK_RES_SUCCESS;	
 394:blocks.c      **** }
 395:blocks.c      **** 
 396:blocks.c      **** unsigned char BlockADCMask (unsigned short paramsAddr)
 397:blocks.c      **** {
 398:blocks.c      **** 	unsigned char ADCMask;
 399:blocks.c      **** 	
 400:blocks.c      **** 	if (ComProcData.Memory[HALGetExtROMByte(paramsAddr)]) // если write
 401:blocks.c      **** 	{
 402:blocks.c      **** 		ADCMask = ComProcData.Memory[HALGetExtROMByte(paramsAddr + 1)];
 403:blocks.c      **** 		HALSetADCMask(ADCMask);
 404:blocks.c      **** 	}
 405:blocks.c      **** 	else // если read
 406:blocks.c      **** 	{
 407:blocks.c      **** 		ADCMask = HALGetADCMask();
 408:blocks.c      **** 	}
 409:blocks.c      **** 	
 410:blocks.c      **** 	ComProcData.Memory[HALGetExtROMByte(paramsAddr + 3)] = ADCMask;
 411:blocks.c      **** 	
 412:blocks.c      **** 	return BLOCK_RES_SUCCESS;	
 413:blocks.c      **** }
 414:blocks.c      **** 
 415:blocks.c      **** unsigned char BlockADCChannelConfig (unsigned short paramsAddr)
 416:blocks.c      **** {
 417:blocks.c      **** 	unsigned char channel;
 418:blocks.c      **** 	unsigned char mask;
 419:blocks.c      **** 	unsigned char addr;
 420:blocks.c      **** 	unsigned short word = 0;
 421:blocks.c      **** 	
 422:blocks.c      **** 	channel = ComProcData.Memory[HALGetExtROMByte(paramsAddr + 1)];
 423:blocks.c      **** 	mask = ComProcData.Memory[HALGetExtROMByte(paramsAddr + 2)];
 424:blocks.c      **** 	
 425:blocks.c      **** 	if (ComProcData.Memory[HALGetExtROMByte(paramsAddr)]) // если write
 426:blocks.c      **** 	{
 427:blocks.c      **** 		if (mask & 1)
 428:blocks.c      **** 		{
 429:blocks.c      **** 			addr = HALGetExtROMByte(paramsAddr + 3);	
 430:blocks.c      **** 			CREATE_WORD(ComProcData.Memory[addr], ComProcData.Memory[addr + 1], word);
 431:blocks.c      **** 			HALSetADCChannelMaxLevel(channel, word);
 432:blocks.c      **** 		}
 433:blocks.c      **** 		if (mask & 2)
 434:blocks.c      **** 		{
 435:blocks.c      **** 		   addr = HALGetExtROMByte(paramsAddr + 4);	
 436:blocks.c      **** 			CREATE_WORD(ComProcData.Memory[addr], ComProcData.Memory[addr + 1], word);
 437:blocks.c      **** 			HALSetADCChannelMinLevel(channel, word);
 438:blocks.c      **** 		}
 439:blocks.c      **** 		if (mask & 4)
 440:blocks.c      **** 		{
 441:blocks.c      **** 			
 442:blocks.c      **** 			HALSetADCChannelDataSize(channel, ComProcData.Memory[HALGetExtROMByte(paramsAddr + 5)]);
 443:blocks.c      **** 			Buffers[BUFFER_ADC_FIRST_BUF_INDEX + channel].Size =  HALGetADCChannelDataSize(channel);
 444:blocks.c      **** 		}
 445:blocks.c      **** 		if (mask & 8)
 446:blocks.c      **** 			HALSetADCChannelOpCode(channel, ComProcData.Memory[HALGetExtROMByte(paramsAddr + 6)]);
 447:blocks.c      **** 		if (mask & 16)
 448:blocks.c      **** 			HALSetADCChannelApproxId(channel, ComProcData.Memory[HALGetExtROMByte(paramsAddr + 7)]);	
 449:blocks.c      **** 	}
 450:blocks.c      **** 	else // если read
 451:blocks.c      **** 	{
 452:blocks.c      **** 		addr = HALGetExtROMByte(paramsAddr + 9);	
 453:blocks.c      **** 		word = HALGetADCChannelMaxLevel(channel);
 454:blocks.c      **** 		SPLIT_WORD(word, ComProcData.Memory[addr], ComProcData.Memory[addr + 1]);
 455:blocks.c      **** 	
 456:blocks.c      **** 		addr = HALGetExtROMByte(paramsAddr + 10);	
 457:blocks.c      **** 		word = HALGetADCChannelMinLevel(channel);
 458:blocks.c      **** 		SPLIT_WORD(word, ComProcData.Memory[addr], ComProcData.Memory[addr + 1]);
 459:blocks.c      **** 
 460:blocks.c      **** 		ComProcData.Memory[HALGetExtROMByte(paramsAddr + 11)] = HALGetADCChannelDataSize(channel);
 461:blocks.c      **** 	
 462:blocks.c      **** 		ComProcData.Memory[HALGetExtROMByte(paramsAddr + 12)] = HALGetADCChannelOpCode(channel);
 463:blocks.c      **** 
 464:blocks.c      **** 		ComProcData.Memory[HALGetExtROMByte(paramsAddr + 13)] = HALGetADCChannelApproxId(channel);		
 465:blocks.c      **** 	}
 466:blocks.c      **** 	
 467:blocks.c      **** 	return BLOCK_RES_SUCCESS;
 468:blocks.c      **** }
 469:blocks.c      **** 
 470:blocks.c      **** unsigned char BlockHexStrToWord (unsigned short paramsAddr)
 471:blocks.c      **** {	
 472:blocks.c      **** 	unsigned char n1;
 473:blocks.c      **** 	unsigned char n2;
 474:blocks.c      **** 	unsigned char success;
 475:blocks.c      **** 	unsigned char index;
 476:blocks.c      **** 	unsigned char index1;
 477:blocks.c      **** 	
 478:blocks.c      **** 	index = HALGetExtROMByte (paramsAddr);
 479:blocks.c      **** 	index1 = HALGetExtROMByte (paramsAddr + 1);
 480:blocks.c      **** 	
 481:blocks.c      **** 	n1 = ComProcData.Memory [index + 3];
 482:blocks.c      **** 	HEX_TO_HALF_BYTE(n1, success);
 483:blocks.c      **** 	if (!success)
 484:blocks.c      **** 		goto Err;
 485:blocks.c      **** 	
 486:blocks.c      **** 	n2 = ComProcData.Memory [index + 2];
 487:blocks.c      **** 	HEX_TO_HALF_BYTE(n2, success);
 488:blocks.c      **** 	if (!success)
 489:blocks.c      **** 		goto Err;
 490:blocks.c      **** 		
 491:blocks.c      **** 	ComProcData.Memory [index1] = n1 | (n2 << 4);
 492:blocks.c      **** 	
 493:blocks.c      **** 	n1 = ComProcData.Memory [index + 1];
 494:blocks.c      **** 	HEX_TO_HALF_BYTE(n1, success);
 495:blocks.c      **** 	if (!success)
 496:blocks.c      **** 		goto Err;
 497:blocks.c      **** 	
 498:blocks.c      **** 	n2 = ComProcData.Memory [index];
 499:blocks.c      **** 	HEX_TO_HALF_BYTE(n2, success);
 500:blocks.c      **** 	if (!success)
 501:blocks.c      **** 		goto Err;
 502:blocks.c      **** 	
 503:blocks.c      **** 	ComProcData.Memory [index1 + 1] = n1 | (n2 << 4);
 504:blocks.c      **** 	return BLOCK_RES_SUCCESS;
 505:blocks.c      **** 	
 506:blocks.c      **** Err:
 507:blocks.c      **** 	ComProcData.LastError = LAST_ERROR_INVALID_PARAM;
 508:blocks.c      **** 	return BLOCK_RES_ERROR;
 509:blocks.c      **** }
 510:blocks.c      **** 
 511:blocks.c      **** unsigned char BlockWordToHexStr (unsigned short paramsAddr)
 512:blocks.c      **** {
 513:blocks.c      **** 	unsigned char n1;
 514:blocks.c      **** 	unsigned char n2;
 515:blocks.c      **** 	unsigned short index;
 516:blocks.c      **** 	unsigned short index1;
 517:blocks.c      **** 	
 518:blocks.c      **** 	index = HALGetExtROMByte (paramsAddr + 1);
 519:blocks.c      **** 	index1 = HALGetExtROMByte (paramsAddr);
 520:blocks.c      **** 	
 521:blocks.c      **** 	n1 = ComProcData.Memory [index1];
 522:blocks.c      **** 	n2 = n1 >> 4;
 523:blocks.c      **** 	n1 &= 0x0F;
 524:blocks.c      **** 	
 525:blocks.c      **** 	HALF_BYTE_TO_HEX (n1);
 526:blocks.c      **** 	HALF_BYTE_TO_HEX (n2);
 527:blocks.c      **** 	
 528:blocks.c      **** 	ComProcData.Memory [index + 2] = n2;
 529:blocks.c      **** 	ComProcData.Memory [index + 3] = n1;
 530:blocks.c      **** 	
 531:blocks.c      **** 	n1 = ComProcData.Memory [index1 + 1];
 532:blocks.c      **** 	n2 = n1 >> 4;
 533:blocks.c      **** 	n1 &= 0x0F;
 534:blocks.c      **** 	
 535:blocks.c      **** 	HALF_BYTE_TO_HEX (n1);
 536:blocks.c      **** 	HALF_BYTE_TO_HEX (n2);
 537:blocks.c      **** 	
 538:blocks.c      **** 	ComProcData.Memory [index] = n2;
 539:blocks.c      **** 	ComProcData.Memory [index + 1] = n1;
 540:blocks.c      **** 	
 541:blocks.c      **** 	return BLOCK_RES_SUCCESS;
 542:blocks.c      **** }
 543:blocks.c      **** 
 544:blocks.c      **** unsigned char BlockByteToBit (unsigned short paramsAddr)
 545:blocks.c      **** {
 546:blocks.c      **** 	unsigned char byte;
 547:blocks.c      **** 	unsigned char i;	
 548:blocks.c      **** 	
 549:blocks.c      **** 	byte = ComProcData.Memory[HALGetExtROMByte(paramsAddr)];
 550:blocks.c      **** 	
 551:blocks.c      **** 	for (i = 1; i < 9; i++)
 552:blocks.c      **** 	{
 553:blocks.c      **** 		ComProcData.Memory[HALGetExtROMByte(paramsAddr + i)] = (byte & 0x01);
 554:blocks.c      **** 		byte >>= 1;
 555:blocks.c      **** 	}
 556:blocks.c      **** 	
 557:blocks.c      **** 	return BLOCK_RES_SUCCESS;
 558:blocks.c      **** }
 559:blocks.c      **** 
 560:blocks.c      **** unsigned char BlockBitToByte (unsigned short paramsAddr)
 561:blocks.c      **** {
 562:blocks.c      **** 	unsigned char byte;
 563:blocks.c      **** 	unsigned char i;
 564:blocks.c      **** 	
 565:blocks.c      **** 	byte = 0;
 566:blocks.c      **** 	for (i = 0; i < 8; i++)
 567:blocks.c      **** 	{
 568:blocks.c      **** 		byte >>= 1;
 569:blocks.c      **** 		if (ComProcData.Memory[HALGetExtROMByte(paramsAddr + i)])
 570:blocks.c      **** 			byte |= 0x80;	
 571:blocks.c      **** 	}
 572:blocks.c      **** 	
 573:blocks.c      **** 	ComProcData.Memory[HALGetExtROMByte(paramsAddr + 8)] = byte;
 574:blocks.c      **** 	
 575:blocks.c      **** 	return BLOCK_RES_SUCCESS;
 576:blocks.c      **** }
 577:blocks.c      **** 
 578:blocks.c      **** unsigned char BlockBufLen (unsigned short paramsAddr)
 579:blocks.c      **** {
 580:blocks.c      **** 	unsigned char buffId;
 581:blocks.c      **** 	
 582:blocks.c      **** 	buffId = ComProcData.Memory [HALGetExtROMByte (paramsAddr)];
 583:blocks.c      **** 			
 584:blocks.c      **** 	if (buffId >= BUFFERS_COUNT)
 585:blocks.c      **** 	{
 586:blocks.c      **** 		ComProcData.LastError = LAST_ERROR_OUT_OF_RANGE_PARAM;
 587:blocks.c      **** 		return BLOCK_RES_ERROR;
 588:blocks.c      **** 	}
 589:blocks.c      **** 		
 590:blocks.c      **** 	ComProcData.Memory [HALGetExtROMByte (paramsAddr + 1)] = Buffers[buffId].Size;
 591:blocks.c      **** 	
 592:blocks.c      **** 	return BLOCK_RES_SUCCESS;
 593:blocks.c      **** }
 594:blocks.c      **** 
 595:blocks.c      **** unsigned char BlockDiv (unsigned short paramsAddr)
 596:blocks.c      **** {
 597:blocks.c      **** 	if (!ComProcData.Memory[HALGetExtROMByte (paramsAddr)]) // если disable	
 598:blocks.c      **** 	{
 599:blocks.c      **** 		ComProcData.Memory[HALGetExtROMByte (paramsAddr + 3)] = 0;
 600:blocks.c      **** 		return BLOCK_RES_SUCCESS;
 601:blocks.c      **** 	}	
 602:blocks.c      **** 
 603:blocks.c      **** 	ComProcData.Memory[HALGetExtROMByte (paramsAddr + 3)] =  ComProcData.Memory[HALGetExtROMByte (para
 604:blocks.c      **** 	
 605:blocks.c      **** 	return BLOCK_RES_SUCCESS;
 606:blocks.c      **** }
 607:blocks.c      **** 
 608:blocks.c      **** unsigned char BlockAvgMean (unsigned short paramsAddr)
 609:blocks.c      **** {
 610:blocks.c      **** 	unsigned char from;
 611:blocks.c      **** 	unsigned char to;
 612:blocks.c      **** 	unsigned char bufId;
 613:blocks.c      **** 	unsigned short* data;
 614:blocks.c      **** 	unsigned long S;
 615:blocks.c      **** 	unsigned char count;
 616:blocks.c      **** 	
 617:blocks.c      **** 	//TODO: сейчас всегда подразумевается буфер с 2х байтными элементами
 618:blocks.c      **** 
 619:blocks.c      **** 	if (!ComProcData.Memory[HALGetExtROMByte (paramsAddr)]) // если disable	
 620:blocks.c      **** 	{
 621:blocks.c      **** 		ComProcData.Memory[HALGetExtROMByte (paramsAddr + 4)] = 0;
 622:blocks.c      **** 		ComProcData.Memory[HALGetExtROMByte (paramsAddr + 4) + 1] = 0;
 623:blocks.c      **** 		return BLOCK_RES_SUCCESS;
 624:blocks.c      **** 	}
 625:blocks.c      **** 	
 626:blocks.c      **** 	bufId = ComProcData.Memory[HALGetExtROMByte (paramsAddr + 1)];
 627:blocks.c      **** 	from = ComProcData.Memory[HALGetExtROMByte (paramsAddr + 2)];
 628:blocks.c      **** 	to = ComProcData.Memory[HALGetExtROMByte (paramsAddr + 3)];
 629:blocks.c      **** 	
 630:blocks.c      **** 	if (bufId >= BUFFERS_COUNT)
 631:blocks.c      **** 	{
 632:blocks.c      **** 		ComProcData.LastError = LAST_ERROR_OUT_OF_RANGE_PARAM;
 633:blocks.c      **** 		return BLOCK_RES_ERROR;
 634:blocks.c      **** 	}
 635:blocks.c      **** 	if (from >= Buffers[bufId].Size)
 636:blocks.c      **** 	{
 637:blocks.c      **** 		ComProcData.LastError = LAST_ERROR_OUT_OF_RANGE_PARAM;
 638:blocks.c      **** 		return BLOCK_RES_ERROR;
 639:blocks.c      **** 	}
 640:blocks.c      **** 	if (to >= Buffers[bufId].Size)
 641:blocks.c      **** 	{
 642:blocks.c      **** 		ComProcData.LastError = LAST_ERROR_OUT_OF_RANGE_PARAM;
 643:blocks.c      **** 		return BLOCK_RES_ERROR;
 644:blocks.c      **** 	}
 645:blocks.c      **** 	if (to <= from)
 646:blocks.c      **** 	{
 647:blocks.c      **** 		ComProcData.LastError = LAST_ERROR_INVALID_PARAM;
 648:blocks.c      **** 		return BLOCK_RES_ERROR;
 649:blocks.c      **** 	}
 650:blocks.c      **** 	
 651:blocks.c      **** 	data = (unsigned short*)Buffers[bufId].Data;
 652:blocks.c      **** 	count = to - from + 1;
 653:blocks.c      **** 	S = 0;
 654:blocks.c      **** 	
 655:blocks.c      **** 	for (; from <= to; from++)
 656:blocks.c      **** 		S += data[from];
 657:blocks.c      **** 		
 658:blocks.c      **** 	S = S / count;
 659:blocks.c      **** 	
 660:blocks.c      **** 	SPLIT_WORD(S, ComProcData.Memory[HALGetExtROMByte (paramsAddr + 4)], ComProcData.Memory[HALGetExtR
 661:blocks.c      **** 	
 662:blocks.c      **** 	return BLOCK_RES_SUCCESS;
 663:blocks.c      **** }
 664:blocks.c      **** 
 665:blocks.c      **** /*
 666:blocks.c      ****    unsigned char approxId;
 667:blocks.c      **** 	unsigned short code;
 668:blocks.c      **** 	unsigned short val;
 669:blocks.c      **** 	unsigned short u1;
 670:blocks.c      **** 	unsigned char index;
 671:blocks.c      **** 	*/
 672:blocks.c      **** 	
 673:blocks.c      **** unsigned char BlockApprox (unsigned short paramsAddr)
 674:blocks.c      **** {
 675:blocks.c      ****  	unsigned char approxId;
 676:blocks.c      **** 	unsigned short code;
 677:blocks.c      **** 	unsigned short val;
 678:blocks.c      **** 	unsigned short u1;
 679:blocks.c      **** 	unsigned char index;
 680:blocks.c      **** 	
 681:blocks.c      **** 	
 682:blocks.c      **** 	// если не enable
 683:blocks.c      **** 	if (!ComProcData.Memory[HALGetExtROMByte (paramsAddr)])
 684:blocks.c      **** 	{
 685:blocks.c      **** 		ComProcData.Memory[HALGetExtROMByte (paramsAddr + 3)] = ComProcData.Memory[HALGetExtROMByte (para
 686:blocks.c      **** 		ComProcData.Memory[HALGetExtROMByte (paramsAddr + 3) + 1] = ComProcData.Memory[HALGetExtROMByte (
 687:blocks.c      **** 		return BLOCK_RES_SUCCESS;	
 688:blocks.c      **** 	}
 689:blocks.c      **** 	
 690:blocks.c      **** 	approxId = ComProcData.Memory[HALGetExtROMByte (paramsAddr + 1)];
 691:blocks.c      **** 	CREATE_WORD(ComProcData.Memory[HALGetExtROMByte (paramsAddr + 2)], ComProcData.Memory[HALGetExtROM
 692:blocks.c      **** 	
 693:blocks.c      **** 	index = code / 128;
 694:blocks.c      **** 	val = HALGetApproxWord(approxId, index);
 695:blocks.c      **** 	
 696:blocks.c      **** 	if (index <= 7)
 697:blocks.c      **** 	{
 698:blocks.c      **** 		u1 = HALGetApproxWord(approxId, (index + 1));	
 699:blocks.c      **** 		val += ((u1 - val) / 128) * (code - index * 128);			
 700:blocks.c      **** 	}	
 701:blocks.c      **** 	
 702:blocks.c      **** 	SPLIT_WORD(val, ComProcData.Memory[HALGetExtROMByte (paramsAddr + 3)], ComProcData.Memory[HALGetEx
 703:blocks.c      **** 
 704:blocks.c      **** 	return BLOCK_RES_SUCCESS;
 705:blocks.c      **** }
 706:blocks.c      **** 
 707:blocks.c      **** unsigned char BlockConst00 (unsigned short paramsAddr)
 708:blocks.c      **** {
 709:blocks.c      **** 	ComProcData.Memory[HALGetExtROMByte (paramsAddr)] = 0;
 710:blocks.c      **** 	ComProcData.Memory[HALGetExtROMByte (paramsAddr) + 1] = 0;
 711:blocks.c      **** 	return BLOCK_RES_SUCCESS;
 712:blocks.c      **** }
 713:blocks.c      **** 
 714:blocks.c      **** unsigned char BlockWord2DecStr (unsigned short paramsAddr)
 715:blocks.c      **** {
 716:blocks.c      **** 	unsigned short index1;
 717:blocks.c      **** 	unsigned short index2;
 718:blocks.c      **** 	unsigned short word;
 719:blocks.c      **** 	unsigned char byteLo;
 720:blocks.c      **** 	unsigned char byteHi;
 721:blocks.c      **** 	unsigned char i;
 722:blocks.c      **** 	unsigned char pointPos;
 723:blocks.c      **** 	
 724:blocks.c      **** 	index1 = HALGetExtROMByte (paramsAddr);
 725:blocks.c      **** 	index2 = HALGetExtROMByte (paramsAddr + 2);
 726:blocks.c      **** 	
 727:blocks.c      **** 	byteLo = ComProcData.Memory[index1];
 728:blocks.c      **** 	byteHi = ComProcData.Memory[index1 + 1];
 729:blocks.c      **** 	pointPos = ComProcData.Memory[HALGetExtROMByte (paramsAddr + 1)];
 730:blocks.c      **** 	
 731:blocks.c      **** 	CREATE_WORD(byteLo, byteHi, word);
 732:blocks.c      **** 	
 733:blocks.c      **** 	for (i = 0; i < 6; i++)
 734:blocks.c      **** 	{
 735:blocks.c      **** 		if (i == pointPos && i > 0)
 736:blocks.c      **** 			ComProcData.Memory[index2 + 5 - i] = '.';
 737:blocks.c      **** 		else
 738:blocks.c      **** 		{
 739:blocks.c      **** 			ComProcData.Memory[index2 + 5 - i] = (word % 10) + '0';
 740:blocks.c      **** 			word /= 10;
 741:blocks.c      **** 		}
 742:blocks.c      **** 	}
 743:blocks.c      **** 		
 744:blocks.c      **** 	return BLOCK_RES_SUCCESS;
 745:blocks.c      **** }
 746:blocks.c      **** 
 747:blocks.c      **** unsigned char BlockConst3 (unsigned short paramsAddr)
 748:blocks.c      **** {
  81               	 end (size=0) */
  83               	.LM1:
  84               		rcall HALGetExtROMByte
 749:blocks.c      **** 	ComProcData.Memory [HALGetExtROMByte (paramsAddr)] = 3;
  85               	 r30,lo8(ComProcData)
  86               		ldi r31,hi8(ComProcData)
  87 0000 00D0      		add r30,r24
  88 0002 E0E0      		adc r31,__zero_reg__
  89 0004 F0E0      		ldi r24,lo8(3)
  90 0006 E80F      		st Z,r24
  92 000a 83E0      	.LM2:
  93 000c 8083      		ldi r24,lo8(1)
 750:blocks.c      **** 	return BLOCK_RES_SUCCESS;		
 751:blocks.c      **** }
  94               	hi8(1)
  95               	/* epilogue: frame size=0 */
  96 000e 81E0      		ret
  97 0010 90E0      	/* epilogue end (size=1) */
  98               	/* function BlockConst3 size 10 (9) */
 100               	.Lscope0:
 103               	.global	BlockWord2DecStr
 105               	BlockWord2DecStr:
 107               	.LM3:
 108               	/* prologue: frame size=0 */
 109               		push r10
 110               		push r11
 111               		push r12
 112 0014 AF92      		push r13
 113 0016 BF92      		push r14
 114 0018 CF92      		push r15
 115 001a DF92      		push r16
 116 001c EF92      		push r17
 117 001e FF92      		push r28
 118 0020 0F93      		push r29
 119 0022 1F93      	/* prologue end (size=10) */
 120 0024 CF93      		mov r14,r24
 121 0026 DF93      		mov r15,r25
 123 0028 E82E      	.LM4:
 124 002a F92E      		rcall HALGetExtROMByte
 125               		mov r16,r24
 126               		clr r17
 128 002e 082F      	.LM5:
 129 0030 1127      		mov r25,r15
 130               		mov r24,r14
 131               		adiw r24,2
 132 0032 9F2D      		rcall HALGetExtROMByte
 133 0034 8E2D      		mov r10,r24
 134 0036 0296      		clr r11
 136 003a A82E      	.LM6:
 137 003c BB24      		subi r16,lo8(-(ComProcData))
 138               		sbci r17,hi8(-(ComProcData))
 139               		mov r31,r17
 140 003e 0050      		mov r30,r16
 141 0040 1040      		ld r12,Z
 143 0044 E02F      	.LM7:
 144 0046 C080      		ldd r16,Z+1
 146               	.LM8:
 147 0048 0181      		mov r25,r15
 148               		mov r24,r14
 149               		adiw r24,1
 150 004a 9F2D      		rcall HALGetExtROMByte
 151 004c 8E2D      		mov r30,r24
 152 004e 0196      		clr r31
 153 0050 00D0      		subi r30,lo8(-(ComProcData))
 154 0052 E82F      		sbci r31,hi8(-(ComProcData))
 155 0054 FF27      		ld r20,Z
 157 0058 F040      	.LM9:
 158 005a 4081      		clr r17
 159               		mov r19,r16
 160               		clr r18
 161 005c 1127      		clr r13
 162 005e 302F      		or r18,r12
 163 0060 2227      		or r19,r13
 164 0062 DD24      		mov r29,r11
 165 0064 2C29      		mov r28,r10
 166 0066 3D29      		subi r28,lo8(-(ComProcData+5))
 167 0068 DB2D      		sbci r29,hi8(-(ComProcData+5))
 168 006a CA2D      		ldi r16,lo8(0)
 169 006c C050      		ldi r17,hi8(0)
 170 006e D040      		mov r31,r11
 171 0070 00E0      		mov r30,r10
 172 0072 10E0      		sub r30,r20
 173 0074 FB2D      		sbc r31,__zero_reg__
 174 0076 EA2D      		subi r30,lo8(-(ComProcData))
 175 0078 E41B      		sbci r31,hi8(-(ComProcData))
 176 007a F109      		ldi r24,lo8(46)
 177 007c E050      		mov r14,r24
 178 007e F040      	.L4:
 180 0082 E82E      	.LM10:
 181               		cp r20,r16
 182               		brne .L5
 183               		tst r20
 184 0084 4017      		breq .L5
 186 0088 4423      	.LM11:
 187 008a 01F0      		std Z+5,r14
 188               		rjmp .L8
 189               	.L5:
 191 008e 00C0      	.LM12:
 192               		mov r25,r19
 193               		mov r24,r18
 194               		ldi r22,lo8(10)
 195 0090 932F      		ldi r23,hi8(10)
 196 0092 822F      		rcall __udivmodhi4
 197 0094 6AE0      		subi r24,lo8(-(48))
 198 0096 70E0      		st Y,r24
 200 009a 805D      	.LM13:
 201 009c 8883      		mov r25,r19
 202               		mov r24,r18
 203               		ldi r22,lo8(10)
 204 009e 932F      		ldi r23,hi8(10)
 205 00a0 822F      		rcall __udivmodhi4
 206 00a2 6AE0      		mov r18,r22
 207 00a4 70E0      		mov r19,r23
 208 00a6 00D0      	.L8:
 209 00a8 262F      		subi r16,lo8(-(1))
 210 00aa 372F      		sbci r17,hi8(-(1))
 211               		sbiw r28,1
 213 00ae 1F4F      	.LM14:
 214 00b0 2197      		cpi r16,6
 215               		cpc r17,__zero_reg__
 216               		brne .L4
 218 00b4 1105      	.LM15:
 219 00b6 01F4      		ldi r24,lo8(1)
 220               		ldi r25,hi8(1)
 221               	/* epilogue: frame size=0 */
 222 00b8 81E0      		pop r29
 223 00ba 90E0      		pop r28
 224               		pop r17
 225 00bc DF91      		pop r16
 226 00be CF91      		pop r15
 227 00c0 1F91      		pop r14
 228 00c2 0F91      		pop r13
 229 00c4 FF90      		pop r12
 230 00c6 EF90      		pop r11
 231 00c8 DF90      		pop r10
 232 00ca CF90      		ret
 233 00cc BF90      	/* epilogue end (size=11) */
 234 00ce AF90      	/* function BlockWord2DecStr size 95 (74) */
 244               	.Lscope1:
 247               	.global	BlockConst00
 249               	BlockConst00:
 251               	.LM16:
 252               	/* prologue: frame size=0 */
 253               		push r14
 254               		push r15
 255               		push r16
 256 00d2 EF92      		push r17
 257 00d4 FF92      	/* prologue end (size=4) */
 258 00d6 0F93      		mov r14,r24
 259 00d8 1F93      		mov r15,r25
 261 00da E82E      	.LM17:
 262 00dc F92E      		rcall HALGetExtROMByte
 263               		ldi r16,lo8(ComProcData)
 264               		ldi r17,hi8(ComProcData)
 265 00de 00D0      		mov r31,r17
 266 00e0 00E0      		mov r30,r16
 267 00e2 10E0      		add r30,r24
 268 00e4 F12F      		adc r31,__zero_reg__
 269 00e6 E02F      		st Z,__zero_reg__
 271 00ea F11D      	.LM18:
 272 00ec 1082      		mov r25,r15
 273               		mov r24,r14
 274               		rcall HALGetExtROMByte
 275 00ee 9F2D      		add r16,r24
 276 00f0 8E2D      		adc r17,__zero_reg__
 277 00f2 00D0      		mov r31,r17
 278 00f4 080F      		mov r30,r16
 279 00f6 111D      		std Z+1,__zero_reg__
 281 00fa E02F      	.LM19:
 282 00fc 1182      		ldi r24,lo8(1)
 283               		ldi r25,hi8(1)
 284               	/* epilogue: frame size=0 */
 285 00fe 81E0      		pop r17
 286 0100 90E0      		pop r16
 287               		pop r15
 288 0102 1F91      		pop r14
 289 0104 0F91      		ret
 290 0106 FF90      	/* epilogue end (size=5) */
 291 0108 EF90      	/* function BlockConst00 size 29 (20) */
 293               	.Lscope2:
 296               	.global	BlockAvgMean
 298               	BlockAvgMean:
 300               	.LM20:
 301               	/* prologue: frame size=0 */
 302               		push r12
 303               		push r13
 304               		push r14
 305 010c CF92      		push r15
 306 010e DF92      		push r16
 307 0110 EF92      		push r17
 308 0112 FF92      		push r28
 309 0114 0F93      		push r29
 310 0116 1F93      	/* prologue end (size=8) */
 311 0118 CF93      		mov r29,r25
 312 011a DF93      		mov r28,r24
 314 011c D92F      	.LM21:
 315 011e C82F      		rcall HALGetExtROMByte
 316               		mov r30,r24
 317               		clr r31
 318 0120 00D0      		subi r30,lo8(-(ComProcData))
 319 0122 E82F      		sbci r31,hi8(-(ComProcData))
 320 0124 FF27      		ld r24,Z
 321 0126 E050      		tst r24
 322 0128 F040      		brne .L16
 324 012c 8823      	.LM22:
 325 012e 01F4      		mov r16,r28
 326               		mov r17,r29
 327               		subi r16,lo8(-(4))
 328 0130 0C2F      		sbci r17,hi8(-(4))
 329 0132 1D2F      		mov r25,r17
 330 0134 0C5F      		mov r24,r16
 331 0136 1F4F      		rcall HALGetExtROMByte
 332 0138 912F      		mov r30,r24
 333 013a 802F      		clr r31
 334 013c 00D0      		subi r30,lo8(-(ComProcData))
 335 013e E82F      		sbci r31,hi8(-(ComProcData))
 336 0140 FF27      		st Z,__zero_reg__
 338 0144 F040      	.LM23:
 339 0146 1082      		mov r25,r17
 340               		mov r24,r16
 341               		rcall HALGetExtROMByte
 342 0148 912F      		mov r30,r24
 343 014a 802F      		clr r31
 344 014c 00D0      		subi r30,lo8(-(ComProcData))
 345 014e E82F      		sbci r31,hi8(-(ComProcData))
 346 0150 FF27      		std Z+1,__zero_reg__
 347 0152 E050      		rjmp .L31
 348 0154 F040      	.L16:
 350 0158 00C0      	.LM24:
 351               		mov r24,r28
 352               		mov r25,r29
 353               		adiw r24,1
 354 015a 8C2F      		rcall HALGetExtROMByte
 355 015c 9D2F      		mov r30,r24
 356 015e 0196      		clr r31
 357 0160 00D0      		subi r30,lo8(-(ComProcData))
 358 0162 E82F      		sbci r31,hi8(-(ComProcData))
 359 0164 FF27      		ld r17,Z
 361 0168 F040      	.LM25:
 362 016a 1081      		mov r24,r28
 363               		mov r25,r29
 364               		adiw r24,2
 365 016c 8C2F      		rcall HALGetExtROMByte
 366 016e 9D2F      		mov r30,r24
 367 0170 0296      		clr r31
 368 0172 00D0      		subi r30,lo8(-(ComProcData))
 369 0174 E82F      		sbci r31,hi8(-(ComProcData))
 370 0176 FF27      		ld r12,Z
 372 017a F040      	.LM26:
 373 017c C080      		mov r24,r28
 374               		mov r25,r29
 375               		adiw r24,3
 376 017e 8C2F      		rcall HALGetExtROMByte
 377 0180 9D2F      		mov r30,r24
 378 0182 0396      		clr r31
 379 0184 00D0      		subi r30,lo8(-(ComProcData))
 380 0186 E82F      		sbci r31,hi8(-(ComProcData))
 381 0188 FF27      		ld r19,Z
 383 018c F040      	.LM27:
 384 018e 3081      		cpi r17,lo8(9)
 385               		brsh .L33
 387 0190 1930      	.LM28:
 388 0192 00F4      		mov r24,r17
 389               		clr r25
 390               		ldi r22,lo8(7)
 391 0194 812F      		ldi r23,hi8(7)
 392 0196 9927      		rcall __mulhi3
 393 0198 67E0      		mov r31,r25
 394 019a 70E0      		mov r30,r24
 395 019c 00D0      		subi r30,lo8(-(Buffers))
 396 019e F92F      		sbci r31,hi8(-(Buffers))
 397 01a0 E82F      		ldd r24,Z+2
 398 01a2 E050      		cp r12,r24
 399 01a4 F040      		brsh .L33
 401 01a8 C816      	.LM29:
 402 01aa 00F4      		cp r19,r24
 403               		brlo .L23
 404               	.L33:
 406 01ae 00F0      	.LM30:
 407               		ldi r24,lo8(2)
 408               		rjmp .L32
 409               	.L23:
 411 01b2 00C0      	.LM31:
 412               		cp r12,r19
 413               		brlo .L25
 415 01b4 C316      	.LM32:
 416 01b6 00F0      		ldi r24,lo8(1)
 417               	.L32:
 418               		sts ComProcData+65,r24
 419 01b8 81E0      		ldi r24,lo8(0)
 420               		ldi r25,hi8(0)
 421 01ba 8093 0000 		rjmp .L18
 422 01be 80E0      	.L25:
 424 01c2 00C0      	.LM33:
 425               		ldd r20,Z+5
 426               		ldd r21,Z+6
 428 01c4 4581      	.LM34:
 429 01c6 5681      		mov r18,r19
 430               		sub r18,r12
 431               		clr r14
 432 01c8 232F      		clr r15
 433 01ca 2C19      		clr r16
 434 01cc EE24      		clr r17
 435 01ce FF24      		rjmp .L27
 436 01d0 0027      	.L28:
 438 01d4 00C0      	.LM35:
 439               		mov r30,r12
 440               		clr r31
 441               		lsl r30
 442 01d6 EC2D      		rol r31
 443 01d8 FF27      		add r30,r20
 444 01da EE0F      		adc r31,r21
 445 01dc FF1F      		ld r24,Z
 446 01de E40F      		ldd r25,Z+1
 447 01e0 F51F      		clr r26
 448 01e2 8081      		clr r27
 449 01e4 9181      		add r14,r24
 450 01e6 AA27      		adc r15,r25
 451 01e8 BB27      		adc r16,r26
 452 01ea E80E      		adc r17,r27
 454 01ee 0A1F      	.LM36:
 455 01f0 1B1F      		inc r12
 456               	.L27:
 457               		cp r19,r12
 458 01f2 C394      		brsh .L28
 460 01f4 3C15      	.LM37:
 461 01f6 00F4      		subi r18,lo8(-(1))
 462               		clr r19
 463               		clr r20
 464 01f8 2F5F      		clr r21
 465 01fa 3327      		mov r25,r17
 466 01fc 4427      		mov r24,r16
 467 01fe 5527      		mov r23,r15
 468 0200 912F      		mov r22,r14
 469 0202 802F      		rcall __udivmodsi4
 470 0204 7F2D      		mov r14,r18
 471 0206 6E2D      		mov r15,r19
 472 0208 00D0      		mov r16,r20
 473 020a E22E      		mov r17,r21
 475 020e 042F      	.LM38:
 476 0210 152F      		ldi r19,lo8(4)
 477               		mov r12,r19
 478               		mov r13,__zero_reg__
 479 0212 34E0      		add r12,r28
 480 0214 C32E      		adc r13,r29
 481 0216 D12C      		mov r25,r13
 482 0218 CC0E      		mov r24,r12
 483 021a DD1E      		rcall HALGetExtROMByte
 484 021c 9D2D      		mov r30,r24
 485 021e 8C2D      		clr r31
 486 0220 00D0      		subi r30,lo8(-(ComProcData))
 487 0222 E82F      		sbci r31,hi8(-(ComProcData))
 488 0224 FF27      		st Z,r14
 489 0226 E050      		mov r25,r13
 490 0228 F040      		mov r24,r12
 491 022a E082      		rcall HALGetExtROMByte
 492 022c 9D2D      		mov r30,r24
 493 022e 8C2D      		clr r31
 494 0230 00D0      		subi r30,lo8(-(ComProcData))
 495 0232 E82F      		sbci r31,hi8(-(ComProcData))
 496 0234 FF27      		mov r14,r15
 497 0236 E050      		mov r15,r16
 498 0238 F040      		mov r16,r17
 499 023a EF2C      		clr r17
 500 023c F02E      		std Z+1,r14
 501 023e 012F      	.L31:
 502 0240 1127      		ldi r24,lo8(1)
 503 0242 E182      		ldi r25,hi8(1)
 504               	.L18:
 505 0244 81E0      	/* epilogue: frame size=0 */
 506 0246 90E0      		pop r29
 507               		pop r28
 508               		pop r17
 509 0248 DF91      		pop r16
 510 024a CF91      		pop r15
 511 024c 1F91      		pop r14
 512 024e 0F91      		pop r13
 513 0250 FF90      		pop r12
 514 0252 EF90      		ret
 515 0254 DF90      	/* epilogue end (size=9) */
 516 0256 CF90      	/* function BlockAvgMean size 167 (150) */
 525               	.Lscope3:
 528               	.global	BlockDiv
 530               	BlockDiv:
 532               	.LM39:
 533               	/* prologue: frame size=0 */
 534               		push r16
 535               		push r17
 536               		push r28
 537 025a 0F93      		push r29
 538 025c 1F93      	/* prologue end (size=4) */
 539 025e CF93      		mov r29,r25
 540 0260 DF93      		mov r28,r24
 542 0262 D92F      	.LM40:
 543 0264 C82F      		rcall HALGetExtROMByte
 544               		mov r30,r24
 545               		clr r31
 546 0266 00D0      		subi r30,lo8(-(ComProcData))
 547 0268 E82F      		sbci r31,hi8(-(ComProcData))
 548 026a FF27      		ld r24,Z
 549 026c E050      		mov r18,r28
 550 026e F040      		mov r19,r29
 551 0270 8081      		subi r18,lo8(-(3))
 552 0272 2C2F      		sbci r19,hi8(-(3))
 553 0274 3D2F      		tst r24
 554 0276 2D5F      		brne .L35
 556 027a 8823      	.LM41:
 557 027c 01F4      		mov r25,r19
 558               		mov r24,r18
 559               		rcall HALGetExtROMByte
 560 027e 932F      		mov r30,r24
 561 0280 822F      		clr r31
 562 0282 00D0      		subi r30,lo8(-(ComProcData))
 563 0284 E82F      		sbci r31,hi8(-(ComProcData))
 564 0286 FF27      		st Z,__zero_reg__
 565 0288 E050      		rjmp .L37
 566 028a F040      	.L35:
 568 028e 00C0      	.LM42:
 569               		mov r25,r19
 570               		mov r24,r18
 571               		rcall HALGetExtROMByte
 572 0290 932F      		mov r16,r24
 573 0292 822F      		mov r24,r28
 574 0294 00D0      		mov r25,r29
 575 0296 082F      		adiw r24,1
 576 0298 8C2F      		rcall HALGetExtROMByte
 577 029a 9D2F      		mov r30,r24
 578 029c 0196      		clr r31
 579 029e 00D0      		subi r30,lo8(-(ComProcData))
 580 02a0 E82F      		sbci r31,hi8(-(ComProcData))
 581 02a2 FF27      		ld r17,Z
 582 02a4 E050      		mov r24,r28
 583 02a6 F040      		mov r25,r29
 584 02a8 1081      		adiw r24,2
 585 02aa 8C2F      		rcall HALGetExtROMByte
 586 02ac 9D2F      		mov r26,r16
 587 02ae 0296      		clr r27
 588 02b0 00D0      		subi r26,lo8(-(ComProcData))
 589 02b2 A02F      		sbci r27,hi8(-(ComProcData))
 590 02b4 BB27      		mov r30,r24
 591 02b6 A050      		clr r31
 592 02b8 B040      		subi r30,lo8(-(ComProcData))
 593 02ba E82F      		sbci r31,hi8(-(ComProcData))
 594 02bc FF27      		ld r22,Z
 595 02be E050      		mov r24,r17
 596 02c0 F040      		rcall __udivmodqi4
 597 02c2 6081      		st X,r24
 598 02c4 812F      	.L37:
 600 02c8 8C93      	.LM43:
 601               		ldi r24,lo8(1)
 602               		ldi r25,hi8(1)
 603               	/* epilogue: frame size=0 */
 604 02ca 81E0      		pop r29
 605 02cc 90E0      		pop r28
 606               		pop r17
 607 02ce DF91      		pop r16
 608 02d0 CF91      		ret
 609 02d2 1F91      	/* epilogue end (size=5) */
 610 02d4 0F91      	/* function BlockDiv size 63 (54) */
 612               	.Lscope4:
 615               	.global	BlockBufLen
 617               	BlockBufLen:
 619               	.LM44:
 620               	/* prologue: frame size=0 */
 621               		push r17
 622               		push r28
 623               		push r29
 624 02d8 1F93      	/* prologue end (size=3) */
 625 02da CF93      		mov r29,r25
 626 02dc DF93      		mov r28,r24
 628 02de D92F      	.LM45:
 629 02e0 C82F      		rcall HALGetExtROMByte
 630               		mov r30,r24
 631               		clr r31
 632 02e2 00D0      		subi r30,lo8(-(ComProcData))
 633 02e4 E82F      		sbci r31,hi8(-(ComProcData))
 634 02e6 FF27      		ld r17,Z
 636 02ea F040      	.LM46:
 637 02ec 1081      		cpi r17,lo8(9)
 638               		brlo .L40
 640 02ee 1930      	.LM47:
 641 02f0 00F0      		ldi r24,lo8(2)
 642               		sts ComProcData+65,r24
 643               		ldi r24,lo8(0)
 644 02f2 82E0      		ldi r25,hi8(0)
 645 02f4 8093 0000 		rjmp .L42
 646 02f8 80E0      	.L40:
 648 02fc 00C0      	.LM48:
 649               		mov r24,r28
 650               		mov r25,r29
 651               		adiw r24,1
 652 02fe 8C2F      		rcall HALGetExtROMByte
 653 0300 9D2F      		mov r30,r24
 654 0302 0196      		clr r31
 655 0304 00D0      		subi r30,lo8(-(ComProcData))
 656 0306 E82F      		sbci r31,hi8(-(ComProcData))
 657 0308 FF27      		mov r24,r17
 658 030a E050      		clr r25
 659 030c F040      		ldi r22,lo8(7)
 660 030e 812F      		ldi r23,hi8(7)
 661 0310 9927      		rcall __mulhi3
 662 0312 67E0      		mov r27,r25
 663 0314 70E0      		mov r26,r24
 664 0316 00D0      		subi r26,lo8(-(Buffers))
 665 0318 B92F      		sbci r27,hi8(-(Buffers))
 666 031a A82F      		mov r29,r27
 667 031c A050      		mov r28,r26
 668 031e B040      		ldd r24,Y+2
 669 0320 DB2F      		st Z,r24
 670 0322 CA2F      		ldi r24,lo8(1)
 671 0324 8A81      		ldi r25,hi8(1)
 672 0326 8083      	.L42:
 673 0328 81E0      	/* epilogue: frame size=0 */
 674 032a 90E0      		pop r29
 675               		pop r28
 676               		pop r17
 677 032c DF91      		ret
 678 032e CF91      	/* epilogue end (size=4) */
 679 0330 1F91      	/* function BlockBufLen size 46 (39) */
 684               	.Lscope5:
 687               	.global	BlockBitToByte
 689               	BlockBitToByte:
 691               	.LM49:
 692               	/* prologue: frame size=0 */
 693               		push r13
 694               		push r14
 695               		push r15
 696 0334 DF92      		push r16
 697 0336 EF92      		push r17
 698 0338 FF92      		push r28
 699 033a 0F93      		push r29
 700 033c 1F93      	/* prologue end (size=7) */
 701 033e CF93      		mov r14,r24
 702 0340 DF93      		mov r15,r25
 703               		clr r13
 704 0342 E82E      		ldi r16,lo8(0)
 705 0344 F92E      		ldi r17,hi8(0)
 706 0346 DD24      		mov r29,r25
 707 0348 00E0      		mov r28,r24
 708 034a 10E0      	.L45:
 710 034e C82F      	.LM50:
 711               		lsr r13
 713               	.LM51:
 714 0350 D694      		mov r24,r28
 715               		mov r25,r29
 716               		rcall HALGetExtROMByte
 717 0352 8C2F      		mov r30,r24
 718 0354 9D2F      		clr r31
 719 0356 00D0      		subi r30,lo8(-(ComProcData))
 720 0358 E82F      		sbci r31,hi8(-(ComProcData))
 721 035a FF27      		ld r24,Z
 722 035c E050      		tst r24
 723 035e F040      		breq .L46
 725 0362 8823      	.LM52:
 726 0364 01F0      		ldi r24,lo8(-128)
 727               		or r13,r24
 728               	.L46:
 729 0366 80E8      		subi r16,lo8(-(1))
 730 0368 D82A      		sbci r17,hi8(-(1))
 731               		adiw r28,1
 733 036c 1F4F      	.LM53:
 734 036e 2196      		cpi r16,8
 735               		cpc r17,__zero_reg__
 736               		brne .L45
 738 0372 1105      	.LM54:
 739 0374 01F4      		mov r25,r15
 740               		mov r24,r14
 741               		adiw r24,8
 742 0376 9F2D      		rcall HALGetExtROMByte
 743 0378 8E2D      		mov r30,r24
 744 037a 0896      		clr r31
 745 037c 00D0      		subi r30,lo8(-(ComProcData))
 746 037e E82F      		sbci r31,hi8(-(ComProcData))
 747 0380 FF27      		st Z,r13
 749 0384 F040      	.LM55:
 750 0386 D082      		ldi r24,lo8(1)
 751               		ldi r25,hi8(1)
 752               	/* epilogue: frame size=0 */
 753 0388 81E0      		pop r29
 754 038a 90E0      		pop r28
 755               		pop r17
 756 038c DF91      		pop r16
 757 038e CF91      		pop r15
 758 0390 1F91      		pop r14
 759 0392 0F91      		pop r13
 760 0394 FF90      		ret
 761 0396 EF90      	/* epilogue end (size=8) */
 762 0398 DF90      	/* function BlockBitToByte size 52 (37) */
 767               	.Lscope6:
 770               	.global	BlockByteToBit
 772               	BlockByteToBit:
 774               	.LM56:
 775               	/* prologue: frame size=0 */
 776               		push r14
 777               		push r15
 778               		push r16
 779 039c EF92      		push r17
 780 039e FF92      	/* prologue end (size=4) */
 781 03a0 0F93      		mov r16,r24
 782 03a2 1F93      		mov r17,r25
 784 03a4 082F      	.LM57:
 785 03a6 192F      		rcall HALGetExtROMByte
 786               		mov r30,r24
 787               		clr r31
 788 03a8 00D0      		subi r30,lo8(-(ComProcData))
 789 03aa E82F      		sbci r31,hi8(-(ComProcData))
 790 03ac FF27      		ld r15,Z
 791 03ae E050      		subi r16,lo8(-(1))
 792 03b0 F040      		sbci r17,hi8(-(1))
 793 03b2 F080      		ldi r23,lo8(1)
 794 03b4 0F5F      		mov r14,r23
 795 03b6 1F4F      	.L53:
 797 03ba E72E      	.LM58:
 798               		mov r25,r17
 799               		mov r24,r16
 800               		rcall HALGetExtROMByte
 801 03bc 912F      		mov r30,r24
 802 03be 802F      		clr r31
 803 03c0 00D0      		subi r30,lo8(-(ComProcData))
 804 03c2 E82F      		sbci r31,hi8(-(ComProcData))
 805 03c4 FF27      		mov r24,r15
 806 03c6 E050      		andi r24,lo8(1)
 807 03c8 F040      		st Z,r24
 809 03cc 8170      	.LM59:
 810 03ce 8083      		lsr r15
 812               	.LM60:
 813 03d0 F694      		inc r14
 814               		subi r16,lo8(-(1))
 815               		sbci r17,hi8(-(1))
 816 03d2 E394      		ldi r24,lo8(9)
 817 03d4 0F5F      		cp r14,r24
 818 03d6 1F4F      		brne .L53
 820 03da E816      	.LM61:
 821 03dc 01F4      		ldi r24,lo8(1)
 822               		ldi r25,hi8(1)
 823               	/* epilogue: frame size=0 */
 824 03de 81E0      		pop r17
 825 03e0 90E0      		pop r16
 826               		pop r15
 827 03e2 1F91      		pop r14
 828 03e4 0F91      		ret
 829 03e6 FF90      	/* epilogue end (size=5) */
 830 03e8 EF90      	/* function BlockByteToBit size 40 (31) */
 836               	.Lscope7:
 839               	.global	BlockWordToHexStr
 841               	BlockWordToHexStr:
 843               	.LM62:
 844               	/* prologue: frame size=0 */
 845               		push r16
 846               		push r17
 847               		push r28
 848 03ec 0F93      		push r29
 849 03ee 1F93      	/* prologue end (size=4) */
 850 03f0 CF93      		mov r16,r24
 851 03f2 DF93      		mov r17,r25
 853 03f4 082F      	.LM63:
 854 03f6 192F      		adiw r24,1
 855               		rcall HALGetExtROMByte
 856               		mov r28,r24
 857 03f8 0196      		clr r29
 859 03fc C82F      	.LM64:
 860 03fe DD27      		mov r25,r17
 861               		mov r24,r16
 862               		rcall HALGetExtROMByte
 863 0400 912F      		mov r26,r24
 864 0402 802F      		clr r27
 866 0406 A82F      	.LM65:
 867 0408 BB27      		mov r31,r27
 868               		mov r30,r26
 869               		subi r30,lo8(-(ComProcData))
 870 040a FB2F      		sbci r31,hi8(-(ComProcData))
 871 040c EA2F      		ld r24,Z
 873 0410 F040      	.LM66:
 874 0412 8081      		mov r18,r24
 875               		swap r18
 876               		andi r18,0x0f
 878 0416 2295      	.LM67:
 879 0418 2F70      		mov r25,r24
 880               		andi r25,lo8(15)
 882 041a 982F      	.LM68:
 883 041c 9F70      		cpi r25,lo8(10)
 884               		brsh .L59
 886 041e 9A30      	.LM69:
 887 0420 00F4      		subi r25,lo8(-(48))
 888               		rjmp .L61
 889               	.L59:
 890 0422 905D      		mov r24,r25
 891 0424 00C0      		subi r24,lo8(-(-10))
 892               		cpi r24,lo8(6)
 893 0426 892F      		brlo .L62
 894 0428 8A50      		ldi r25,lo8(0)
 895 042a 8630      		rjmp .L61
 896 042c 00F0      	.L62:
 897 042e 90E0      		subi r25,lo8(-(55))
 898 0430 00C0      	.L61:
 900 0432 995C      	.LM70:
 901               		cpi r18,lo8(10)
 902               		brsh .L64
 903               		mov r24,r18
 904 0434 2A30      		subi r24,lo8(-(48))
 905 0436 00F4      		rjmp .L66
 906 0438 822F      	.L64:
 907 043a 805D      		mov r24,r18
 908 043c 00C0      		subi r24,lo8(-(-10))
 909               		cpi r24,lo8(6)
 910 043e 822F      		brlo .L67
 911 0440 8A50      		ldi r24,lo8(0)
 912 0442 8630      		rjmp .L66
 913 0444 00F0      	.L67:
 914 0446 80E0      		mov r24,r18
 915 0448 00C0      		subi r24,lo8(-(55))
 916               	.L66:
 918 044c 895C      	.LM71:
 919               		mov r31,r29
 920               		mov r30,r28
 921               		subi r30,lo8(-(ComProcData))
 922 044e FD2F      		sbci r31,hi8(-(ComProcData))
 923 0450 EC2F      		std Z+2,r24
 925 0454 F040      	.LM72:
 926 0456 8283      		std Z+3,r25
 928               	.LM73:
 929 0458 9383      		subi r26,lo8(-(ComProcData))
 930               		sbci r27,hi8(-(ComProcData))
 931               		mov r31,r27
 932 045a A050      		mov r30,r26
 933 045c B040      		ldd r24,Z+1
 935 0460 EA2F      	.LM74:
 936 0462 8181      		mov r25,r24
 937               		swap r25
 938               		andi r25,0x0f
 940 0466 9295      	.LM75:
 941 0468 9F70      		mov r30,r24
 942               		andi r30,lo8(15)
 944 046a E82F      	.LM76:
 945 046c EF70      		cpi r30,lo8(10)
 946               		brsh .L69
 947               		mov r18,r30
 948 046e EA30      		subi r18,lo8(-(48))
 949 0470 00F4      		rjmp .L71
 950 0472 2E2F      	.L69:
 951 0474 205D      		mov r24,r30
 952 0476 00C0      		subi r24,lo8(-(-10))
 953               		cpi r24,lo8(6)
 954 0478 8E2F      		brlo .L72
 955 047a 8A50      		ldi r18,lo8(0)
 956 047c 8630      		rjmp .L71
 957 047e 00F0      	.L72:
 958 0480 20E0      		mov r18,r30
 959 0482 00C0      		subi r18,lo8(-(55))
 960               	.L71:
 962 0486 295C      	.LM77:
 963               		cpi r25,lo8(10)
 964               		brsh .L74
 965               		mov r24,r25
 966 0488 9A30      		subi r24,lo8(-(48))
 967 048a 00F4      		rjmp .L76
 968 048c 892F      	.L74:
 969 048e 805D      		mov r24,r25
 970 0490 00C0      		subi r24,lo8(-(-10))
 971               		cpi r24,lo8(6)
 972 0492 892F      		brlo .L77
 973 0494 8A50      		ldi r24,lo8(0)
 974 0496 8630      		rjmp .L76
 975 0498 00F0      	.L77:
 976 049a 80E0      		mov r24,r25
 977 049c 00C0      		subi r24,lo8(-(55))
 978               	.L76:
 980 04a0 895C      	.LM78:
 981               		mov r31,r29
 982               		mov r30,r28
 983               		subi r30,lo8(-(ComProcData))
 984 04a2 FD2F      		sbci r31,hi8(-(ComProcData))
 985 04a4 EC2F      		st Z,r24
 987 04a8 F040      	.LM79:
 988 04aa 8083      		std Z+1,r18
 990               	.LM80:
 991 04ac 2183      		ldi r24,lo8(1)
 992               		ldi r25,hi8(1)
 993               	/* epilogue: frame size=0 */
 994 04ae 81E0      		pop r29
 995 04b0 90E0      		pop r28
 996               		pop r17
 997 04b2 DF91      		pop r16
 998 04b4 CF91      		ret
 999 04b6 1F91      	/* epilogue end (size=5) */
 1000 04b8 0F91      	/* function BlockWordToHexStr size 104 (95) */
 1008               	.Lscope8:
 1011               	.global	BlockHexStrToWord
 1013               	BlockHexStrToWord:
 1015               	.LM81:
 1016               	/* prologue: frame size=0 */
 1017               		push r15
 1018               		push r16
 1019               		push r17
 1020 04bc FF92      	/* prologue end (size=3) */
 1021 04be 0F93      		mov r16,r24
 1022 04c0 1F93      		mov r17,r25
 1024 04c2 082F      	.LM82:
 1025 04c4 192F      		rcall HALGetExtROMByte
 1026               		mov r15,r24
 1028 04c6 00D0      	.LM83:
 1029 04c8 F82E      		mov r25,r17
 1030               		mov r24,r16
 1031               		adiw r24,1
 1032 04ca 912F      		rcall HALGetExtROMByte
 1033 04cc 802F      		mov r19,r24
 1035 04d0 00D0      	.LM84:
 1036 04d2 382F      		mov r30,r15
 1037               		clr r31
 1038               		subi r30,lo8(-(ComProcData))
 1039 04d4 EF2D      		sbci r31,hi8(-(ComProcData))
 1040 04d6 FF27      		ldd r25,Z+3
 1042 04da F040      	.LM85:
 1043 04dc 9381      		mov r18,r25
 1044               		subi r18,lo8(-(-48))
 1045               		cpi r18,lo8(10)
 1046 04de 292F      		brlo .L81
 1048 04e2 2A30      	.LM86:
 1049 04e4 00F0      		mov r24,r25
 1050               		subi r24,lo8(-(-65))
 1051               		cpi r24,lo8(6)
 1052 04e6 892F      		brsh .L83
 1053 04e8 8154      		subi r18,lo8(-(-7))
 1054 04ea 8630      	.L81:
 1056 04ee 2750      	.LM87:
 1057               		ldd r25,Z+2
 1059               	.LM88:
 1060 04f0 9281      		mov r24,r25
 1061               		subi r24,lo8(-(-48))
 1062               		cpi r24,lo8(10)
 1063 04f2 892F      		brlo .L85
 1064 04f4 8053      		subi r24,lo8(-(-17))
 1065 04f6 8A30      		cpi r24,lo8(6)
 1066 04f8 00F0      		brsh .L83
 1067 04fa 8151      		subi r24,lo8(-(10))
 1068 04fc 8630      	.L85:
 1070 0500 865F      	.LM89:
 1071               		mov r26,r19
 1072               		clr r27
 1073               		subi r26,lo8(-(ComProcData))
 1074 0502 A32F      		sbci r27,hi8(-(ComProcData))
 1075 0504 BB27      		swap r24
 1076 0506 A050      		andi r24,0xf0
 1077 0508 B040      		or r24,r18
 1078 050a 8295      		st X,r24
 1080 050e 822B      	.LM90:
 1081 0510 8C93      		ldd r25,Z+1
 1083               	.LM91:
 1084 0512 9181      		mov r18,r25
 1085               		subi r18,lo8(-(-48))
 1086               		cpi r18,lo8(10)
 1087 0514 292F      		brlo .L88
 1088 0516 2053      		mov r24,r25
 1089 0518 2A30      		subi r24,lo8(-(-65))
 1090 051a 00F0      		cpi r24,lo8(6)
 1091 051c 892F      		brsh .L83
 1092 051e 8154      		subi r18,lo8(-(-7))
 1093 0520 8630      	.L88:
 1095 0524 2750      	.LM92:
 1096               		ld r25,Z
 1098               	.LM93:
 1099 0526 9081      		mov r24,r25
 1100               		subi r24,lo8(-(-48))
 1101               		cpi r24,lo8(10)
 1102 0528 892F      		brlo .L91
 1103 052a 8053      		subi r24,lo8(-(-17))
 1104 052c 8A30      		cpi r24,lo8(6)
 1105 052e 00F0      		brsh .L83
 1106 0530 8151      		subi r24,lo8(-(10))
 1107 0532 8630      	.L91:
 1109 0536 865F      	.LM94:
 1110               		swap r24
 1111               		andi r24,0xf0
 1112               		or r24,r18
 1113 0538 8295      		mov r31,r27
 1114 053a 807F      		mov r30,r26
 1115 053c 822B      		std Z+1,r24
 1116 053e FB2F      		ldi r24,lo8(1)
 1117 0540 EA2F      		ldi r25,hi8(1)
 1118 0542 8183      		rjmp .L94
 1119 0544 81E0      	.L83:
 1121 0548 00C0      	.LM95:
 1122               		ldi r24,lo8(1)
 1123               		sts ComProcData+65,r24
 1124               		ldi r24,lo8(0)
 1125 054a 81E0      		ldi r25,hi8(0)
 1126 054c 8093 0000 	.L94:
 1127 0550 80E0      	/* epilogue: frame size=0 */
 1128 0552 90E0      		pop r17
 1129               		pop r16
 1130               		pop r15
 1131 0554 1F91      		ret
 1132 0556 0F91      	/* epilogue end (size=4) */
 1133 0558 FF90      	/* function BlockHexStrToWord size 80 (73) */
 1141               	.Lscope9:
 1144               	.global	BlockInCommandBuffId
 1146               	BlockInCommandBuffId:
 1148               	.LM96:
 1149               	/* prologue: frame size=0 */
 1150               	/* prologue end (size=0) */
 1152               	.LM97:
 1153               		rcall HALGetExtROMByte
 1154               		ldi r30,lo8(ComProcData)
 1155               		ldi r31,hi8(ComProcData)
 1156 055c 00D0      		add r30,r24
 1157 055e E0E0      		adc r31,__zero_reg__
 1158 0560 F0E0      		ldi r24,lo8(8)
 1159 0562 E80F      		st Z,r24
 1161 0566 88E0      	.LM98:
 1162 0568 8083      		ldi r24,lo8(1)
 1163               		ldi r25,hi8(1)
 1164               	/* epilogue: frame size=0 */
 1165 056a 81E0      		ret
 1166 056c 90E0      	/* epilogue end (size=1) */
 1167               	/* function BlockInCommandBuffId size 10 (9) */
 1169               	.Lscope10:
 1172               	.global	BlockCRCError
 1174               	BlockCRCError:
 1176               	.LM99:
 1177               	/* prologue: frame size=0 */
 1178               	/* prologue end (size=0) */
 1180               	.LM100:
 1181               		rcall HALGetExtROMByte
 1182               		mov r30,r24
 1183               		clr r31
 1184 0570 00D0      		subi r30,lo8(-(ComProcData))
 1185 0572 E82F      		sbci r31,hi8(-(ComProcData))
 1186 0574 FF27      		ld r24,Z
 1187 0576 E050      		tst r24
 1188 0578 F040      		brne .L99
 1190 057c 8823      	.LM101:
 1191 057e 01F4      		ldi r24,lo8(1)
 1192               		ldi r25,hi8(1)
 1193               		ret
 1194 0580 81E0      	.L99:
 1196 0584 0895      	.LM102:
 1197               		ldi r24,lo8(3)
 1198               		sts ComProcData+65,r24
 1199               		ldi r24,lo8(0)
 1200 0586 83E0      		ldi r25,hi8(0)
 1202 058c 80E0      	.LM103:
 1203 058e 90E0      		ret
 1204               	/* epilogue: frame size=0 */
 1205               	/* epilogue: noreturn */
 1206 0590 0895      	/* epilogue end (size=0) */
 1207               	/* function BlockCRCError size 17 (17) */
 1209               	.Lscope11:
 1212               	.global	BlockCRC
 1214               	BlockCRC:
 1216               	.LM104:
 1217               	/* prologue: frame size=0 */
 1218               		push r17
 1219               		push r28
 1220               		push r29
 1221 0592 1F93      	/* prologue end (size=3) */
 1222 0594 CF93      		mov r29,r25
 1223 0596 DF93      		mov r28,r24
 1225 0598 D92F      	.LM105:
 1226 059a C82F      		adiw r24,2
 1227               		rcall HALGetExtROMByte
 1228               		mov r30,r24
 1229 059c 0296      		clr r31
 1230 059e 00D0      		subi r30,lo8(-(ComProcData))
 1231 05a0 E82F      		sbci r31,hi8(-(ComProcData))
 1232 05a2 FF27      		ld r24,Z
 1233 05a4 E050      		tst r24
 1234 05a6 F040      		brne .+2
 1235 05a8 8081      		rjmp .L122
 1237 05ac 01F4      	.LM106:
 1238 05ae 00C0      		mov r24,r28
 1239               		mov r25,r29
 1240               		rcall HALGetExtROMByte
 1241 05b0 8C2F      		mov r30,r24
 1242 05b2 9D2F      		clr r31
 1243 05b4 00D0      		subi r30,lo8(-(ComProcData))
 1244 05b6 E82F      		sbci r31,hi8(-(ComProcData))
 1245 05b8 FF27      		ld r17,Z
 1247 05bc F040      	.LM107:
 1248 05be 1081      		cpi r17,lo8(9)
 1249               		brsh .L123
 1251 05c0 1930      	.LM108:
 1252 05c2 00F4      		mov r24,r28
 1253               		mov r25,r29
 1254               		adiw r24,1
 1255 05c4 8C2F      		rcall HALGetExtROMByte
 1256 05c6 9D2F      		mov r30,r24
 1257 05c8 0196      		clr r31
 1258 05ca 00D0      		subi r30,lo8(-(ComProcData))
 1259 05cc E82F      		sbci r31,hi8(-(ComProcData))
 1260 05ce FF27      		ld r18,Z
 1262 05d2 F040      	.LM109:
 1263 05d4 2081      		mov r24,r17
 1264               		clr r25
 1265               		ldi r22,lo8(7)
 1266 05d6 812F      		ldi r23,hi8(7)
 1267 05d8 9927      		rcall __mulhi3
 1268 05da 67E0      		mov r27,r25
 1269 05dc 70E0      		mov r26,r24
 1270 05de 00D0      		subi r26,lo8(-(Buffers))
 1271 05e0 B92F      		sbci r27,hi8(-(Buffers))
 1272 05e2 A82F      		mov r31,r27
 1273 05e4 A050      		mov r30,r26
 1274 05e6 B040      		ldd r24,Z+2
 1275 05e8 FB2F      		cp r24,r18
 1276 05ea EA2F      		brsh .L109
 1277 05ec 8281      	.L123:
 1279 05f0 00F4      	.LM110:
 1280               		ldi r24,lo8(2)
 1281               		sts ComProcData+65,r24
 1282               		ldi r24,lo8(0)
 1283 05f2 82E0      		ldi r25,hi8(0)
 1284 05f4 8093 0000 		rjmp .L106
 1285 05f8 80E0      	.L109:
 1287 05fc 00C0      	.LM111:
 1288               		mov r31,r27
 1289               		mov r30,r26
 1290               		ldd r22,Z+4
 1291 05fe FB2F      		mov r24,r18
 1292 0600 EA2F      		rcall __mulqi3
 1293 0602 6481      		mov r25,r24
 1295 0606 00D0      	.LM112:
 1296 0608 982F      		ldd r26,Z+5
 1297               		ldd r27,Z+6
 1298               		ldi r17,lo8(-1)
 1299 060a A581      		rjmp .L111
 1300 060c B681      	.L112:
 1302 0610 00C0      	.LM113:
 1303               		ld r24,X
 1304               		eor r17,r24
 1305               		ldi r24,lo8(0)
 1306 0612 8C91      		ldi r18,lo8(49)
 1307 0614 1827      	.L113:
 1309 0618 21E3      	.LM114:
 1310               		sbrs r17,7
 1311               		rjmp .L114
 1312               		lsl r17
 1313 061a 17FF      		eor r17,r18
 1314 061c 00C0      		rjmp .L116
 1315 061e 110F      	.L114:
 1316 0620 1227      		lsl r17
 1317 0622 00C0      	.L116:
 1319 0624 110F      	.LM115:
 1320               		subi r24,lo8(-(1))
 1321               		cpi r24,lo8(8)
 1322               		brne .L113
 1324 0628 8830      	.LM116:
 1325 062a 01F4      		adiw r26,1
 1326               	.L111:
 1328 062c 1196      	.LM117:
 1329               		subi r25,1
 1330               		brcc .L112
 1332 062e 9150      	.LM118:
 1333 0630 00F4      		mov r24,r28
 1334               		mov r25,r29
 1335               		adiw r24,4
 1336 0632 8C2F      		rcall HALGetExtROMByte
 1337 0634 9D2F      		mov r30,r24
 1338 0636 0496      		clr r31
 1339 0638 00D0      		subi r30,lo8(-(ComProcData))
 1340 063a E82F      		sbci r31,hi8(-(ComProcData))
 1341 063c FF27      		st Z,r17
 1342 063e E050      	.L122:
 1343 0640 F040      		ldi r24,lo8(1)
 1344 0642 1083      		ldi r25,hi8(1)
 1345               	.L106:
 1346 0644 81E0      	/* epilogue: frame size=0 */
 1347 0646 90E0      		pop r29
 1348               		pop r28
 1349               		pop r17
 1350 0648 DF91      		ret
 1351 064a CF91      	/* epilogue end (size=4) */
 1352 064c 1F91      	/* function BlockCRC size 96 (89) */
 1361               	.Lscope12:
 1364               	.global	BlockAnd
 1366               	BlockAnd:
 1368               	.LM119:
 1369               	/* prologue: frame size=0 */
 1370               		push r17
 1371               		push r28
 1372               		push r29
 1373 0650 1F93      	/* prologue end (size=3) */
 1374 0652 CF93      		mov r29,r25
 1375 0654 DF93      		mov r28,r24
 1377 0656 D92F      	.LM120:
 1378 0658 C82F      		adiw r24,2
 1379               		rcall HALGetExtROMByte
 1380               		mov r17,r24
 1381 065a 0296      		mov r24,r28
 1382 065c 00D0      		mov r25,r29
 1383 065e 182F      		rcall HALGetExtROMByte
 1384 0660 8C2F      		mov r30,r24
 1385 0662 9D2F      		clr r31
 1386 0664 00D0      		subi r30,lo8(-(ComProcData))
 1387 0666 E82F      		sbci r31,hi8(-(ComProcData))
 1388 0668 FF27      		ld r24,Z
 1389 066a E050      		tst r24
 1390 066c F040      		breq .L125
 1392 0670 8823      	.LM121:
 1393 0672 01F0      		mov r24,r28
 1394               		mov r25,r29
 1395               		adiw r24,1
 1396 0674 8C2F      		rcall HALGetExtROMByte
 1397 0676 9D2F      		mov r30,r24
 1398 0678 0196      		clr r31
 1399 067a 00D0      		subi r30,lo8(-(ComProcData))
 1400 067c E82F      		sbci r31,hi8(-(ComProcData))
 1401 067e FF27      		ld r24,Z
 1402 0680 E050      		tst r24
 1403 0682 F040      		breq .L125
 1404 0684 8081      		ldi r24,lo8(1)
 1405 0686 8823      		ldi r25,hi8(1)
 1406 0688 01F0      		rjmp .L128
 1407 068a 81E0      	.L125:
 1408 068c 90E0      		ldi r24,lo8(0)
 1409 068e 00C0      		ldi r25,hi8(0)
 1410               	.L128:
 1411 0690 80E0      		mov r30,r17
 1412 0692 90E0      		clr r31
 1413               		subi r30,lo8(-(ComProcData))
 1414 0694 E12F      		sbci r31,hi8(-(ComProcData))
 1415 0696 FF27      		st Z,r24
 1417 069a F040      	.LM122:
 1418 069c 8083      		ldi r24,lo8(1)
 1419               		ldi r25,hi8(1)
 1420               	/* epilogue: frame size=0 */
 1421 069e 81E0      		pop r29
 1422 06a0 90E0      		pop r28
 1423               		pop r17
 1424 06a2 DF91      		ret
 1425 06a4 CF91      	/* epilogue end (size=4) */
 1426 06a6 1F91      	/* function BlockAnd size 45 (38) */
 1428               	.Lscope13:
 1431               	.global	BlockSortBuf
 1433               	BlockSortBuf:
 1435               	.LM123:
 1436               	/* prologue: frame size=0 */
 1437               		push r14
 1438               		push r15
 1439               		push r16
 1440 06aa EF92      		push r17
 1441 06ac FF92      		push r28
 1442 06ae 0F93      		push r29
 1443 06b0 1F93      	/* prologue end (size=6) */
 1444 06b2 CF93      		mov r16,r24
 1445 06b4 DF93      		mov r17,r25
 1447 06b6 082F      	.LM124:
 1448 06b8 192F      		rcall HALGetExtROMByte
 1449               		mov r30,r24
 1450               		clr r31
 1451 06ba 00D0      		subi r30,lo8(-(ComProcData))
 1452 06bc E82F      		sbci r31,hi8(-(ComProcData))
 1453 06be FF27      		ld r15,Z
 1455 06c2 F040      	.LM125:
 1456 06c4 F080      		mov r25,r17
 1457               		mov r24,r16
 1458               		adiw r24,3
 1459 06c6 912F      		rcall HALGetExtROMByte
 1460 06c8 802F      		mov r30,r24
 1461 06ca 0396      		clr r31
 1462 06cc 00D0      		subi r30,lo8(-(ComProcData))
 1463 06ce E82F      		sbci r31,hi8(-(ComProcData))
 1464 06d0 FF27      		st Z,r15
 1466 06d4 F040      	.LM126:
 1467 06d6 F082      		mov r25,r17
 1468               		mov r24,r16
 1469               		adiw r24,1
 1470 06d8 912F      		rcall HALGetExtROMByte
 1471 06da 802F      		mov r30,r24
 1472 06dc 0196      		clr r31
 1473 06de 00D0      		subi r30,lo8(-(ComProcData))
 1474 06e0 E82F      		sbci r31,hi8(-(ComProcData))
 1475 06e2 FF27      		ld r24,Z
 1476 06e4 E050      		tst r24
 1477 06e6 F040      		brne .+2
 1478 06e8 8081      		rjmp .L131
 1480 06ec 01F4      	.LM127:
 1481 06ee 00C0      		ldi r18,lo8(8)
 1482               		cp r18,r15
 1483               		brsh .L133
 1485 06f2 2F15      	.LM128:
 1486 06f4 00F4      		ldi r24,lo8(2)
 1487               		sts ComProcData+65,r24
 1488               		ldi r24,lo8(0)
 1489 06f6 82E0      		ldi r25,hi8(0)
 1490 06f8 8093 0000 		rjmp .L135
 1491 06fc 80E0      	.L133:
 1493 0700 00C0      	.LM129:
 1494               		mov r24,r15
 1495               		clr r25
 1496               		ldi r22,lo8(7)
 1497 0702 8F2D      		ldi r23,hi8(7)
 1498 0704 9927      		rcall __mulhi3
 1499 0706 67E0      		mov r31,r25
 1500 0708 70E0      		mov r30,r24
 1501 070a 00D0      		subi r30,lo8(-(Buffers))
 1502 070c F92F      		sbci r31,hi8(-(Buffers))
 1503 070e E82F      		ldd r16,Z+5
 1504 0710 E050      		ldd r17,Z+6
 1506 0714 0581      	.LM130:
 1507 0716 1681      		ldd r24,Z+2
 1508               		mov r14,r16
 1509               		mov r15,r17
 1510 0718 8281      		ldi r20,lo8(1)
 1511 071a E02E      		ldi r21,hi8(1)
 1512 071c F12E      		clr r25
 1513 071e 41E0      		rjmp .L136
 1514 0720 50E0      	.L137:
 1516 0724 00C0      	.LM131:
 1517               		mov r29,r15
 1518               		mov r28,r14
 1519               		ldd r22,Y+2
 1520 0726 DF2D      		ldd r23,Y+3
 1521 0728 CE2D      		mov r31,r21
 1522 072a 6A81      		mov r30,r20
 1523 072c 7B81      		sbiw r30,1
 1524 072e F52F      		mov r27,r15
 1525 0730 E42F      		mov r26,r14
 1526 0732 3197      		rjmp .L138
 1527 0734 BF2D      	.L139:
 1529 0738 00C0      	.LM132:
 1530               		mov r29,r27
 1531               		mov r28,r26
 1532               		std Y+5,r19
 1533 073a DB2F      		std Y+4,r18
 1535 073e 3D83      	.LM133:
 1536 0740 2C83      		sbiw r30,1
 1537               	.L138:
 1538               		sbrc r31,7
 1539 0742 3197      		rjmp .L140
 1540               		ld r18,X+
 1541 0744 F7FD      		ld r19,X
 1542 0746 00C0      		sbiw r26,1
 1543 0748 2D91      		sbiw r26,2
 1544 074a 3C91      		cp r22,r18
 1545 074c 1197      		cpc r23,r19
 1546 074e 1297      		brlo .L139
 1547 0750 6217      	.L140:
 1549 0754 00F0      	.LM134:
 1550               		lsl r30
 1551               		rol r31
 1552               		add r30,r16
 1553 0756 EE0F      		adc r31,r17
 1554 0758 FF1F      		std Z+3,r23
 1555 075a E00F      		std Z+2,r22
 1557 075e 7383      	.LM135:
 1558 0760 6283      		subi r20,lo8(-(1))
 1559               		sbci r21,hi8(-(1))
 1560               		ldi r30,lo8(2)
 1561 0762 4F5F      		ldi r31,hi8(2)
 1562 0764 5F4F      		add r14,r30
 1563 0766 E2E0      		adc r15,r31
 1564 0768 F0E0      	.L136:
 1565 076a EE0E      		cp r20,r24
 1566 076c FF1E      		cpc r21,r25
 1567               		brlt .L137
 1568 076e 4817      	.L131:
 1569 0770 5907      		ldi r24,lo8(1)
 1570 0772 04F0      		ldi r25,hi8(1)
 1571               	.L135:
 1572 0774 81E0      	/* epilogue: frame size=0 */
 1573 0776 90E0      		pop r29
 1574               		pop r28
 1575               		pop r17
 1576 0778 DF91      		pop r16
 1577 077a CF91      		pop r15
 1578 077c 1F91      		pop r14
 1579 077e 0F91      		ret
 1580 0780 FF90      	/* epilogue end (size=7) */
 1581 0782 EF90      	/* function BlockSortBuf size 110 (97) */
 1591               	.Lscope14:
 1594               	.global	BlockLastError
 1596               	BlockLastError:
 1598               	.LM136:
 1599               	/* prologue: frame size=0 */
 1600               	/* prologue end (size=0) */
 1602               	.LM137:
 1603               		rcall HALGetExtROMByte
 1604               		ldi r30,lo8(ComProcData)
 1605               		ldi r31,hi8(ComProcData)
 1606 0786 00D0      		add r30,r24
 1607 0788 E0E0      		adc r31,__zero_reg__
 1608 078a F0E0      		lds r24,ComProcData+65
 1609 078c E80F      		st Z,r24
 1611 0790 8091 0000 	.LM138:
 1612 0794 8083      		ldi r24,lo8(1)
 1613               		ldi r25,hi8(1)
 1614               	/* epilogue: frame size=0 */
 1615 0796 81E0      		ret
 1616 0798 90E0      	/* epilogue end (size=1) */
 1617               	/* function BlockLastError size 11 (10) */
 1619               	.Lscope15:
 1622               	.global	BlockNot
 1624               	BlockNot:
 1626               	.LM139:
 1627               	/* prologue: frame size=0 */
 1628               		push r15
 1629               		push r16
 1630               		push r17
 1631 079c FF92      	/* prologue end (size=3) */
 1632 079e 0F93      		mov r16,r24
 1633 07a0 1F93      		mov r17,r25
 1635 07a2 082F      	.LM140:
 1636 07a4 192F      		adiw r24,1
 1637               		rcall HALGetExtROMByte
 1638               		mov r15,r24
 1639 07a6 0196      		mov r25,r17
 1640 07a8 00D0      		mov r24,r16
 1641 07aa F82E      		rcall HALGetExtROMByte
 1642 07ac 912F      		mov r26,r15
 1643 07ae 802F      		clr r27
 1644 07b0 00D0      		subi r26,lo8(-(ComProcData))
 1645 07b2 AF2D      		sbci r27,hi8(-(ComProcData))
 1646 07b4 BB27      		ldi r25,lo8(0)
 1647 07b6 A050      		mov r30,r24
 1648 07b8 B040      		clr r31
 1649 07ba 90E0      		subi r30,lo8(-(ComProcData))
 1650 07bc E82F      		sbci r31,hi8(-(ComProcData))
 1651 07be FF27      		ld r24,Z
 1652 07c0 E050      		tst r24
 1653 07c2 F040      		brne .L146
 1655 07c6 8823      	.LM141:
 1656 07c8 01F4      		ldi r25,lo8(1)
 1657               	.L146:
 1658               		st X,r25
 1660               	.LM142:
 1661 07cc 9C93      		ldi r24,lo8(1)
 1662               		ldi r25,hi8(1)
 1663               	/* epilogue: frame size=0 */
 1664 07ce 81E0      		pop r17
 1665 07d0 90E0      		pop r16
 1666               		pop r15
 1667 07d2 1F91      		ret
 1668 07d4 0F91      	/* epilogue end (size=4) */
 1669 07d6 FF90      	/* function BlockNot size 31 (24) */
 1671               	.Lscope16:
 1674               	.global	BlockBreak
 1676               	BlockBreak:
 1678               	.LM143:
 1679               	/* prologue: frame size=0 */
 1680               	/* prologue end (size=0) */
 1682               	.LM144:
 1683               		rcall HALGetExtROMByte
 1684               		mov r30,r24
 1685               		clr r31
 1686 07da 00D0      		subi r30,lo8(-(ComProcData))
 1687 07dc E82F      		sbci r31,hi8(-(ComProcData))
 1688 07de FF27      		ld r24,Z
 1689 07e0 E050      		tst r24
 1690 07e2 F040      		breq .L149
 1692 07e6 8823      	.LM145:
 1693 07e8 01F0      		ldi r24,lo8(2)
 1694               		ldi r25,hi8(2)
 1695               		ret
 1696 07ea 82E0      	.L149:
 1697 07ec 90E0      		ldi r24,lo8(1)
 1698 07ee 0895      		ldi r25,hi8(1)
 1700 07f0 81E0      	.LM146:
 1701 07f2 90E0      		ret
 1702               	/* epilogue: frame size=0 */
 1703               	/* epilogue: noreturn */
 1704 07f4 0895      	/* epilogue end (size=0) */
 1705               	/* function BlockBreak size 14 (14) */
 1707               	.Lscope17:
 1710               	.global	BlockCmpByte
 1712               	BlockCmpByte:
 1714               	.LM147:
 1715               	/* prologue: frame size=0 */
 1716               		push r16
 1717               		push r17
 1718               		push r28
 1719 07f6 0F93      		push r29
 1720 07f8 1F93      	/* prologue end (size=4) */
 1721 07fa CF93      		mov r29,r25
 1722 07fc DF93      		mov r28,r24
 1724 07fe D92F      	.LM148:
 1725 0800 C82F      		rcall HALGetExtROMByte
 1726               		mov r30,r24
 1727               		clr r31
 1728 0802 00D0      		subi r30,lo8(-(ComProcData))
 1729 0804 E82F      		sbci r31,hi8(-(ComProcData))
 1730 0806 FF27      		ld r17,Z
 1731 0808 E050      		mov r24,r28
 1732 080a F040      		mov r25,r29
 1733 080c 1081      		adiw r24,1
 1734 080e 8C2F      		rcall HALGetExtROMByte
 1735 0810 9D2F      		ldi r16,lo8(0)
 1736 0812 0196      		mov r30,r24
 1737 0814 00D0      		clr r31
 1738 0816 00E0      		subi r30,lo8(-(ComProcData))
 1739 0818 E82F      		sbci r31,hi8(-(ComProcData))
 1740 081a FF27      		ld r24,Z
 1741 081c E050      		cp r17,r24
 1742 081e F040      		brne .L154
 1744 0822 1817      	.LM149:
 1745 0824 01F4      		ldi r16,lo8(1)
 1746               	.L154:
 1748 0826 01E0      	.LM150:
 1749               		mov r24,r28
 1750               		mov r25,r29
 1751               		adiw r24,2
 1752 0828 8C2F      		rcall HALGetExtROMByte
 1753 082a 9D2F      		mov r30,r24
 1754 082c 0296      		clr r31
 1755 082e 00D0      		subi r30,lo8(-(ComProcData))
 1756 0830 E82F      		sbci r31,hi8(-(ComProcData))
 1757 0832 FF27      		st Z,r16
 1759 0836 F040      	.LM151:
 1760 0838 0083      		ldi r24,lo8(1)
 1761               		ldi r25,hi8(1)
 1762               	/* epilogue: frame size=0 */
 1763 083a 81E0      		pop r29
 1764 083c 90E0      		pop r28
 1765               		pop r17
 1766 083e DF91      		pop r16
 1767 0840 CF91      		ret
 1768 0842 1F91      	/* epilogue end (size=5) */
 1769 0844 0F91      	/* function BlockCmpByte size 41 (32) */
 1774               	.Lscope18:
 1777               	.global	BlockConst2
 1779               	BlockConst2:
 1781               	.LM152:
 1782               	/* prologue: frame size=0 */
 1783               	/* prologue end (size=0) */
 1785               	.LM153:
 1786               		rcall HALGetExtROMByte
 1787               		ldi r30,lo8(ComProcData)
 1788               		ldi r31,hi8(ComProcData)
 1789 0848 00D0      		add r30,r24
 1790 084a E0E0      		adc r31,__zero_reg__
 1791 084c F0E0      		ldi r24,lo8(2)
 1792 084e E80F      		st Z,r24
 1794 0852 82E0      	.LM154:
 1795 0854 8083      		ldi r24,lo8(1)
 1796               		ldi r25,hi8(1)
 1797               	/* epilogue: frame size=0 */
 1798 0856 81E0      		ret
 1799 0858 90E0      	/* epilogue end (size=1) */
 1800               	/* function BlockConst2 size 10 (9) */
 1802               	.Lscope19:
 1805               	.global	BlockConst1
 1807               	BlockConst1:
 1809               	.LM155:
 1810               	/* prologue: frame size=0 */
 1811               	/* prologue end (size=0) */
 1813               	.LM156:
 1814               		rcall HALGetExtROMByte
 1815               		ldi r30,lo8(ComProcData)
 1816               		ldi r31,hi8(ComProcData)
 1817 085c 00D0      		add r30,r24
 1818 085e E0E0      		adc r31,__zero_reg__
 1819 0860 F0E0      		ldi r24,lo8(1)
 1820 0862 E80F      		st Z,r24
 1822 0866 81E0      	.LM157:
 1823 0868 8083      		ldi r24,lo8(1)
 1824               		ldi r25,hi8(1)
 1825               	/* epilogue: frame size=0 */
 1826 086a 81E0      		ret
 1827 086c 90E0      	/* epilogue end (size=1) */
 1828               	/* function BlockConst1 size 10 (9) */
 1830               	.Lscope20:
 1833               	.global	BlockConst0
 1835               	BlockConst0:
 1837               	.LM158:
 1838               	/* prologue: frame size=0 */
 1839               	/* prologue end (size=0) */
 1841               	.LM159:
 1842               		rcall HALGetExtROMByte
 1843               		ldi r30,lo8(ComProcData)
 1844               		ldi r31,hi8(ComProcData)
 1845 0870 00D0      		add r30,r24
 1846 0872 E0E0      		adc r31,__zero_reg__
 1847 0874 F0E0      		st Z,__zero_reg__
 1849 0878 F11D      	.LM160:
 1850 087a 1082      		ldi r24,lo8(1)
 1851               		ldi r25,hi8(1)
 1852               	/* epilogue: frame size=0 */
 1853 087c 81E0      		ret
 1854 087e 90E0      	/* epilogue end (size=1) */
 1855               	/* function BlockConst0 size 9 (8) */
 1857               	.Lscope21:
 1860               	.global	BlockByteToHexStr
 1862               	BlockByteToHexStr:
 1864               	.LM161:
 1865               	/* prologue: frame size=0 */
 1866               		push r15
 1867               		push r16
 1868               		push r17
 1869 0882 FF92      	/* prologue end (size=3) */
 1870 0884 0F93      		mov r16,r24
 1871 0886 1F93      		mov r17,r25
 1873 0888 082F      	.LM162:
 1874 088a 192F      		adiw r24,1
 1875               		rcall HALGetExtROMByte
 1876               		mov r15,r24
 1878 088e 00D0      	.LM163:
 1879 0890 F82E      		mov r25,r17
 1880               		mov r24,r16
 1881               		rcall HALGetExtROMByte
 1882 0892 912F      		mov r30,r24
 1883 0894 802F      		clr r31
 1884 0896 00D0      		subi r30,lo8(-(ComProcData))
 1885 0898 E82F      		sbci r31,hi8(-(ComProcData))
 1886 089a FF27      		ld r24,Z
 1888 089e F040      	.LM164:
 1889 08a0 8081      		mov r18,r24
 1890               		swap r18
 1891               		andi r18,0x0f
 1893 08a4 2295      	.LM165:
 1894 08a6 2F70      		mov r25,r24
 1895               		andi r25,lo8(15)
 1897 08a8 982F      	.LM166:
 1898 08aa 9F70      		cpi r25,lo8(10)
 1899               		brsh .L163
 1901 08ac 9A30      	.LM167:
 1902 08ae 00F4      		subi r25,lo8(-(48))
 1903               		rjmp .L165
 1904               	.L163:
 1905 08b0 905D      		mov r24,r25
 1906 08b2 00C0      		subi r24,lo8(-(-10))
 1907               		cpi r24,lo8(6)
 1908 08b4 892F      		brlo .L166
 1909 08b6 8A50      		ldi r25,lo8(0)
 1910 08b8 8630      		rjmp .L165
 1911 08ba 00F0      	.L166:
 1912 08bc 90E0      		subi r25,lo8(-(55))
 1913 08be 00C0      	.L165:
 1915 08c0 995C      	.LM168:
 1916               		cpi r18,lo8(10)
 1917               		brsh .L168
 1918               		mov r24,r18
 1919 08c2 2A30      		subi r24,lo8(-(48))
 1920 08c4 00F4      		rjmp .L170
 1921 08c6 822F      	.L168:
 1922 08c8 805D      		mov r24,r18
 1923 08ca 00C0      		subi r24,lo8(-(-10))
 1924               		cpi r24,lo8(6)
 1925 08cc 822F      		brlo .L171
 1926 08ce 8A50      		ldi r24,lo8(0)
 1927 08d0 8630      		rjmp .L170
 1928 08d2 00F0      	.L171:
 1929 08d4 80E0      		mov r24,r18
 1930 08d6 00C0      		subi r24,lo8(-(55))
 1931               	.L170:
 1933 08da 895C      	.LM169:
 1934               		mov r30,r15
 1935               		clr r31
 1936               		subi r30,lo8(-(ComProcData))
 1937 08dc EF2D      		sbci r31,hi8(-(ComProcData))
 1938 08de FF27      		st Z,r24
 1940 08e2 F040      	.LM170:
 1941 08e4 8083      		std Z+1,r25
 1943               	.LM171:
 1944 08e6 9183      		ldi r24,lo8(1)
 1945               		ldi r25,hi8(1)
 1946               	/* epilogue: frame size=0 */
 1947 08e8 81E0      		pop r17
 1948 08ea 90E0      		pop r16
 1949               		pop r15
 1950 08ec 1F91      		ret
 1951 08ee 0F91      	/* epilogue end (size=4) */
 1952 08f0 FF90      	/* function BlockByteToHexStr size 57 (50) */
 1959               	.Lscope22:
 1962               	.global	BlockHexStrToByte
 1964               	BlockHexStrToByte:
 1966               	.LM172:
 1967               	/* prologue: frame size=0 */
 1968               		push r16
 1969               		push r17
 1970               		push r28
 1971 08f4 0F93      		push r29
 1972 08f6 1F93      	/* prologue end (size=4) */
 1973 08f8 CF93      		mov r29,r25
 1974 08fa DF93      		mov r28,r24
 1976 08fc D92F      	.LM173:
 1977 08fe C82F      		rcall HALGetExtROMByte
 1979               	.LM174:
 1980 0900 00D0      		mov r30,r24
 1981               		clr r31
 1982               		subi r30,lo8(-(ComProcData))
 1983 0902 E82F      		sbci r31,hi8(-(ComProcData))
 1984 0904 FF27      		ldd r25,Z+1
 1986 0908 F040      	.LM175:
 1987 090a 9181      		mov r16,r25
 1988               		subi r16,lo8(-(-48))
 1989               		cpi r16,lo8(10)
 1990 090c 092F      		brlo .L175
 1992 0910 0A30      	.LM176:
 1993 0912 00F0      		mov r24,r25
 1994               		subi r24,lo8(-(-65))
 1995               		cpi r24,lo8(6)
 1996 0914 892F      		brsh .L177
 1997 0916 8154      		subi r16,lo8(-(-7))
 1998 0918 8630      	.L175:
 2000 091c 0750      	.LM177:
 2001               		ld r25,Z
 2003               	.LM178:
 2004 091e 9081      		mov r17,r25
 2005               		subi r17,lo8(-(-48))
 2006               		cpi r17,lo8(10)
 2007 0920 192F      		brlo .L179
 2008 0922 1053      		mov r24,r25
 2009 0924 1A30      		subi r24,lo8(-(-65))
 2010 0926 00F0      		cpi r24,lo8(6)
 2011 0928 892F      		brsh .L177
 2012 092a 8154      		subi r17,lo8(-(-7))
 2013 092c 8630      	.L179:
 2015 0930 1750      	.LM179:
 2016               		mov r24,r28
 2017               		mov r25,r29
 2018               		adiw r24,1
 2019 0932 8C2F      		rcall HALGetExtROMByte
 2020 0934 9D2F      		mov r30,r24
 2021 0936 0196      		clr r31
 2022 0938 00D0      		subi r30,lo8(-(ComProcData))
 2023 093a E82F      		sbci r31,hi8(-(ComProcData))
 2024 093c FF27      		swap r17
 2025 093e E050      		andi r17,0xf0
 2026 0940 F040      		or r17,r16
 2027 0942 1295      		st Z,r17
 2028 0944 107F      		ldi r24,lo8(1)
 2029 0946 102B      		ldi r25,hi8(1)
 2030 0948 1083      		rjmp .L182
 2031 094a 81E0      	.L177:
 2033 094e 00C0      	.LM180:
 2034               		ldi r24,lo8(1)
 2035               		sts ComProcData+65,r24
 2036               		ldi r24,lo8(0)
 2037 0950 81E0      		ldi r25,hi8(0)
 2038 0952 8093 0000 	.L182:
 2039 0956 80E0      	/* epilogue: frame size=0 */
 2040 0958 90E0      		pop r29
 2041               		pop r28
 2042               		pop r17
 2043 095a DF91      		pop r16
 2044 095c CF91      		ret
 2045 095e 1F91      	/* epilogue end (size=5) */
 2046 0960 0F91      	/* function BlockHexStrToByte size 56 (47) */
 2052               	.Lscope23:
 2055               	.global	BlockMinus
 2057               	BlockMinus:
 2059               	.LM181:
 2060               	/* prologue: frame size=0 */
 2061               		push r12
 2062               		push r13
 2063               		push r14
 2064 0964 CF92      		push r15
 2065 0966 DF92      		push r16
 2066 0968 EF92      		push r17
 2067 096a FF92      	/* prologue end (size=6) */
 2068 096c 0F93      		mov r14,r24
 2069 096e 1F93      		mov r15,r25
 2071 0970 E82E      	.LM182:
 2072 0972 F92E      		adiw r24,2
 2073               		rcall HALGetExtROMByte
 2074               		mov r12,r24
 2075 0974 0296      		mov r25,r15
 2076 0976 00D0      		mov r24,r14
 2077 0978 C82E      		rcall HALGetExtROMByte
 2078 097a 9F2D      		ldi r16,lo8(ComProcData)
 2079 097c 8E2D      		ldi r17,hi8(ComProcData)
 2080 097e 00D0      		mov r31,r17
 2081 0980 00E0      		mov r30,r16
 2082 0982 10E0      		add r30,r24
 2083 0984 F12F      		adc r31,__zero_reg__
 2084 0986 E02F      		ld r13,Z
 2085 0988 E80F      		mov r25,r15
 2086 098a F11D      		mov r24,r14
 2087 098c D080      		adiw r24,1
 2088 098e 9F2D      		rcall HALGetExtROMByte
 2089 0990 8E2D      		mov r31,r17
 2090 0992 0196      		mov r30,r16
 2091 0994 00D0      		add r30,r12
 2092 0996 F12F      		adc r31,__zero_reg__
 2093 0998 E02F      		add r16,r24
 2094 099a EC0D      		adc r17,__zero_reg__
 2095 099c F11D      		mov r27,r17
 2096 099e 080F      		mov r26,r16
 2097 09a0 111D      		ld r24,X
 2098 09a2 B12F      		sub r13,r24
 2099 09a4 A02F      		st Z,r13
 2101 09a8 D81A      	.LM183:
 2102 09aa D082      		ldi r24,lo8(1)
 2103               		ldi r25,hi8(1)
 2104               	/* epilogue: frame size=0 */
 2105 09ac 81E0      		pop r17
 2106 09ae 90E0      		pop r16
 2107               		pop r15
 2108 09b0 1F91      		pop r14
 2109 09b2 0F91      		pop r13
 2110 09b4 FF90      		pop r12
 2111 09b6 EF90      		ret
 2112 09b8 DF90      	/* epilogue end (size=7) */
 2113 09ba CF90      	/* function BlockMinus size 45 (32) */
 2115               	.Lscope24:
 2118               	.global	BlockPlus
 2120               	BlockPlus:
 2122               	.LM184:
 2123               	/* prologue: frame size=0 */
 2124               		push r12
 2125               		push r13
 2126               		push r14
 2127 09be CF92      		push r15
 2128 09c0 DF92      		push r16
 2129 09c2 EF92      		push r17
 2130 09c4 FF92      	/* prologue end (size=6) */
 2131 09c6 0F93      		mov r14,r24
 2132 09c8 1F93      		mov r15,r25
 2134 09ca E82E      	.LM185:
 2135 09cc F92E      		adiw r24,2
 2136               		rcall HALGetExtROMByte
 2137               		mov r12,r24
 2138 09ce 0296      		mov r25,r15
 2139 09d0 00D0      		mov r24,r14
 2140 09d2 C82E      		rcall HALGetExtROMByte
 2141 09d4 9F2D      		ldi r16,lo8(ComProcData)
 2142 09d6 8E2D      		ldi r17,hi8(ComProcData)
 2143 09d8 00D0      		mov r31,r17
 2144 09da 00E0      		mov r30,r16
 2145 09dc 10E0      		add r30,r24
 2146 09de F12F      		adc r31,__zero_reg__
 2147 09e0 E02F      		ld r13,Z
 2148 09e2 E80F      		mov r25,r15
 2149 09e4 F11D      		mov r24,r14
 2150 09e6 D080      		adiw r24,1
 2151 09e8 9F2D      		rcall HALGetExtROMByte
 2152 09ea 8E2D      		mov r31,r17
 2153 09ec 0196      		mov r30,r16
 2154 09ee 00D0      		add r30,r12
 2155 09f0 F12F      		adc r31,__zero_reg__
 2156 09f2 E02F      		add r16,r24
 2157 09f4 EC0D      		adc r17,__zero_reg__
 2158 09f6 F11D      		mov r27,r17
 2159 09f8 080F      		mov r26,r16
 2160 09fa 111D      		ld r24,X
 2161 09fc B12F      		add r13,r24
 2162 09fe A02F      		st Z,r13
 2164 0a02 D80E      	.LM186:
 2165 0a04 D082      		ldi r24,lo8(1)
 2166               		ldi r25,hi8(1)
 2167               	/* epilogue: frame size=0 */
 2168 0a06 81E0      		pop r17
 2169 0a08 90E0      		pop r16
 2170               		pop r15
 2171 0a0a 1F91      		pop r14
 2172 0a0c 0F91      		pop r13
 2173 0a0e FF90      		pop r12
 2174 0a10 EF90      		ret
 2175 0a12 DF90      	/* epilogue end (size=7) */
 2176 0a14 CF90      	/* function BlockPlus size 45 (32) */
 2178               	.Lscope25:
 2181               	.global	Block0
 2183               	Block0:
 2185               	.LM187:
 2186               	/* prologue: frame size=0 */
 2187               		push r14
 2188               		push r15
 2189               		push r16
 2190 0a18 EF92      		push r17
 2191 0a1a FF92      		push r28
 2192 0a1c 0F93      		push r29
 2193 0a1e 1F93      	/* prologue end (size=6) */
 2194 0a20 CF93      		mov r16,r24
 2195 0a22 DF93      		mov r17,r25
 2197 0a24 082F      	.LM188:
 2198 0a26 192F      		rcall HALGetExtROMByte
 2199               		mov r14,r24
 2201 0a28 00D0      	.LM189:
 2202 0a2a E82E      		mov r29,r17
 2203               		mov r28,r16
 2204               		adiw r28,1
 2205 0a2c D12F      		clr r15
 2206 0a2e C02F      		rjmp .L189
 2207 0a30 2196      	.L190:
 2209 0a34 00C0      	.LM190:
 2210               		mov r24,r28
 2211               		mov r25,r29
 2212               		rcall HALGetExtROMByte
 2213 0a36 8C2F      		mov r16,r24
 2215 0a3a 00D0      	.LM191:
 2216 0a3c 082F      		mov r24,r28
 2217               		mov r25,r29
 2218               		adiw r24,1
 2219 0a3e 8C2F      		rcall HALGetExtROMByte
 2220 0a40 9D2F      		mov r17,r24
 2222 0a44 00D0      	.LM192:
 2223 0a46 182F      		mov r24,r28
 2224               		mov r25,r29
 2225               		adiw r24,2
 2226 0a48 8C2F      		rcall HALGetExtROMByte
 2227 0a4a 9D2F      		mov r22,r24
 2228 0a4c 0296      		ldi r25,lo8(0)
 2229 0a4e 00D0      		mov r20,r17
 2230 0a50 682F      		clr r21
 2231 0a52 90E0      		subi r20,lo8(-(ComProcData))
 2232 0a54 412F      		sbci r21,hi8(-(ComProcData))
 2233 0a56 5527      		lds r18,Buffers+61
 2234 0a58 4050      		lds r19,(Buffers+61)+1
 2235 0a5a 5040      		add r18,r16
 2236 0a5c 2091 0000 		adc r19,__zero_reg__
 2237 0a60 3091 0000 		rjmp .L191
 2238 0a64 200F      	.L192:
 2240 0a68 00C0      	.LM193:
 2241               		mov r30,r25
 2242               		clr r31
 2243               		mov r27,r21
 2244 0a6a E92F      		mov r26,r20
 2245 0a6c FF27      		add r26,r30
 2246 0a6e B52F      		adc r27,r31
 2247 0a70 A42F      		add r30,r18
 2248 0a72 AE0F      		adc r31,r19
 2249 0a74 BF1F      		ld r24,Z
 2250 0a76 E20F      		st X,r24
 2252 0a7a 8081      	.LM194:
 2253 0a7c 8C93      		subi r25,lo8(-(1))
 2254               	.L191:
 2255               		cp r25,r22
 2256 0a7e 9F5F      		brne .L192
 2258 0a80 9617      	.LM195:
 2259 0a82 01F4      		adiw r28,3
 2261               	.LM196:
 2262 0a84 2396      		inc r15
 2263               	.L189:
 2264               		cp r15,r14
 2265 0a86 F394      		brne .L190
 2267 0a88 FE14      	.LM197:
 2268 0a8a 01F4      		ldi r24,lo8(1)
 2269               		ldi r25,hi8(1)
 2270               	/* epilogue: frame size=0 */
 2271 0a8c 81E0      		pop r29
 2272 0a8e 90E0      		pop r28
 2273               		pop r17
 2274 0a90 DF91      		pop r16
 2275 0a92 CF91      		pop r15
 2276 0a94 1F91      		pop r14
 2277 0a96 0F91      		ret
 2278 0a98 FF90      	/* epilogue end (size=7) */
 2279 0a9a EF90      	/* function Block0 size 67 (54) */
 2290               	.Lscope26:
 2293               	.global	BlockApprox
 2295               	BlockApprox:
 2297               	.LM198:
 2298               	/* prologue: frame size=0 */
 2299               		push r8
 2300               		push r9
 2301               		push r10
 2302 0a9e 8F92      		push r11
 2303 0aa0 9F92      		push r12
 2304 0aa2 AF92      		push r13
 2305 0aa4 BF92      		push r14
 2306 0aa6 CF92      		push r15
 2307 0aa8 DF92      		push r16
 2308 0aaa EF92      		push r17
 2309 0aac FF92      		push r28
 2310 0aae 0F93      		push r29
 2311 0ab0 1F93      	/* prologue end (size=12) */
 2312 0ab2 CF93      		mov r8,r24
 2313 0ab4 DF93      		mov r9,r25
 2315 0ab6 882E      	.LM199:
 2316 0ab8 992E      		rcall HALGetExtROMByte
 2317               		mov r30,r24
 2318               		clr r31
 2319 0aba 00D0      		subi r30,lo8(-(ComProcData))
 2320 0abc E82F      		sbci r31,hi8(-(ComProcData))
 2321 0abe FF27      		ld r24,Z
 2322 0ac0 E050      		mov r29,r9
 2323 0ac2 F040      		mov r28,r8
 2324 0ac4 8081      		adiw r28,2
 2325 0ac6 D92D      		tst r24
 2326 0ac8 C82D      		brne .L197
 2328 0acc 8823      	.LM200:
 2329 0ace 01F4      		mov r17,r9
 2330               		mov r16,r8
 2331               		subi r16,lo8(-(3))
 2332 0ad0 192D      		sbci r17,hi8(-(3))
 2333 0ad2 082D      		mov r25,r17
 2334 0ad4 0D5F      		mov r24,r16
 2335 0ad6 1F4F      		rcall HALGetExtROMByte
 2336 0ad8 912F      		mov r15,r24
 2337 0ada 802F      		mov r24,r28
 2338 0adc 00D0      		mov r25,r29
 2339 0ade F82E      		rcall HALGetExtROMByte
 2340 0ae0 8C2F      		mov r26,r15
 2341 0ae2 9D2F      		clr r27
 2342 0ae4 00D0      		subi r26,lo8(-(ComProcData))
 2343 0ae6 AF2D      		sbci r27,hi8(-(ComProcData))
 2344 0ae8 BB27      		mov r30,r24
 2345 0aea A050      		clr r31
 2346 0aec B040      		subi r30,lo8(-(ComProcData))
 2347 0aee E82F      		sbci r31,hi8(-(ComProcData))
 2348 0af0 FF27      		ld r24,Z
 2349 0af2 E050      		st X,r24
 2351 0af6 8081      	.LM201:
 2352 0af8 8C93      		mov r25,r17
 2353               		mov r24,r16
 2354               		rcall HALGetExtROMByte
 2355 0afa 912F      		mov r16,r24
 2356 0afc 802F      		mov r24,r28
 2357 0afe 00D0      		mov r25,r29
 2358 0b00 082F      		rcall HALGetExtROMByte
 2359 0b02 8C2F      		mov r26,r16
 2360 0b04 9D2F      		clr r27
 2361 0b06 00D0      		subi r26,lo8(-(ComProcData))
 2362 0b08 A02F      		sbci r27,hi8(-(ComProcData))
 2363 0b0a BB27      		mov r30,r24
 2364 0b0c A050      		clr r31
 2365 0b0e B040      		subi r30,lo8(-(ComProcData))
 2366 0b10 E82F      		sbci r31,hi8(-(ComProcData))
 2367 0b12 FF27      		ldd r24,Z+1
 2368 0b14 E050      		mov r31,r27
 2369 0b16 F040      		mov r30,r26
 2370 0b18 8181      		rjmp .L203
 2371 0b1a FB2F      	.L197:
 2373 0b1e 00C0      	.LM202:
 2374               		mov r25,r9
 2375               		mov r24,r8
 2376               		adiw r24,1
 2377 0b20 992D      		rcall HALGetExtROMByte
 2378 0b22 882D      		mov r30,r24
 2379 0b24 0196      		clr r31
 2380 0b26 00D0      		subi r30,lo8(-(ComProcData))
 2381 0b28 E82F      		sbci r31,hi8(-(ComProcData))
 2382 0b2a FF27      		ld r15,Z
 2384 0b2e F040      	.LM203:
 2385 0b30 F080      		mov r24,r28
 2386               		mov r25,r29
 2387               		rcall HALGetExtROMByte
 2388 0b32 8C2F      		mov r30,r24
 2389 0b34 9D2F      		clr r31
 2390 0b36 00D0      		subi r30,lo8(-(ComProcData))
 2391 0b38 E82F      		sbci r31,hi8(-(ComProcData))
 2392 0b3a FF27      		ldd r24,Z+1
 2393 0b3c E050      		clr r25
 2394 0b3e F040      		mov r11,r24
 2395 0b40 8181      		clr r10
 2396 0b42 9927      		mov r24,r28
 2397 0b44 B82E      		mov r25,r29
 2398 0b46 AA24      		rcall HALGetExtROMByte
 2399 0b48 8C2F      		mov r30,r24
 2400 0b4a 9D2F      		clr r31
 2401 0b4c 00D0      		subi r30,lo8(-(ComProcData))
 2402 0b4e E82F      		sbci r31,hi8(-(ComProcData))
 2403 0b50 FF27      		ld r24,Z
 2404 0b52 E050      		clr r25
 2405 0b54 F040      		or r10,r24
 2406 0b56 8081      		or r11,r25
 2408 0b5a A82A      	.LM204:
 2409 0b5c B92A      		mov r17,r11
 2410               		mov r16,r10
 2411               		lsl r16
 2412 0b5e 1B2D      		mov r16,r17
 2413 0b60 0A2D      		rol r16
 2414 0b62 000F      		sbc r17,r17
 2415 0b64 012F      		neg r17
 2417 0b68 110B      	.LM205:
 2418 0b6a 1195      		mov r12,r16
 2419               		clr r13
 2420               		mov r24,r15
 2421 0b6c C02E      		clr r25
 2422 0b6e DD24      		ldi r22,lo8(9)
 2423 0b70 8F2D      		ldi r23,hi8(9)
 2424 0b72 9927      		rcall __mulhi3
 2425 0b74 69E0      		mov r29,r25
 2426 0b76 70E0      		mov r28,r24
 2427 0b78 00D0      		add r28,r12
 2428 0b7a D92F      		adc r29,r13
 2429 0b7c C82F      		lsl r28
 2430 0b7e CC0D      		rol r29
 2431 0b80 DD1D      		mov r24,r28
 2432 0b82 CC0F      		mov r25,r29
 2433 0b84 DD1F      		adiw r24,30
 2434 0b86 8C2F      		rcall HALGetEEPROMWord
 2435 0b88 9D2F      		mov r14,r24
 2436 0b8a 4E96      		mov r15,r25
 2438 0b8e E82E      	.LM206:
 2439 0b90 F92E      		cpi r16,lo8(8)
 2440               		brsh .L200
 2442 0b92 0830      	.LM207:
 2443 0b94 00F4      		mov r24,r28
 2444               		mov r25,r29
 2445               		adiw r24,32
 2446 0b96 8C2F      		rcall HALGetEEPROMWord
 2448 0b9a 8096      	.LM208:
 2449 0b9c 00D0      		sub r24,r14
 2450               		sbc r25,r15
 2451               		lsr r13
 2452 0b9e 8E19      		mov r13,r12
 2453 0ba0 9F09      		clr r12
 2454 0ba2 D694      		ror r13
 2455 0ba4 DC2C      		ror r12
 2456 0ba6 CC24      		sub r10,r12
 2457 0ba8 D794      		sbc r11,r13
 2458 0baa C794      		lsl r24
 2459 0bac AC18      		mov r24,r25
 2460 0bae BD08      		rol r24
 2461 0bb0 880F      		sbc r25,r25
 2462 0bb2 892F      		neg r25
 2463 0bb4 881F      		mov r23,r11
 2464 0bb6 990B      		mov r22,r10
 2465 0bb8 9195      		rcall __mulhi3
 2466 0bba 7B2D      		add r14,r24
 2467 0bbc 6A2D      		adc r15,r25
 2468 0bbe 00D0      	.L200:
 2470 0bc2 F91E      	.LM209:
 2471               		mov r17,r9
 2472               		mov r16,r8
 2473               		subi r16,lo8(-(3))
 2474 0bc4 192D      		sbci r17,hi8(-(3))
 2475 0bc6 082D      		mov r25,r17
 2476 0bc8 0D5F      		mov r24,r16
 2477 0bca 1F4F      		rcall HALGetExtROMByte
 2478 0bcc 912F      		mov r30,r24
 2479 0bce 802F      		clr r31
 2480 0bd0 00D0      		subi r30,lo8(-(ComProcData))
 2481 0bd2 E82F      		sbci r31,hi8(-(ComProcData))
 2482 0bd4 FF27      		st Z,r14
 2483 0bd6 E050      		mov r25,r17
 2484 0bd8 F040      		mov r24,r16
 2485 0bda E082      		rcall HALGetExtROMByte
 2486 0bdc 912F      		mov r30,r24
 2487 0bde 802F      		clr r31
 2488 0be0 00D0      		subi r30,lo8(-(ComProcData))
 2489 0be2 E82F      		sbci r31,hi8(-(ComProcData))
 2490 0be4 FF27      		mov r24,r15
 2491 0be6 E050      		clr r25
 2492 0be8 F040      	.L203:
 2493 0bea 8F2D      		std Z+1,r24
 2495               	.LM210:
 2496 0bee 8183      		ldi r24,lo8(1)
 2497               		ldi r25,hi8(1)
 2498               	/* epilogue: frame size=0 */
 2499 0bf0 81E0      		pop r29
 2500 0bf2 90E0      		pop r28
 2501               		pop r17
 2502 0bf4 DF91      		pop r16
 2503 0bf6 CF91      		pop r15
 2504 0bf8 1F91      		pop r14
 2505 0bfa 0F91      		pop r13
 2506 0bfc FF90      		pop r12
 2507 0bfe EF90      		pop r11
 2508 0c00 DF90      		pop r10
 2509 0c02 CF90      		pop r9
 2510 0c04 BF90      		pop r8
 2511 0c06 AF90      		ret
 2512 0c08 9F90      	/* epilogue end (size=13) */
 2513 0c0a 8F90      	/* function BlockApprox size 184 (159) */
 2520               	.Lscope27:
 2523               	.global	BlockADCChannelConfig
 2525               	BlockADCChannelConfig:
 2527               	.LM211:
 2528               	/* prologue: frame size=0 */
 2529               		push r11
 2530               		push r12
 2531               		push r13
 2532 0c0e BF92      		push r14
 2533 0c10 CF92      		push r15
 2534 0c12 DF92      		push r16
 2535 0c14 EF92      		push r17
 2536 0c16 FF92      		push r28
 2537 0c18 0F93      		push r29
 2538 0c1a 1F93      	/* prologue end (size=9) */
 2539 0c1c CF93      		mov r29,r25
 2540 0c1e DF93      		mov r28,r24
 2542 0c20 D92F      	.LM212:
 2543 0c22 C82F      		adiw r24,1
 2544               		rcall HALGetExtROMByte
 2545               		mov r30,r24
 2546 0c24 0196      		clr r31
 2547 0c26 00D0      		subi r30,lo8(-(ComProcData))
 2548 0c28 E82F      		sbci r31,hi8(-(ComProcData))
 2549 0c2a FF27      		ld r11,Z
 2551 0c2e F040      	.LM213:
 2552 0c30 B080      		mov r24,r28
 2553               		mov r25,r29
 2554               		adiw r24,2
 2555 0c32 8C2F      		rcall HALGetExtROMByte
 2556 0c34 9D2F      		mov r30,r24
 2557 0c36 0296      		clr r31
 2558 0c38 00D0      		subi r30,lo8(-(ComProcData))
 2559 0c3a E82F      		sbci r31,hi8(-(ComProcData))
 2560 0c3c FF27      		ld r16,Z
 2562 0c40 F040      	.LM214:
 2563 0c42 0081      		mov r24,r28
 2564               		mov r25,r29
 2565               		rcall HALGetExtROMByte
 2566 0c44 8C2F      		mov r30,r24
 2567 0c46 9D2F      		clr r31
 2568 0c48 00D0      		subi r30,lo8(-(ComProcData))
 2569 0c4a E82F      		sbci r31,hi8(-(ComProcData))
 2570 0c4c FF27      		ld r24,Z
 2571 0c4e E050      		tst r24
 2572 0c50 F040      		brne .+2
 2573 0c52 8081      		rjmp .L205
 2575 0c56 01F4      	.LM215:
 2576 0c58 00C0      		mov r12,r16
 2577               		clr r13
 2578               		sbrs r12,0
 2579 0c5a C02E      		rjmp .L207
 2581 0c5e C0FE      	.LM216:
 2582 0c60 00C0      		mov r24,r28
 2583               		mov r25,r29
 2584               		adiw r24,3
 2585 0c62 8C2F      		rcall HALGetExtROMByte
 2587 0c66 0396      	.LM217:
 2588 0c68 00D0      		mov r30,r24
 2589               		clr r31
 2590               		subi r30,lo8(-(ComProcData))
 2591 0c6a E82F      		sbci r31,hi8(-(ComProcData))
 2592 0c6c FF27      		ldd r18,Z+1
 2593 0c6e E050      		clr r19
 2594 0c70 F040      		mov r19,r18
 2595 0c72 2181      		clr r18
 2597 0c76 322F      	.LM218:
 2598 0c78 2227      		ld r24,Z
 2599               		clr r25
 2600               		or r18,r24
 2601 0c7a 8081      		or r19,r25
 2602 0c7c 9927      		mov r24,r11
 2603 0c7e 282B      		clr r25
 2604 0c80 392B      		ldi r22,lo8(7)
 2605 0c82 8B2D      		ldi r23,hi8(7)
 2606 0c84 9927      		rcall __mulhi3
 2607 0c86 67E0      		mov r23,r19
 2608 0c88 70E0      		mov r22,r18
 2609 0c8a 00D0      		adiw r24,4
 2610 0c8c 732F      		rcall HALSetEEPROMWord
 2611 0c8e 622F      	.L207:
 2613 0c92 00D0      	.LM219:
 2614               		sbrs r12,1
 2615               		rjmp .L209
 2617 0c94 C1FE      	.LM220:
 2618 0c96 00C0      		mov r24,r28
 2619               		mov r25,r29
 2620               		adiw r24,4
 2621 0c98 8C2F      		rcall HALGetExtROMByte
 2623 0c9c 0496      	.LM221:
 2624 0c9e 00D0      		mov r30,r24
 2625               		clr r31
 2626               		subi r30,lo8(-(ComProcData))
 2627 0ca0 E82F      		sbci r31,hi8(-(ComProcData))
 2628 0ca2 FF27      		ldd r18,Z+1
 2629 0ca4 E050      		clr r19
 2630 0ca6 F040      		mov r19,r18
 2631 0ca8 2181      		clr r18
 2633 0cac 322F      	.LM222:
 2634 0cae 2227      		ld r24,Z
 2635               		clr r25
 2636               		or r18,r24
 2637 0cb0 8081      		or r19,r25
 2638 0cb2 9927      		mov r24,r11
 2639 0cb4 282B      		clr r25
 2640 0cb6 392B      		ldi r22,lo8(7)
 2641 0cb8 8B2D      		ldi r23,hi8(7)
 2642 0cba 9927      		rcall __mulhi3
 2643 0cbc 67E0      		mov r23,r19
 2644 0cbe 70E0      		mov r22,r18
 2645 0cc0 00D0      		adiw r24,2
 2646 0cc2 732F      		rcall HALSetEEPROMWord
 2647 0cc4 622F      	.L209:
 2649 0cc8 00D0      	.LM223:
 2650               		sbrs r12,2
 2651               		rjmp .L211
 2653 0cca C2FE      	.LM224:
 2654 0ccc 00C0      		mov r24,r28
 2655               		mov r25,r29
 2656               		adiw r24,5
 2657 0cce 8C2F      		rcall HALGetExtROMByte
 2658 0cd0 9D2F      		mov r30,r24
 2659 0cd2 0596      		mov r24,r11
 2660 0cd4 00D0      		clr r25
 2661 0cd6 E82F      		ldi r22,lo8(7)
 2662 0cd8 8B2D      		ldi r23,hi8(7)
 2663 0cda 9927      		rcall __mulhi3
 2664 0cdc 67E0      		mov r16,r24
 2665 0cde 70E0      		mov r17,r25
 2666 0ce0 00D0      		ldi r21,lo8(6)
 2667 0ce2 082F      		mov r14,r21
 2668 0ce4 192F      		mov r15,__zero_reg__
 2669 0ce6 56E0      		add r14,r24
 2670 0ce8 E52E      		adc r15,r25
 2671 0cea F12C      		clr r31
 2672 0cec E80E      		subi r30,lo8(-(ComProcData))
 2673 0cee F91E      		sbci r31,hi8(-(ComProcData))
 2674 0cf0 FF27      		ld r22,Z
 2675 0cf2 E050      		mov r25,r15
 2676 0cf4 F040      		mov r24,r14
 2677 0cf6 6081      		rcall HALSetEEPROMByte
 2679 0cfa 8E2D      	.LM225:
 2680 0cfc 00D0      		mov r25,r15
 2681               		mov r24,r14
 2682               		rcall HALGetEEPROMByte
 2683 0cfe 9F2D      		subi r16,lo8(-(Buffers))
 2684 0d00 8E2D      		sbci r17,hi8(-(Buffers))
 2685 0d02 00D0      		mov r31,r17
 2686 0d04 0050      		mov r30,r16
 2687 0d06 1040      		std Z+2,r24
 2688 0d08 F12F      	.L211:
 2690 0d0c 8283      	.LM226:
 2691               		sbrs r12,3
 2692               		rjmp .L213
 2694 0d0e C3FE      	.LM227:
 2695 0d10 00C0      		mov r24,r28
 2696               		mov r25,r29
 2697               		adiw r24,6
 2698 0d12 8C2F      		rcall HALGetExtROMByte
 2699 0d14 9D2F      		mov r30,r24
 2700 0d16 0696      		clr r31
 2701 0d18 00D0      		subi r30,lo8(-(ComProcData))
 2702 0d1a E82F      		sbci r31,hi8(-(ComProcData))
 2703 0d1c FF27      		mov r24,r11
 2704 0d1e E050      		clr r25
 2705 0d20 F040      		ldi r22,lo8(7)
 2706 0d22 8B2D      		ldi r23,hi8(7)
 2707 0d24 9927      		rcall __mulhi3
 2708 0d26 67E0      		ld r22,Z
 2709 0d28 70E0      		adiw r24,7
 2710 0d2a 00D0      		rcall HALSetEEPROMByte
 2711 0d2c 6081      	.L213:
 2713 0d30 00D0      	.LM228:
 2714               		sbrs r12,4
 2715               		rjmp .L215
 2717 0d32 C4FE      	.LM229:
 2718 0d34 00C0      		mov r24,r28
 2719               		mov r25,r29
 2720               		adiw r24,7
 2721 0d36 8C2F      		rcall HALGetExtROMByte
 2722 0d38 9D2F      		mov r30,r24
 2723 0d3a 0796      		clr r31
 2724 0d3c 00D0      		subi r30,lo8(-(ComProcData))
 2725 0d3e E82F      		sbci r31,hi8(-(ComProcData))
 2726 0d40 FF27      		mov r24,r11
 2727 0d42 E050      		clr r25
 2728 0d44 F040      		ldi r22,lo8(7)
 2729 0d46 8B2D      		ldi r23,hi8(7)
 2730 0d48 9927      		rcall __mulhi3
 2731 0d4a 67E0      		ld r22,Z
 2732 0d4c 70E0      		adiw r24,8
 2733 0d4e 00D0      		rcall HALSetEEPROMByte
 2734 0d50 6081      		rjmp .L215
 2735 0d52 0896      	.L205:
 2737 0d56 00C0      	.LM230:
 2738               		mov r24,r28
 2739               		mov r25,r29
 2740               		adiw r24,9
 2741 0d58 8C2F      		rcall HALGetExtROMByte
 2742 0d5a 9D2F      		mov r14,r24
 2744 0d5e 00D0      	.LM231:
 2745 0d60 E82E      		mov r24,r11
 2746               		clr r25
 2747               		ldi r22,lo8(7)
 2748 0d62 8B2D      		ldi r23,hi8(7)
 2749 0d64 9927      		rcall __mulhi3
 2750 0d66 67E0      		mov r16,r24
 2751 0d68 70E0      		mov r17,r25
 2752 0d6a 00D0      		adiw r24,4
 2753 0d6c 082F      		rcall HALGetEEPROMWord
 2755 0d70 0496      	.LM232:
 2756 0d72 00D0      		mov r30,r14
 2757               		clr r31
 2758               		subi r30,lo8(-(ComProcData))
 2759 0d74 EE2D      		sbci r31,hi8(-(ComProcData))
 2760 0d76 FF27      		st Z,r24
 2761 0d78 E050      		mov r24,r25
 2762 0d7a F040      		clr r25
 2763 0d7c 8083      		std Z+1,r24
 2765 0d80 9927      	.LM233:
 2766 0d82 8183      		mov r24,r28
 2767               		mov r25,r29
 2768               		adiw r24,10
 2769 0d84 8C2F      		rcall HALGetExtROMByte
 2770 0d86 9D2F      		mov r14,r24
 2772 0d8a 00D0      	.LM234:
 2773 0d8c E82E      		mov r25,r17
 2774               		mov r24,r16
 2775               		adiw r24,2
 2776 0d8e 912F      		rcall HALGetEEPROMWord
 2778 0d92 0296      	.LM235:
 2779 0d94 00D0      		mov r30,r14
 2780               		clr r31
 2781               		subi r30,lo8(-(ComProcData))
 2782 0d96 EE2D      		sbci r31,hi8(-(ComProcData))
 2783 0d98 FF27      		st Z,r24
 2784 0d9a E050      		mov r24,r25
 2785 0d9c F040      		clr r25
 2786 0d9e 8083      		std Z+1,r24
 2788 0da2 9927      	.LM236:
 2789 0da4 8183      		mov r24,r28
 2790               		mov r25,r29
 2791               		adiw r24,11
 2792 0da6 8C2F      		rcall HALGetExtROMByte
 2793 0da8 9D2F      		mov r14,r24
 2794 0daa 0B96      		mov r25,r17
 2795 0dac 00D0      		mov r24,r16
 2796 0dae E82E      		adiw r24,6
 2797 0db0 912F      		rcall HALGetEEPROMByte
 2798 0db2 802F      		mov r30,r14
 2799 0db4 0696      		clr r31
 2800 0db6 00D0      		subi r30,lo8(-(ComProcData))
 2801 0db8 EE2D      		sbci r31,hi8(-(ComProcData))
 2802 0dba FF27      		st Z,r24
 2804 0dbe F040      	.LM237:
 2805 0dc0 8083      		mov r24,r28
 2806               		mov r25,r29
 2807               		adiw r24,12
 2808 0dc2 8C2F      		rcall HALGetExtROMByte
 2809 0dc4 9D2F      		mov r14,r24
 2810 0dc6 0C96      		mov r25,r17
 2811 0dc8 00D0      		mov r24,r16
 2812 0dca E82E      		adiw r24,7
 2813 0dcc 912F      		rcall HALGetEEPROMByte
 2814 0dce 802F      		mov r30,r14
 2815 0dd0 0796      		clr r31
 2816 0dd2 00D0      		subi r30,lo8(-(ComProcData))
 2817 0dd4 EE2D      		sbci r31,hi8(-(ComProcData))
 2818 0dd6 FF27      		st Z,r24
 2820 0dda F040      	.LM238:
 2821 0ddc 8083      		mov r24,r28
 2822               		mov r25,r29
 2823               		adiw r24,13
 2824 0dde 8C2F      		rcall HALGetExtROMByte
 2825 0de0 9D2F      		mov r14,r24
 2826 0de2 0D96      		mov r25,r17
 2827 0de4 00D0      		mov r24,r16
 2828 0de6 E82E      		adiw r24,8
 2829 0de8 912F      		rcall HALGetEEPROMByte
 2830 0dea 802F      		mov r30,r14
 2831 0dec 0896      		clr r31
 2832 0dee 00D0      		subi r30,lo8(-(ComProcData))
 2833 0df0 EE2D      		sbci r31,hi8(-(ComProcData))
 2834 0df2 FF27      		st Z,r24
 2835 0df4 E050      	.L215:
 2837 0df8 8083      	.LM239:
 2838               		ldi r24,lo8(1)
 2839               		ldi r25,hi8(1)
 2840               	/* epilogue: frame size=0 */
 2841 0dfa 81E0      		pop r29
 2842 0dfc 90E0      		pop r28
 2843               		pop r17
 2844 0dfe DF91      		pop r16
 2845 0e00 CF91      		pop r15
 2846 0e02 1F91      		pop r14
 2847 0e04 0F91      		pop r13
 2848 0e06 FF90      		pop r12
 2849 0e08 EF90      		pop r11
 2850 0e0a DF90      		ret
 2851 0e0c CF90      	/* epilogue end (size=10) */
 2852 0e0e BF90      	/* function BlockADCChannelConfig size 258 (239) */
 2860               	.Lscope28:
 2863               	.global	BlockADCMask
 2865               	BlockADCMask:
 2867               	.LM240:
 2868               	/* prologue: frame size=0 */
 2869               		push r17
 2870               		push r28
 2871               		push r29
 2872 0e12 1F93      	/* prologue end (size=3) */
 2873 0e14 CF93      		mov r29,r25
 2874 0e16 DF93      		mov r28,r24
 2876 0e18 D92F      	.LM241:
 2877 0e1a C82F      		rcall HALGetExtROMByte
 2878               		mov r30,r24
 2879               		clr r31
 2880 0e1c 00D0      		subi r30,lo8(-(ComProcData))
 2881 0e1e E82F      		sbci r31,hi8(-(ComProcData))
 2882 0e20 FF27      		ld r24,Z
 2883 0e22 E050      		tst r24
 2884 0e24 F040      		breq .L219
 2886 0e28 8823      	.LM242:
 2887 0e2a 01F0      		mov r24,r28
 2888               		mov r25,r29
 2889               		adiw r24,1
 2890 0e2c 8C2F      		rcall HALGetExtROMByte
 2891 0e2e 9D2F      		mov r30,r24
 2892 0e30 0196      		clr r31
 2893 0e32 00D0      		subi r30,lo8(-(ComProcData))
 2894 0e34 E82F      		sbci r31,hi8(-(ComProcData))
 2895 0e36 FF27      		ld r17,Z
 2897 0e3a F040      	.LM243:
 2898 0e3c 1081      		mov r22,r17
 2899               		ldi r24,lo8(1)
 2900               		ldi r25,hi8(1)
 2901 0e3e 612F      		rcall HALSetEEPROMByte
 2902 0e40 81E0      		rjmp .L221
 2903 0e42 90E0      	.L219:
 2905 0e46 00C0      	.LM244:
 2906               		ldi r24,lo8(1)
 2907               		ldi r25,hi8(1)
 2908               		rcall HALGetEEPROMByte
 2909 0e48 81E0      		mov r17,r24
 2910 0e4a 90E0      	.L221:
 2912 0e4e 182F      	.LM245:
 2913               		mov r24,r28
 2914               		mov r25,r29
 2915               		adiw r24,3
 2916 0e50 8C2F      		rcall HALGetExtROMByte
 2917 0e52 9D2F      		mov r30,r24
 2918 0e54 0396      		clr r31
 2919 0e56 00D0      		subi r30,lo8(-(ComProcData))
 2920 0e58 E82F      		sbci r31,hi8(-(ComProcData))
 2921 0e5a FF27      		st Z,r17
 2923 0e5e F040      	.LM246:
 2924 0e60 1083      		ldi r24,lo8(1)
 2925               		ldi r25,hi8(1)
 2926               	/* epilogue: frame size=0 */
 2927 0e62 81E0      		pop r29
 2928 0e64 90E0      		pop r28
 2929               		pop r17
 2930 0e66 DF91      		ret
 2931 0e68 CF91      	/* epilogue end (size=4) */
 2932 0e6a 1F91      	/* function BlockADCMask size 46 (39) */
 2937               	.Lscope29:
 2940               	.global	BlockModuleAddress
 2942               	BlockModuleAddress:
 2944               	.LM247:
 2945               	/* prologue: frame size=0 */
 2946               		push r17
 2947               		push r28
 2948               		push r29
 2949 0e6e 1F93      	/* prologue end (size=3) */
 2950 0e70 CF93      		mov r29,r25
 2951 0e72 DF93      		mov r28,r24
 2953 0e74 D92F      	.LM248:
 2954 0e76 C82F      		rcall HALGetExtROMByte
 2955               		mov r30,r24
 2956               		clr r31
 2957 0e78 00D0      		subi r30,lo8(-(ComProcData))
 2958 0e7a E82F      		sbci r31,hi8(-(ComProcData))
 2959 0e7c FF27      		ld r24,Z
 2960 0e7e E050      		tst r24
 2961 0e80 F040      		brne .L224
 2963 0e84 8823      	.LM249:
 2964 0e86 01F4      		ldi r24,lo8(0)
 2965               		ldi r25,hi8(0)
 2966               		rcall HALGetEEPROMByte
 2967 0e88 80E0      		mov r17,r24
 2968 0e8a 90E0      		rjmp .L226
 2969 0e8c 00D0      	.L224:
 2971 0e90 00C0      	.LM250:
 2972               		mov r24,r28
 2973               		mov r25,r29
 2974               		adiw r24,1
 2975 0e92 8C2F      		rcall HALGetExtROMByte
 2976 0e94 9D2F      		mov r30,r24
 2977 0e96 0196      		clr r31
 2978 0e98 00D0      		subi r30,lo8(-(ComProcData))
 2979 0e9a E82F      		sbci r31,hi8(-(ComProcData))
 2980 0e9c FF27      		ld r17,Z
 2982 0ea0 F040      	.LM251:
 2983 0ea2 1081      		mov r22,r17
 2984               		ldi r24,lo8(0)
 2985               		ldi r25,hi8(0)
 2986 0ea4 612F      		rcall HALSetEEPROMByte
 2987 0ea6 80E0      	.L226:
 2989 0eaa 00D0      	.LM252:
 2990               		mov r24,r28
 2991               		mov r25,r29
 2992               		adiw r24,3
 2993 0eac 8C2F      		rcall HALGetExtROMByte
 2994 0eae 9D2F      		mov r30,r24
 2995 0eb0 0396      		clr r31
 2996 0eb2 00D0      		subi r30,lo8(-(ComProcData))
 2997 0eb4 E82F      		sbci r31,hi8(-(ComProcData))
 2998 0eb6 FF27      		st Z,r17
 3000 0eba F040      	.LM253:
 3001 0ebc 1083      		ldi r24,lo8(1)
 3002               		ldi r25,hi8(1)
 3003               	/* epilogue: frame size=0 */
 3004 0ebe 81E0      		pop r29
 3005 0ec0 90E0      		pop r28
 3006               		pop r17
 3007 0ec2 DF91      		ret
 3008 0ec4 CF91      	/* epilogue end (size=4) */
 3009 0ec6 1F91      	/* function BlockModuleAddress size 46 (39) */
 3014               	.Lscope30:
 3017               	.global	BlockADC
 3019               	BlockADC:
 3021               	.LM254:
 3022               	/* prologue: frame size=0 */
 3023               		push r28
 3024               		push r29
 3025               	/* prologue end (size=2) */
 3026 0eca CF93      		mov r29,r25
 3027 0ecc DF93      		mov r28,r24
 3029 0ece D92F      	.LM255:
 3030 0ed0 C82F      		rcall HALGetExtROMByte
 3031               		mov r30,r24
 3032               		clr r31
 3033 0ed2 00D0      		subi r30,lo8(-(ComProcData))
 3034 0ed4 E82F      		sbci r31,hi8(-(ComProcData))
 3035 0ed6 FF27      		ld r24,Z
 3036 0ed8 E050      		tst r24
 3037 0eda F040      		breq .L229
 3039 0ede 8823      	.LM256:
 3040 0ee0 01F0      		rcall HALGetADCReady
 3041               		tst r24
 3042               		breq .L237
 3044 0ee4 8823      	.LM257:
 3045 0ee6 01F0      		ldi r24,lo8(1)
 3046               		ldi r25,hi8(1)
 3047               		rcall HALGetEEPROMByte
 3049 0eea 90E0      	.LM258:
 3050 0eec 00D0      		rcall HALRunADC
 3051               		rjmp .L238
 3052               	.L229:
 3054 0ef0 00C0      	.LM259:
 3055               		rcall HALGetADCReady
 3056               		tst r24
 3057               		brne .L234
 3058 0ef2 00D0      	.L237:
 3060 0ef6 01F4      	.LM260:
 3061               		ldi r24,lo8(4)
 3062               		sts ComProcData+65,r24
 3063               		ldi r24,lo8(0)
 3064 0ef8 84E0      		ldi r25,hi8(0)
 3065 0efa 8093 0000 		rjmp .L233
 3066 0efe 80E0      	.L234:
 3068 0f02 00C0      	.LM261:
 3069               		mov r24,r28
 3070               		mov r25,r29
 3071               		adiw r24,3
 3072 0f04 8C2F      		rcall HALGetExtROMByte
 3073 0f06 9D2F      		mov r30,r24
 3074 0f08 0396      		clr r31
 3075 0f0a 00D0      		subi r30,lo8(-(ComProcData))
 3076 0f0c E82F      		sbci r31,hi8(-(ComProcData))
 3077 0f0e FF27      		st Z,__zero_reg__
 3079 0f12 F040      	.LM262:
 3080 0f14 1082      		mov r24,r28
 3081               		mov r25,r29
 3082               		adiw r24,4
 3083 0f16 8C2F      		rcall HALGetExtROMByte
 3084 0f18 9D2F      		mov r30,r24
 3085 0f1a 0496      		clr r31
 3086 0f1c 00D0      		subi r30,lo8(-(ComProcData))
 3087 0f1e E82F      		sbci r31,hi8(-(ComProcData))
 3088 0f20 FF27      		ldi r24,lo8(1)
 3089 0f22 E050      		st Z,r24
 3091 0f26 81E0      	.LM263:
 3092 0f28 8083      		mov r24,r28
 3093               		mov r25,r29
 3094               		adiw r24,5
 3095 0f2a 8C2F      		rcall HALGetExtROMByte
 3096 0f2c 9D2F      		mov r30,r24
 3097 0f2e 0596      		clr r31
 3098 0f30 00D0      		subi r30,lo8(-(ComProcData))
 3099 0f32 E82F      		sbci r31,hi8(-(ComProcData))
 3100 0f34 FF27      		ldi r24,lo8(2)
 3101 0f36 E050      		st Z,r24
 3103 0f3a 82E0      	.LM264:
 3104 0f3c 8083      		mov r24,r28
 3105               		mov r25,r29
 3106               		adiw r24,6
 3107 0f3e 8C2F      		rcall HALGetExtROMByte
 3108 0f40 9D2F      		mov r30,r24
 3109 0f42 0696      		clr r31
 3110 0f44 00D0      		subi r30,lo8(-(ComProcData))
 3111 0f46 E82F      		sbci r31,hi8(-(ComProcData))
 3112 0f48 FF27      		ldi r24,lo8(3)
 3113 0f4a E050      		st Z,r24
 3115 0f4e 83E0      	.LM265:
 3116 0f50 8083      		mov r24,r28
 3117               		mov r25,r29
 3118               		adiw r24,7
 3119 0f52 8C2F      		rcall HALGetExtROMByte
 3120 0f54 9D2F      		mov r30,r24
 3121 0f56 0796      		clr r31
 3122 0f58 00D0      		subi r30,lo8(-(ComProcData))
 3123 0f5a E82F      		sbci r31,hi8(-(ComProcData))
 3124 0f5c FF27      		ldi r24,lo8(4)
 3125 0f5e E050      		st Z,r24
 3127 0f62 84E0      	.LM266:
 3128 0f64 8083      		mov r24,r28
 3129               		mov r25,r29
 3130               		adiw r24,8
 3131 0f66 8C2F      		rcall HALGetExtROMByte
 3132 0f68 9D2F      		mov r30,r24
 3133 0f6a 0896      		clr r31
 3134 0f6c 00D0      		subi r30,lo8(-(ComProcData))
 3135 0f6e E82F      		sbci r31,hi8(-(ComProcData))
 3136 0f70 FF27      		ldi r24,lo8(5)
 3137 0f72 E050      		st Z,r24
 3139 0f76 85E0      	.LM267:
 3140 0f78 8083      		mov r24,r28
 3141               		mov r25,r29
 3142               		adiw r24,9
 3143 0f7a 8C2F      		rcall HALGetExtROMByte
 3144 0f7c 9D2F      		mov r30,r24
 3145 0f7e 0996      		clr r31
 3146 0f80 00D0      		subi r30,lo8(-(ComProcData))
 3147 0f82 E82F      		sbci r31,hi8(-(ComProcData))
 3148 0f84 FF27      		ldi r24,lo8(6)
 3149 0f86 E050      		st Z,r24
 3151 0f8a 86E0      	.LM268:
 3152 0f8c 8083      		mov r24,r28
 3153               		mov r25,r29
 3154               		adiw r24,10
 3155 0f8e 8C2F      		rcall HALGetExtROMByte
 3156 0f90 9D2F      		mov r30,r24
 3157 0f92 0A96      		clr r31
 3158 0f94 00D0      		subi r30,lo8(-(ComProcData))
 3159 0f96 E82F      		sbci r31,hi8(-(ComProcData))
 3160 0f98 FF27      		ldi r24,lo8(7)
 3161 0f9a E050      		st Z,r24
 3162 0f9c F040      	.L238:
 3163 0f9e 87E0      		ldi r24,lo8(1)
 3164 0fa0 8083      		ldi r25,hi8(1)
 3165               	.L233:
 3166 0fa2 81E0      	/* epilogue: frame size=0 */
 3167 0fa4 90E0      		pop r29
 3168               		pop r28
 3169               		ret
 3170 0fa6 DF91      	/* epilogue end (size=3) */
 3171 0fa8 CF91      	/* function BlockADC size 113 (108) */
 3173               	.Lscope31:
 3176               	.global	Block1
 3178               	Block1:
 3180               	.LM269:
 3181               	/* prologue: frame size=0 */
 3182               		push r11
 3183               		push r12
 3184               		push r13
 3185 0fac BF92      		push r14
 3186 0fae CF92      		push r15
 3187 0fb0 DF92      		push r16
 3188 0fb2 EF92      		push r17
 3189 0fb4 FF92      		push r28
 3190 0fb6 0F93      		push r29
 3191 0fb8 1F93      	/* prologue end (size=9) */
 3192 0fba CF93      		mov r16,r24
 3193 0fbc DF93      		mov r17,r25
 3195 0fbe 082F      	.LM270:
 3196 0fc0 192F      		rcall HALGetExtROMByte
 3197               		mov r11,r24
 3199 0fc2 00D0      	.LM271:
 3200 0fc4 B82E      		mov r14,r16
 3201               		mov r15,r17
 3202               		sec
 3203 0fc6 E02E      		adc r14,__zero_reg__
 3204 0fc8 F12E      		adc r15,__zero_reg__
 3205 0fca 0894      		clr r12
 3206 0fcc E11C      		rjmp .L240
 3207 0fce F11C      	.L241:
 3209 0fd2 00C0      	.LM272:
 3210               		mov r25,r15
 3211               		mov r24,r14
 3212               		rcall HALGetExtROMByte
 3213 0fd4 9F2D      		mov r16,r24
 3215 0fd8 00D0      	.LM273:
 3216 0fda 082F      		mov r25,r15
 3217               		mov r24,r14
 3218               		adiw r24,1
 3219 0fdc 9F2D      		rcall HALGetExtROMByte
 3220 0fde 8E2D      		mov r17,r24
 3222 0fe2 00D0      	.LM274:
 3223 0fe4 182F      		mov r25,r15
 3224               		mov r24,r14
 3225               		adiw r24,2
 3226 0fe6 9F2D      		rcall HALGetExtROMByte
 3227 0fe8 8E2D      		mov r13,r24
 3229 0fec 00D0      	.LM275:
 3230 0fee D82E      		tst r17
 3231               		brne .L242
 3232               		rjmp .L244
 3233 0ff0 1123      	.L245:
 3235 0ff4 00C0      	.LM276:
 3236               		mov r30,r16
 3237               		clr r31
 3238               		subi r30,lo8(-(ComProcData))
 3239 0ff6 E02F      		sbci r31,hi8(-(ComProcData))
 3240 0ff8 FF27      		add r30,r17
 3241 0ffa E050      		adc r31,__zero_reg__
 3242 0ffc F040      		ld r24,Z
 3243 0ffe E10F      		rcall HALWriteOutCommandByte
 3245 1002 8081      	.LM277:
 3246 1004 00D0      		subi r17,lo8(-(1))
 3247               	.L244:
 3248               		cp r17,r13
 3249 1006 1F5F      		brne .L245
 3250               		rjmp .L246
 3251 1008 1D15      	.L242:
 3253 100c 00C0      	.LM278:
 3254               		cpi r17,lo8(2)
 3255               		breq .+2
 3256               		rjmp .L247
 3258 1010 01F0      	.LM279:
 3259 1012 00C0      		mov r30,r16
 3260               		clr r31
 3261               		subi r30,lo8(-(ComProcData))
 3262 1014 E02F      		sbci r31,hi8(-(ComProcData))
 3263 1016 FF27      		ld r18,Z
 3265 101a F040      	.LM280:
 3266 101c 2081      		mov r28,r18
 3267               		clr r29
 3268               		mov r24,r28
 3269 101e C22F      		mov r25,r29
 3270 1020 DD27      		ldi r22,lo8(7)
 3271 1022 8C2F      		ldi r23,hi8(7)
 3272 1024 9D2F      		rcall __mulhi3
 3273 1026 67E0      		mov r27,r25
 3274 1028 70E0      		mov r26,r24
 3275 102a 00D0      		subi r26,lo8(-(Buffers))
 3276 102c B92F      		sbci r27,hi8(-(Buffers))
 3277 102e A82F      		mov r31,r27
 3278 1030 A050      		mov r30,r26
 3279 1032 B040      		ldd r24,Z+4
 3280 1034 FB2F      		cpi r24,lo8(1)
 3281 1036 EA2F      		brne .L249
 3283 103a 8130      	.LM281:
 3284 103c 01F4      		ldd r16,Z+2
 3285               		rjmp .L251
 3286               	.L249:
 3288 1040 00C0      	.LM282:
 3289               		cpi r24,lo8(2)
 3290               		breq .L252
 3291               		ldi r16,lo8(0)
 3292 1042 8230      		rjmp .L251
 3293 1044 01F0      	.L252:
 3295 1048 00C0      	.LM283:
 3296               		mov r31,r27
 3297               		mov r30,r26
 3298               		ldd r16,Z+2
 3299 104a FB2F      		lsl r16
 3300 104c EA2F      	.L251:
 3302 1050 000F      	.LM284:
 3303               		cpi r18,lo8(9)
 3304               		brlo .L254
 3306 1052 2930      	.LM285:
 3307 1054 00F0      		ldi r24,lo8(2)
 3308               		sts ComProcData+65,r24
 3310 1056 82E0      	.LM286:
 3311 1058 8093 0000 		ldi r24,lo8(13)
 3312               		rcall HALWriteOutCommandByte
 3313               		ldi r24,lo8(0)
 3314 105c 8DE0      		ldi r25,hi8(0)
 3315 105e 00D0      		rjmp .L256
 3316 1060 80E0      	.L254:
 3318 1064 00C0      	.LM287:
 3319               		mov r24,r28
 3320               		mov r25,r29
 3321               		ldi r22,lo8(7)
 3322 1066 8C2F      		ldi r23,hi8(7)
 3323 1068 9D2F      		rcall __mulhi3
 3324 106a 67E0      		mov r31,r25
 3325 106c 70E0      		mov r30,r24
 3326 106e 00D0      		subi r30,lo8(-(Buffers))
 3327 1070 F92F      		sbci r31,hi8(-(Buffers))
 3328 1072 E82F      		ld r24,Z
 3329 1074 E050      		tst r24
 3330 1076 F040      		brne .L257
 3331 1078 8081      		ldi r17,lo8(0)
 3332 107a 8823      		rjmp .L259
 3333 107c 01F4      	.L257:
 3334 107e 10E0      		clr r13
 3335 1080 00C0      		rjmp .L260
 3336               	.L261:
 3338 1084 00C0      	.LM288:
 3339               		mov r24,r28
 3340               		mov r25,r29
 3341               		ldi r22,lo8(7)
 3342 1086 8C2F      		ldi r23,hi8(7)
 3343 1088 9D2F      		rcall __mulhi3
 3344 108a 67E0      		mov r31,r25
 3345 108c 70E0      		mov r30,r24
 3346 108e 00D0      		subi r30,lo8(-(Buffers))
 3347 1090 F92F      		sbci r31,hi8(-(Buffers))
 3348 1092 E82F      		ldd __tmp_reg__,Z+5
 3349 1094 E050      		ldd r31,Z+6
 3350 1096 F040      		mov r30,__tmp_reg__
 3351 1098 0580      		add r30,r13
 3352 109a F681      		adc r31,__zero_reg__
 3353 109c E02D      		ld r24,Z
 3355 10a0 F11D      	.LM289:
 3356 10a2 8081      		mov r25,r24
 3357               		andi r25,lo8(15)
 3359 10a4 982F      	.LM290:
 3360 10a6 9F70      		mov r18,r24
 3361               		swap r18
 3362               		andi r18,0x0f
 3364 10aa 2295      	.LM291:
 3365 10ac 2F70      		cpi r25,lo8(10)
 3366               		brsh .L262
 3367               		mov r17,r25
 3368 10ae 9A30      		subi r17,lo8(-(48))
 3369 10b0 00F4      		rjmp .L264
 3370 10b2 192F      	.L262:
 3371 10b4 105D      		mov r24,r25
 3372 10b6 00C0      		subi r24,lo8(-(-10))
 3373               		cpi r24,lo8(6)
 3374 10b8 892F      		brlo .L265
 3375 10ba 8A50      		ldi r17,lo8(0)
 3376 10bc 8630      		rjmp .L264
 3377 10be 00F0      	.L265:
 3378 10c0 10E0      		mov r17,r25
 3379 10c2 00C0      		subi r17,lo8(-(55))
 3380               	.L264:
 3382 10c6 195C      	.LM292:
 3383               		cpi r18,lo8(10)
 3384               		brsh .L267
 3385               		mov r24,r18
 3386 10c8 2A30      		subi r24,lo8(-(48))
 3387 10ca 00F4      		rjmp .L269
 3388 10cc 822F      	.L267:
 3389 10ce 805D      		mov r24,r18
 3390 10d0 00C0      		subi r24,lo8(-(-10))
 3391               		cpi r24,lo8(6)
 3392 10d2 822F      		brlo .L270
 3393 10d4 8A50      		ldi r24,lo8(0)
 3394 10d6 8630      		rjmp .L269
 3395 10d8 00F0      	.L270:
 3396 10da 80E0      		mov r24,r18
 3397 10dc 00C0      		subi r24,lo8(-(55))
 3398               	.L269:
 3400 10e0 895C      	.LM293:
 3401               		rcall HALWriteOutCommandByte
 3403               	.LM294:
 3404 10e2 00D0      		mov r24,r17
 3405               		rcall HALWriteOutCommandByte
 3407 10e4 812F      	.LM295:
 3408 10e6 00D0      		inc r13
 3409               	.L260:
 3410               		cp r13,r16
 3411 10e8 D394      		brne .L261
 3412               		rjmp .L246
 3413 10ea D016      	.L272:
 3415 10ee 00C0      	.LM296:
 3416               		mov r24,r28
 3417               		mov r25,r29
 3418               		ldi r22,lo8(7)
 3419 10f0 8C2F      		ldi r23,hi8(7)
 3420 10f2 9D2F      		rcall __mulhi3
 3421 10f4 67E0      		mov r31,r25
 3422 10f6 70E0      		mov r30,r24
 3423 10f8 00D0      		subi r30,lo8(-(Buffers))
 3424 10fa F92F      		sbci r31,hi8(-(Buffers))
 3425 10fc E82F      		ldd __tmp_reg__,Z+5
 3426 10fe E050      		ldd r31,Z+6
 3427 1100 F040      		mov r30,__tmp_reg__
 3428 1102 0580      		add r30,r17
 3429 1104 F681      		adc r31,__zero_reg__
 3430 1106 E02D      		ld r24,Z
 3431 1108 E10F      		rcall HALWriteOutCommandByte
 3433 110c 8081      	.LM297:
 3434 110e 00D0      		subi r17,lo8(-(1))
 3435               	.L259:
 3436               		cp r17,r16
 3437 1110 1F5F      		brne .L272
 3438               		rjmp .L246
 3439 1112 1017      	.L247:
 3441 1116 00C0      	.LM298:
 3442               		cpi r17,lo8(1)
 3443               		brne .L246
 3445 1118 1130      	.LM299:
 3446 111a 01F4      		mov r24,r16
 3447               		rcall HALWriteOutCommandByte
 3448               	.L246:
 3450 111e 00D0      	.LM300:
 3451               		ldi r24,lo8(3)
 3452               		ldi r25,hi8(3)
 3453               		add r14,r24
 3454 1120 83E0      		adc r15,r25
 3456 1124 E80E      	.LM301:
 3457 1126 F91E      		inc r12
 3458               	.L240:
 3459               		cp r12,r11
 3460 1128 C394      		breq .+2
 3461               		rjmp .L241
 3463 112c 01F0      	.LM302:
 3464 112e 00C0      		ldi r24,lo8(13)
 3465               		rcall HALWriteOutCommandByte
 3466               		ldi r24,lo8(1)
 3467 1130 8DE0      		ldi r25,hi8(1)
 3468 1132 00D0      	.L256:
 3469 1134 81E0      	/* epilogue: frame size=0 */
 3470 1136 90E0      		pop r29
 3471               		pop r28
 3472               		pop r17
 3473 1138 DF91      		pop r16
 3474 113a CF91      		pop r15
 3475 113c 1F91      		pop r14
 3476 113e 0F91      		pop r13
 3477 1140 FF90      		pop r12
 3478 1142 EF90      		pop r11
 3479 1144 DF90      		ret
 3480 1146 CF90      	/* epilogue end (size=10) */
 3481 1148 BF90      	/* function Block1 size 208 (189) */
 3496               	.Lscope32:
 3497               	.global	BlockHandlers
 3498               		.data
 3501               	BlockHandlers:
 3502               		.word	pm(Block0)
 3503               		.word	pm(Block1)
 3504               		.word	pm(BlockPlus)
 3505 0000 0000      		.word	pm(BlockMinus)
 3506 0002 0000      		.word	pm(BlockHexStrToByte)
 3507 0004 0000      		.word	pm(BlockByteToHexStr)
 3508 0006 0000      		.word	pm(BlockConst0)
 3509 0008 0000      		.word	pm(BlockConst1)
 3510 000a 0000      		.word	pm(BlockConst2)
 3511 000c 0000      		.word	pm(BlockModuleAddress)
 3512 000e 0000      		.word	pm(BlockCmpByte)
 3513 0010 0000      		.word	pm(BlockBreak)
 3514 0012 0000      		.word	pm(BlockNot)
 3515 0014 0000      		.word	pm(BlockLastError)
 3516 0016 0000      		.word	pm(BlockSortBuf)
 3517 0018 0000      		.word	pm(BlockAnd)
 3518 001a 0000      		.word	pm(BlockCRC)
 3519 001c 0000      		.word	pm(BlockCRCError)
 3520 001e 0000      		.word	pm(BlockInCommandBuffId)
 3521 0020 0000      		.word	pm(BlockADC)
 3522 0022 0000      		.word	pm(BlockADCMask)
 3523 0024 0000      		.word	pm(BlockADCChannelConfig)
 3524 0026 0000      		.word	pm(BlockHexStrToWord)
 3525 0028 0000      		.word	pm(BlockWordToHexStr)
 3526 002a 0000      		.word	pm(BlockByteToBit)
 3527 002c 0000      		.word	pm(BlockBitToByte)
 3528 002e 0000      		.word	pm(BlockBufLen)
 3529 0030 0000      		.word	pm(BlockDiv)
 3530 0032 0000      		.word	pm(BlockAvgMean)
 3531 0034 0000      		.word	pm(BlockApprox)
 3532 0036 0000      		.word	pm(BlockConst00)
 3533 0038 0000      		.word	pm(BlockWord2DecStr)
 3534 003a 0000      		.word	pm(BlockConst3)
 3536 003e 0000      		.text
 3538               	.Letext0:
 3539               	/* File "blocks.c": code 2215 = 0x08a7 (1926), prologues 129, epilogues 160 */
 3540               	...
DEFINED SYMBOLS
                            *ABS*:00000000 blocks.c
C:\DOCUME~1\SERGEY~1\LOCALS~1\Temp/ccSoaaaa.s:3      *ABS*:0000003f __SREG__
C:\DOCUME~1\SERGEY~1\LOCALS~1\Temp/ccSoaaaa.s:4      *ABS*:0000003e __SP_H__
C:\DOCUME~1\SERGEY~1\LOCALS~1\Temp/ccSoaaaa.s:5      *ABS*:0000003d __SP_L__
C:\DOCUME~1\SERGEY~1\LOCALS~1\Temp/ccSoaaaa.s:6      *ABS*:00000000 __tmp_reg__
C:\DOCUME~1\SERGEY~1\LOCALS~1\Temp/ccSoaaaa.s:7      *ABS*:00000001 __zero_reg__
C:\DOCUME~1\SERGEY~1\LOCALS~1\Temp/ccSoaaaa.s:80     .text:00000000 BlockConst3
C:\DOCUME~1\SERGEY~1\LOCALS~1\Temp/ccSoaaaa.s:108    .text:00000014 BlockWord2DecStr
C:\DOCUME~1\SERGEY~1\LOCALS~1\Temp/ccSoaaaa.s:252    .text:000000d2 BlockConst00
C:\DOCUME~1\SERGEY~1\LOCALS~1\Temp/ccSoaaaa.s:301    .text:0000010c BlockAvgMean
C:\DOCUME~1\SERGEY~1\LOCALS~1\Temp/ccSoaaaa.s:533    .text:0000025a BlockDiv
C:\DOCUME~1\SERGEY~1\LOCALS~1\Temp/ccSoaaaa.s:620    .text:000002d8 BlockBufLen
C:\DOCUME~1\SERGEY~1\LOCALS~1\Temp/ccSoaaaa.s:692    .text:00000334 BlockBitToByte
C:\DOCUME~1\SERGEY~1\LOCALS~1\Temp/ccSoaaaa.s:775    .text:0000039c BlockByteToBit
C:\DOCUME~1\SERGEY~1\LOCALS~1\Temp/ccSoaaaa.s:844    .text:000003ec BlockWordToHexStr
C:\DOCUME~1\SERGEY~1\LOCALS~1\Temp/ccSoaaaa.s:1016   .text:000004bc BlockHexStrToWord
C:\DOCUME~1\SERGEY~1\LOCALS~1\Temp/ccSoaaaa.s:1149   .text:0000055c BlockInCommandBuffId
C:\DOCUME~1\SERGEY~1\LOCALS~1\Temp/ccSoaaaa.s:1177   .text:00000570 BlockCRCError
C:\DOCUME~1\SERGEY~1\LOCALS~1\Temp/ccSoaaaa.s:1217   .text:00000592 BlockCRC
C:\DOCUME~1\SERGEY~1\LOCALS~1\Temp/ccSoaaaa.s:1369   .text:00000650 BlockAnd
C:\DOCUME~1\SERGEY~1\LOCALS~1\Temp/ccSoaaaa.s:1436   .text:000006aa BlockSortBuf
C:\DOCUME~1\SERGEY~1\LOCALS~1\Temp/ccSoaaaa.s:1599   .text:00000786 BlockLastError
C:\DOCUME~1\SERGEY~1\LOCALS~1\Temp/ccSoaaaa.s:1627   .text:0000079c BlockNot
C:\DOCUME~1\SERGEY~1\LOCALS~1\Temp/ccSoaaaa.s:1679   .text:000007da BlockBreak
C:\DOCUME~1\SERGEY~1\LOCALS~1\Temp/ccSoaaaa.s:1715   .text:000007f6 BlockCmpByte
C:\DOCUME~1\SERGEY~1\LOCALS~1\Temp/ccSoaaaa.s:1782   .text:00000848 BlockConst2
C:\DOCUME~1\SERGEY~1\LOCALS~1\Temp/ccSoaaaa.s:1810   .text:0000085c BlockConst1
C:\DOCUME~1\SERGEY~1\LOCALS~1\Temp/ccSoaaaa.s:1838   .text:00000870 BlockConst0
C:\DOCUME~1\SERGEY~1\LOCALS~1\Temp/ccSoaaaa.s:1865   .text:00000882 BlockByteToHexStr
C:\DOCUME~1\SERGEY~1\LOCALS~1\Temp/ccSoaaaa.s:1967   .text:000008f4 BlockHexStrToByte
C:\DOCUME~1\SERGEY~1\LOCALS~1\Temp/ccSoaaaa.s:2060   .text:00000964 BlockMinus
C:\DOCUME~1\SERGEY~1\LOCALS~1\Temp/ccSoaaaa.s:2123   .text:000009be BlockPlus
C:\DOCUME~1\SERGEY~1\LOCALS~1\Temp/ccSoaaaa.s:2186   .text:00000a18 Block0
C:\DOCUME~1\SERGEY~1\LOCALS~1\Temp/ccSoaaaa.s:2298   .text:00000a9e BlockApprox
C:\DOCUME~1\SERGEY~1\LOCALS~1\Temp/ccSoaaaa.s:2528   .text:00000c0e BlockADCChannelConfig
C:\DOCUME~1\SERGEY~1\LOCALS~1\Temp/ccSoaaaa.s:2868   .text:00000e12 BlockADCMask
C:\DOCUME~1\SERGEY~1\LOCALS~1\Temp/ccSoaaaa.s:2945   .text:00000e6e BlockModuleAddress
C:\DOCUME~1\SERGEY~1\LOCALS~1\Temp/ccSoaaaa.s:3022   .text:00000eca BlockADC
C:\DOCUME~1\SERGEY~1\LOCALS~1\Temp/ccSoaaaa.s:3181   .text:00000fac Block1
C:\DOCUME~1\SERGEY~1\LOCALS~1\Temp/ccSoaaaa.s:3504   .data:00000000 BlockHandlers

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
HALGetExtROMByte
ComProcData
__udivmodhi4
__mulhi3
Buffers
__udivmodsi4
__udivmodqi4
__mulqi3
HALGetEEPROMWord
HALSetEEPROMWord
HALSetEEPROMByte
HALGetEEPROMByte
HALGetADCReady
HALRunADC
HALWriteOutCommandByte
