
ucontr.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001728  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000088  00800060  00001728  000017bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000105  008000e8  008000e8  00001844  2**0
                  ALLOC
  3 .stab         00002acc  00000000  00000000  00001844  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000011a1  00000000  00000000  00004310  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
       2:	2a c0       	rjmp	.+84     	; 0x58 <__bad_interrupt>
       4:	29 c0       	rjmp	.+82     	; 0x58 <__bad_interrupt>
       6:	28 c0       	rjmp	.+80     	; 0x58 <__bad_interrupt>
       8:	27 c0       	rjmp	.+78     	; 0x58 <__bad_interrupt>
       a:	26 c0       	rjmp	.+76     	; 0x58 <__bad_interrupt>
       c:	25 c0       	rjmp	.+74     	; 0x58 <__bad_interrupt>
       e:	24 c0       	rjmp	.+72     	; 0x58 <__bad_interrupt>
      10:	23 c0       	rjmp	.+70     	; 0x58 <__bad_interrupt>
      12:	22 c0       	rjmp	.+68     	; 0x58 <__bad_interrupt>
      14:	21 c0       	rjmp	.+66     	; 0x58 <__bad_interrupt>
      16:	bf c9       	rjmp	.-3202   	; 0xfffff396 <__eeprom_end+0xff7ef396>
      18:	1f c0       	rjmp	.+62     	; 0x58 <__bad_interrupt>
      1a:	1e c0       	rjmp	.+60     	; 0x58 <__bad_interrupt>
      1c:	b2 ca       	rjmp	.-2716   	; 0xfffff582 <__eeprom_end+0xff7ef582>
      1e:	1c c0       	rjmp	.+56     	; 0x58 <__bad_interrupt>
      20:	1b c0       	rjmp	.+54     	; 0x58 <__bad_interrupt>

00000022 <__ctors_end>:
      22:	11 24       	eor	r1, r1
      24:	1f be       	out	0x3f, r1	; 63
      26:	cf e5       	ldi	r28, 0x5F	; 95
      28:	d2 e0       	ldi	r29, 0x02	; 2
      2a:	de bf       	out	0x3e, r29	; 62
      2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
      2e:	10 e0       	ldi	r17, 0x00	; 0
      30:	a0 e6       	ldi	r26, 0x60	; 96
      32:	b0 e0       	ldi	r27, 0x00	; 0
      34:	e8 e2       	ldi	r30, 0x28	; 40
      36:	f7 e1       	ldi	r31, 0x17	; 23
      38:	03 c0       	rjmp	.+6      	; 0x40 <.do_copy_data_start>

0000003a <.do_copy_data_loop>:
      3a:	c8 95       	lpm
      3c:	31 96       	adiw	r30, 0x01	; 1
      3e:	0d 92       	st	X+, r0

00000040 <.do_copy_data_start>:
      40:	a8 3e       	cpi	r26, 0xE8	; 232
      42:	b1 07       	cpc	r27, r17
      44:	d1 f7       	brne	.-12     	; 0x3a <.do_copy_data_loop>

00000046 <__do_clear_bss>:
      46:	11 e0       	ldi	r17, 0x01	; 1
      48:	a8 ee       	ldi	r26, 0xE8	; 232
      4a:	b0 e0       	ldi	r27, 0x00	; 0
      4c:	01 c0       	rjmp	.+2      	; 0x50 <.do_clear_bss_start>

0000004e <.do_clear_bss_loop>:
      4e:	1d 92       	st	X+, r1

00000050 <.do_clear_bss_start>:
      50:	ad 3e       	cpi	r26, 0xED	; 237
      52:	b1 07       	cpc	r27, r17
      54:	e1 f7       	brne	.-8      	; 0x4e <.do_clear_bss_loop>
      56:	01 c0       	rjmp	.+2      	; 0x5a <main>

00000058 <__bad_interrupt>:
      58:	d3 cf       	rjmp	.-90     	; 0x0 <__vectors>

0000005a <main>:
#include "buffers.h"

int main(void)
{		
	ComProcInit();
      5a:	0b d0       	rcall	.+22     	; 0x72 <ComProcInit>
	HALInit();	
      5c:	ee da       	rcall	.-2596   	; 0xfffff63a <__eeprom_end+0xff7ef63a>
 	
 	while (1)
 	{
		if (ComProcData.InCommandState == IN_COMMAND_STATE_READY_TO_PROCESS)
      5e:	80 91 28 01 	lds	r24, 0x0128
      62:	81 30       	cpi	r24, 0x01	; 1
      64:	e1 f7       	brne	.-8      	; 0x5e <main+0x4>
		{
			ComProcProcessInCommand();
      66:	b0 d0       	rcall	.+352    	; 0x1c8 <ComProcProcessInCommand>
			ComProcData.InCommandState = IN_COMMAND_STATE_PROCESSED;
      68:	10 92 28 01 	sts	0x0128, r1
			Buffers[BUFFER_IN_COMMAND_ID].Size = 0;
      6c:	10 92 e3 00 	sts	0x00E3, r1
      70:	f6 cf       	rjmp	.-20     	; 0x5e <main+0x4>

00000072 <ComProcInit>:

//инициализация ComProc чего?
void ComProcInit (void)
{
	ComProcData.LastError = 0;
      72:	10 92 29 01 	sts	0x0129, r1
	ComProcData.InCommandState = IN_COMMAND_STATE_PROCESSED;
      76:	10 92 28 01 	sts	0x0128, r1
	Buffers[BUFFER_IN_COMMAND_ID].Size = 0;
      7a:	10 92 e3 00 	sts	0x00E3, r1
      7e:	08 95       	ret

00000080 <ComProcProcessSchema>:
}

//получение адреса схемы
static unsigned short ComProcGetSchemaAddress (void)
{
	//похоже, что маска - это маски команд. т.е. определяет допустимые команды
	
	unsigned char masksCount; //число масок. зачем?
	unsigned char i; //для цикла
	unsigned char j; //для цикла
	unsigned char maskLength; //длина маски. зачем?
	unsigned short pos; //позиция. чего в чём?
	unsigned char curMaskByte; //текущий байт маски
	unsigned short result; //адрес схемы
	
	pos = 0;
	masksCount = HALGetExtROMByte (pos); //получаем число масок. это что и зачем?
	pos++;

   //для каждой маски находим хз чего. причём результат всегда возвращается уже после первой маски
	for (i = 0; i < masksCount; i++)
	{
		maskLength = HALGetExtROMByte (pos); //читаем длину маски. интересно где она сохраняется?

		if (maskLength != Buffers[BUFFER_IN_COMMAND_ID].Size) //сравниваем длину маски с длиной идентификатора команды в буфере.
		{                                                     //непонятно считается pos
			pos += maskLength + 3;
			continue;
		}

		//что мы нашли к этому моменту? позицию чего?

		pos++;

		//обрабатываем текущую маску
		for (j = 0; j < maskLength; j++)
		{
			curMaskByte = HALGetExtROMByte (pos + j); //получаем байт маски

			if (curMaskByte == MASK_ANY_SYMBOL)			//ничё не делаем, если он равен любому символу
				continue;

			if (curMaskByte != Buffers[BUFFER_IN_COMMAND_ID].Data[j]) //если байт маски не равен данным из буфера, то выходим
				break;
		}

		if (j < maskLength)	//совсем непонятные вычисления
		{
			pos += maskLength + 2;
			continue;
		}

		//TODO: проверить BIG endian или LITTLE endian. зачем?
		//чё за х?
		result = HALGetExtROMByte (pos + maskLength);
		result <<= 8;
		result += HALGetExtROMByte (pos + maskLength + 1);
		//почему возвращаем результат?
		return result;
	}
	
	return 0;
}

//обработка схемы по полученному адресу
static unsigned char ComProcProcessSchema (unsigned short schemaAddress)
{
      80:	df 92       	push	r13
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	cf 93       	push	r28
      8c:	df 93       	push	r29
      8e:	08 2f       	mov	r16, r24
      90:	19 2f       	mov	r17, r25
	unsigned char blocksCount; //число блоков
	unsigned char blockIndex; //непонятно
	unsigned char i; //для цикла
	unsigned short pos;
	unsigned short paramsAddr;
	unsigned char res;

	pos = schemaAddress;
	blocksCount = HALGetExtROMByte (pos); //считываем число блоков
      92:	6b d9       	rcall	.-3370   	; 0xfffff36a <__eeprom_end+0xff7ef36a>
      94:	d8 2e       	mov	r13, r24
	pos++;
      96:	d1 2f       	mov	r29, r17
      98:	c0 2f       	mov	r28, r16
      9a:	21 96       	adiw	r28, 0x01	; 1
      9c:	ee 24       	eor	r14, r14
      9e:	26 c0       	rjmp	.+76     	; 0xec <ComProcProcessSchema+0x6c>
	
	//для каждого блока
	for (i = 0; i < blocksCount; i++)
	{
		blockIndex = HALGetExtROMByte (pos); //получаем номер блока. он соответствует bloack
      a0:	8c 2f       	mov	r24, r28
      a2:	9d 2f       	mov	r25, r29
      a4:	62 d9       	rcall	.-3388   	; 0xfffff36a <__eeprom_end+0xff7ef36a>
      a6:	f8 2e       	mov	r15, r24
		//TODO: проверить BIG endian или LITTLE endian
		paramsAddr = HALGetExtROMByte (pos + 1);
      a8:	8c 2f       	mov	r24, r28
      aa:	9d 2f       	mov	r25, r29
      ac:	01 96       	adiw	r24, 0x01	; 1
      ae:	5d d9       	rcall	.-3398   	; 0xfffff36a <__eeprom_end+0xff7ef36a>
      b0:	08 2f       	mov	r16, r24
      b2:	11 27       	eor	r17, r17
		paramsAddr <<= 8;
      b4:	10 2f       	mov	r17, r16
      b6:	00 27       	eor	r16, r16
		paramsAddr |= HALGetExtROMByte (pos + 2);
      b8:	8c 2f       	mov	r24, r28
      ba:	9d 2f       	mov	r25, r29
      bc:	02 96       	adiw	r24, 0x02	; 2
      be:	55 d9       	rcall	.-3414   	; 0xfffff36a <__eeprom_end+0xff7ef36a>
		res = (BlockHandlers [blockIndex])(paramsAddr); //тут похоже идёт обработка данных данным блоком. интересно где данные? по параметру paramsAddr?
      c0:	ef 2d       	mov	r30, r15
      c2:	ff 27       	eor	r31, r31
      c4:	ee 0f       	add	r30, r30
      c6:	ff 1f       	adc	r31, r31
      c8:	e9 59       	subi	r30, 0x99	; 153
      ca:	ff 4f       	sbci	r31, 0xFF	; 255
      cc:	99 27       	eor	r25, r25
      ce:	01 90       	ld	r0, Z+
      d0:	f0 81       	ld	r31, Z
      d2:	e0 2d       	mov	r30, r0
      d4:	80 2b       	or	r24, r16
      d6:	91 2b       	or	r25, r17
      d8:	09 95       	icall
		if (res == BLOCK_RES_ERROR)
      da:	88 23       	and	r24, r24
      dc:	19 f4       	brne	.+6      	; 0xe4 <ComProcProcessSchema+0x64>
      de:	80 e0       	ldi	r24, 0x00	; 0
      e0:	90 e0       	ldi	r25, 0x00	; 0
      e2:	08 c0       	rjmp	.+16     	; 0xf4 <ComProcProcessSchema+0x74>
			return 0;
		if (res == BLOCK_RES_SKIP_PROCESSING)
      e4:	82 30       	cpi	r24, 0x02	; 2
      e6:	21 f0       	breq	.+8      	; 0xf0 <ComProcProcessSchema+0x70>
			return 1;
		pos += 3;
      e8:	23 96       	adiw	r28, 0x03	; 3
      ea:	e3 94       	inc	r14
      ec:	ed 14       	cp	r14, r13
      ee:	c1 f6       	brne	.-80     	; 0xa0 <ComProcProcessSchema+0x20>
      f0:	81 e0       	ldi	r24, 0x01	; 1
      f2:	90 e0       	ldi	r25, 0x00	; 0
      f4:	df 91       	pop	r29
      f6:	cf 91       	pop	r28
      f8:	1f 91       	pop	r17
      fa:	0f 91       	pop	r16
      fc:	ff 90       	pop	r15
      fe:	ef 90       	pop	r14
     100:	df 90       	pop	r13
     102:	08 95       	ret

00000104 <ComProcGetSchemaAddress>:
     104:	cf 92       	push	r12
     106:	df 92       	push	r13
     108:	ef 92       	push	r14
     10a:	ff 92       	push	r15
     10c:	0f 93       	push	r16
     10e:	1f 93       	push	r17
     110:	cf 93       	push	r28
     112:	df 93       	push	r29
     114:	80 e0       	ldi	r24, 0x00	; 0
     116:	90 e0       	ldi	r25, 0x00	; 0
     118:	28 d9       	rcall	.-3504   	; 0xfffff36a <__eeprom_end+0xff7ef36a>
     11a:	c8 2e       	mov	r12, r24
     11c:	dd 24       	eor	r13, r13
     11e:	c1 e0       	ldi	r28, 0x01	; 1
     120:	d0 e0       	ldi	r29, 0x00	; 0
     122:	31 c0       	rjmp	.+98     	; 0x186 <ComProcGetSchemaAddress+0x82>
     124:	8c 2f       	mov	r24, r28
     126:	9d 2f       	mov	r25, r29
     128:	20 d9       	rcall	.-3520   	; 0xfffff36a <__eeprom_end+0xff7ef36a>
     12a:	e8 2e       	mov	r14, r24
     12c:	80 91 e3 00 	lds	r24, 0x00E3
     130:	e8 16       	cp	r14, r24
     132:	31 f0       	breq	.+12     	; 0x140 <ComProcGetSchemaAddress+0x3c>
     134:	8e 2d       	mov	r24, r14
     136:	99 27       	eor	r25, r25
     138:	03 96       	adiw	r24, 0x03	; 3
     13a:	c8 0f       	add	r28, r24
     13c:	d9 1f       	adc	r29, r25
     13e:	22 c0       	rjmp	.+68     	; 0x184 <ComProcGetSchemaAddress+0x80>
     140:	0c 2f       	mov	r16, r28
     142:	1d 2f       	mov	r17, r29
     144:	0f 5f       	subi	r16, 0xFF	; 255
     146:	1f 4f       	sbci	r17, 0xFF	; 255
     148:	ff 24       	eor	r15, r15
     14a:	14 c0       	rjmp	.+40     	; 0x174 <ComProcGetSchemaAddress+0x70>
     14c:	cf 2d       	mov	r28, r15
     14e:	dd 27       	eor	r29, r29
     150:	91 2f       	mov	r25, r17
     152:	80 2f       	mov	r24, r16
     154:	8c 0f       	add	r24, r28
     156:	9d 1f       	adc	r25, r29
     158:	08 d9       	rcall	.-3568   	; 0xfffff36a <__eeprom_end+0xff7ef36a>
     15a:	28 2f       	mov	r18, r24
     15c:	8f 35       	cpi	r24, 0x5F	; 95
     15e:	49 f0       	breq	.+18     	; 0x172 <ComProcGetSchemaAddress+0x6e>
     160:	80 91 e6 00 	lds	r24, 0x00E6
     164:	90 91 e7 00 	lds	r25, 0x00E7
     168:	c8 0f       	add	r28, r24
     16a:	d9 1f       	adc	r29, r25
     16c:	88 81       	ld	r24, Y
     16e:	28 17       	cp	r18, r24
     170:	21 f4       	brne	.+8      	; 0x17a <ComProcGetSchemaAddress+0x76>
     172:	f3 94       	inc	r15
     174:	fe 14       	cp	r15, r14
     176:	51 f7       	brne	.-44     	; 0x14c <ComProcGetSchemaAddress+0x48>
     178:	0b c0       	rjmp	.+22     	; 0x190 <ComProcGetSchemaAddress+0x8c>
     17a:	d1 2f       	mov	r29, r17
     17c:	c0 2f       	mov	r28, r16
     17e:	22 96       	adiw	r28, 0x02	; 2
     180:	ce 0d       	add	r28, r14
     182:	d1 1d       	adc	r29, r1
     184:	d3 94       	inc	r13
     186:	dc 14       	cp	r13, r12
     188:	69 f6       	brne	.-102    	; 0x124 <ComProcGetSchemaAddress+0x20>
     18a:	80 e0       	ldi	r24, 0x00	; 0
     18c:	90 e0       	ldi	r25, 0x00	; 0
     18e:	13 c0       	rjmp	.+38     	; 0x1b6 <ComProcGetSchemaAddress+0xb2>
     190:	0e 0d       	add	r16, r14
     192:	11 1d       	adc	r17, r1
     194:	e0 2e       	mov	r14, r16
     196:	f1 2e       	mov	r15, r17
     198:	91 2f       	mov	r25, r17
     19a:	80 2f       	mov	r24, r16
     19c:	e6 d8       	rcall	.-3636   	; 0xfffff36a <__eeprom_end+0xff7ef36a>
     19e:	08 2f       	mov	r16, r24
     1a0:	11 27       	eor	r17, r17
     1a2:	10 2f       	mov	r17, r16
     1a4:	00 27       	eor	r16, r16
     1a6:	9f 2d       	mov	r25, r15
     1a8:	8e 2d       	mov	r24, r14
     1aa:	01 96       	adiw	r24, 0x01	; 1
     1ac:	de d8       	rcall	.-3652   	; 0xfffff36a <__eeprom_end+0xff7ef36a>
     1ae:	08 0f       	add	r16, r24
     1b0:	11 1d       	adc	r17, r1
     1b2:	91 2f       	mov	r25, r17
     1b4:	80 2f       	mov	r24, r16
     1b6:	df 91       	pop	r29
     1b8:	cf 91       	pop	r28
     1ba:	1f 91       	pop	r17
     1bc:	0f 91       	pop	r16
     1be:	ff 90       	pop	r15
     1c0:	ef 90       	pop	r14
     1c2:	df 90       	pop	r13
     1c4:	cf 90       	pop	r12
     1c6:	08 95       	ret

000001c8 <ComProcProcessInCommand>:
	}

	return 1;
}

static void ComProcFillInCommand (char* data, unsigned char size)
{
	unsigned char i;
	
	for (i = 0; i < size; i++)
		Buffers[BUFFER_IN_COMMAND_ID].Data[i] = data[i];

	Buffers[BUFFER_IN_COMMAND_ID].Size = size;
}

unsigned char ComProcProcessInCommand (void)
{
	unsigned short schemaAddress;

	schemaAddress = ComProcGetSchemaAddress ();
     1c8:	9d df       	rcall	.-198    	; 0x104 <ComProcGetSchemaAddress>
	if (schemaAddress != 0)
     1ca:	00 97       	sbiw	r24, 0x00	; 0
     1cc:	01 f1       	breq	.+64     	; 0x20e <ComProcProcessInCommand+0x46>
	{
		if (ComProcProcessSchema (schemaAddress))
     1ce:	58 df       	rcall	.-336    	; 0x80 <ComProcProcessSchema>
     1d0:	88 23       	and	r24, r24
     1d2:	19 f0       	breq	.+6      	; 0x1da <ComProcProcessInCommand+0x12>
     1d4:	81 e0       	ldi	r24, 0x01	; 1
     1d6:	90 e0       	ldi	r25, 0x00	; 0
     1d8:	08 95       	ret
     1da:	20 e0       	ldi	r18, 0x00	; 0
     1dc:	30 e0       	ldi	r19, 0x00	; 0
     1de:	a0 e6       	ldi	r26, 0x60	; 96
     1e0:	b0 e0       	ldi	r27, 0x00	; 0
     1e2:	e0 91 e6 00 	lds	r30, 0x00E6
     1e6:	f0 91 e7 00 	lds	r31, 0x00E7
     1ea:	e2 0f       	add	r30, r18
     1ec:	f3 1f       	adc	r31, r19
     1ee:	8d 91       	ld	r24, X+
     1f0:	80 83       	st	Z, r24
     1f2:	2f 5f       	subi	r18, 0xFF	; 255
     1f4:	3f 4f       	sbci	r19, 0xFF	; 255
     1f6:	26 30       	cpi	r18, 0x06	; 6
     1f8:	31 05       	cpc	r19, r1
     1fa:	99 f7       	brne	.-26     	; 0x1e2 <ComProcProcessInCommand+0x1a>
     1fc:	86 e0       	ldi	r24, 0x06	; 6
     1fe:	80 93 e3 00 	sts	0x00E3, r24
			return 1;
		
		ComProcFillInCommand (INTERNAL_ERROR_COMMAND, INTERNAL_ERROR_COMMAND_LENGTH);
		schemaAddress = ComProcGetSchemaAddress ();
     202:	80 df       	rcall	.-256    	; 0x104 <ComProcGetSchemaAddress>
		if (schemaAddress != 0)
     204:	00 97       	sbiw	r24, 0x00	; 0
     206:	19 f0       	breq	.+6      	; 0x20e <ComProcProcessInCommand+0x46>
			return ComProcProcessSchema (schemaAddress);
     208:	3b df       	rcall	.-394    	; 0x80 <ComProcProcessSchema>
     20a:	99 27       	eor	r25, r25
     20c:	08 95       	ret
     20e:	80 e0       	ldi	r24, 0x00	; 0
     210:	90 e0       	ldi	r25, 0x00	; 0

		return 0;
	}
		
	return 0;
}
     212:	08 95       	ret

00000214 <BlockConst3>:
}

unsigned char BlockConst3 (unsigned short paramsAddr)
{
	ComProcData.Memory [HALGetExtROMByte (paramsAddr)] = 3;
     214:	aa d8       	rcall	.-3756   	; 0xfffff36a <__eeprom_end+0xff7ef36a>
     216:	e8 ee       	ldi	r30, 0xE8	; 232
     218:	f0 e0       	ldi	r31, 0x00	; 0
     21a:	e8 0f       	add	r30, r24
     21c:	f1 1d       	adc	r31, r1
     21e:	83 e0       	ldi	r24, 0x03	; 3
     220:	80 83       	st	Z, r24
	return BLOCK_RES_SUCCESS;		
}
     222:	81 e0       	ldi	r24, 0x01	; 1
     224:	90 e0       	ldi	r25, 0x00	; 0
     226:	08 95       	ret

00000228 <BlockWord2DecStr>:
     228:	af 92       	push	r10
     22a:	bf 92       	push	r11
     22c:	cf 92       	push	r12
     22e:	df 92       	push	r13
     230:	ef 92       	push	r14
     232:	ff 92       	push	r15
     234:	0f 93       	push	r16
     236:	1f 93       	push	r17
     238:	cf 93       	push	r28
     23a:	df 93       	push	r29
     23c:	e8 2e       	mov	r14, r24
     23e:	f9 2e       	mov	r15, r25
     240:	94 d8       	rcall	.-3800   	; 0xfffff36a <__eeprom_end+0xff7ef36a>
     242:	08 2f       	mov	r16, r24
     244:	11 27       	eor	r17, r17
     246:	9f 2d       	mov	r25, r15
     248:	8e 2d       	mov	r24, r14
     24a:	02 96       	adiw	r24, 0x02	; 2
     24c:	8e d8       	rcall	.-3812   	; 0xfffff36a <__eeprom_end+0xff7ef36a>
     24e:	a8 2e       	mov	r10, r24
     250:	bb 24       	eor	r11, r11
     252:	08 51       	subi	r16, 0x18	; 24
     254:	1f 4f       	sbci	r17, 0xFF	; 255
     256:	f1 2f       	mov	r31, r17
     258:	e0 2f       	mov	r30, r16
     25a:	c0 80       	ld	r12, Z
     25c:	01 81       	ldd	r16, Z+1	; 0x01
     25e:	9f 2d       	mov	r25, r15
     260:	8e 2d       	mov	r24, r14
     262:	01 96       	adiw	r24, 0x01	; 1
     264:	82 d8       	rcall	.-3836   	; 0xfffff36a <__eeprom_end+0xff7ef36a>
     266:	e8 2f       	mov	r30, r24
     268:	ff 27       	eor	r31, r31
     26a:	e8 51       	subi	r30, 0x18	; 24
     26c:	ff 4f       	sbci	r31, 0xFF	; 255
     26e:	40 81       	ld	r20, Z
     270:	11 27       	eor	r17, r17
     272:	30 2f       	mov	r19, r16
     274:	22 27       	eor	r18, r18
     276:	dd 24       	eor	r13, r13
     278:	2c 29       	or	r18, r12
     27a:	3d 29       	or	r19, r13
     27c:	db 2d       	mov	r29, r11
     27e:	ca 2d       	mov	r28, r10
     280:	c3 51       	subi	r28, 0x13	; 19
     282:	df 4f       	sbci	r29, 0xFF	; 255
     284:	00 e0       	ldi	r16, 0x00	; 0
     286:	10 e0       	ldi	r17, 0x00	; 0
     288:	fb 2d       	mov	r31, r11
     28a:	ea 2d       	mov	r30, r10
     28c:	e4 1b       	sub	r30, r20
     28e:	f1 09       	sbc	r31, r1
     290:	e8 51       	subi	r30, 0x18	; 24
     292:	ff 4f       	sbci	r31, 0xFF	; 255
     294:	8e e2       	ldi	r24, 0x2E	; 46
     296:	e8 2e       	mov	r14, r24
     298:	40 17       	cp	r20, r16
     29a:	21 f4       	brne	.+8      	; 0x2a4 <__stack+0x45>
     29c:	44 23       	and	r20, r20
     29e:	11 f0       	breq	.+4      	; 0x2a4 <__stack+0x45>
     2a0:	e5 82       	std	Z+5, r14	; 0x05
     2a2:	0e c0       	rjmp	.+28     	; 0x2c0 <__stack+0x61>
     2a4:	93 2f       	mov	r25, r19
     2a6:	82 2f       	mov	r24, r18
     2a8:	6a e0       	ldi	r22, 0x0A	; 10
     2aa:	70 e0       	ldi	r23, 0x00	; 0
     2ac:	00 da       	rcall	.-3072   	; 0xfffff6ae <__eeprom_end+0xff7ef6ae>
     2ae:	80 5d       	subi	r24, 0xD0	; 208
     2b0:	88 83       	st	Y, r24
     2b2:	93 2f       	mov	r25, r19
     2b4:	82 2f       	mov	r24, r18
     2b6:	6a e0       	ldi	r22, 0x0A	; 10
     2b8:	70 e0       	ldi	r23, 0x00	; 0
     2ba:	f9 d9       	rcall	.-3086   	; 0xfffff6ae <__eeprom_end+0xff7ef6ae>
     2bc:	26 2f       	mov	r18, r22
     2be:	37 2f       	mov	r19, r23
     2c0:	0f 5f       	subi	r16, 0xFF	; 255
     2c2:	1f 4f       	sbci	r17, 0xFF	; 255
     2c4:	21 97       	sbiw	r28, 0x01	; 1
     2c6:	06 30       	cpi	r16, 0x06	; 6
     2c8:	11 05       	cpc	r17, r1
     2ca:	31 f7       	brne	.-52     	; 0x298 <__stack+0x39>
     2cc:	81 e0       	ldi	r24, 0x01	; 1
     2ce:	90 e0       	ldi	r25, 0x00	; 0
     2d0:	df 91       	pop	r29
     2d2:	cf 91       	pop	r28
     2d4:	1f 91       	pop	r17
     2d6:	0f 91       	pop	r16
     2d8:	ff 90       	pop	r15
     2da:	ef 90       	pop	r14
     2dc:	df 90       	pop	r13
     2de:	cf 90       	pop	r12
     2e0:	bf 90       	pop	r11
     2e2:	af 90       	pop	r10
     2e4:	08 95       	ret

000002e6 <BlockConst00>:
     2e6:	ef 92       	push	r14
     2e8:	ff 92       	push	r15
     2ea:	0f 93       	push	r16
     2ec:	1f 93       	push	r17
     2ee:	e8 2e       	mov	r14, r24
     2f0:	f9 2e       	mov	r15, r25
     2f2:	3b d8       	rcall	.-3978   	; 0xfffff36a <__eeprom_end+0xff7ef36a>
     2f4:	08 ee       	ldi	r16, 0xE8	; 232
     2f6:	10 e0       	ldi	r17, 0x00	; 0
     2f8:	f1 2f       	mov	r31, r17
     2fa:	e0 2f       	mov	r30, r16
     2fc:	e8 0f       	add	r30, r24
     2fe:	f1 1d       	adc	r31, r1
     300:	10 82       	st	Z, r1
     302:	9f 2d       	mov	r25, r15
     304:	8e 2d       	mov	r24, r14
     306:	31 d8       	rcall	.-3998   	; 0xfffff36a <__eeprom_end+0xff7ef36a>
     308:	08 0f       	add	r16, r24
     30a:	11 1d       	adc	r17, r1
     30c:	f1 2f       	mov	r31, r17
     30e:	e0 2f       	mov	r30, r16
     310:	11 82       	std	Z+1, r1	; 0x01
     312:	81 e0       	ldi	r24, 0x01	; 1
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	1f 91       	pop	r17
     318:	0f 91       	pop	r16
     31a:	ff 90       	pop	r15
     31c:	ef 90       	pop	r14
     31e:	08 95       	ret

00000320 <BlockAvgMean>:
     320:	cf 92       	push	r12
     322:	df 92       	push	r13
     324:	ef 92       	push	r14
     326:	ff 92       	push	r15
     328:	0f 93       	push	r16
     32a:	1f 93       	push	r17
     32c:	cf 93       	push	r28
     32e:	df 93       	push	r29
     330:	d9 2f       	mov	r29, r25
     332:	c8 2f       	mov	r28, r24
     334:	1a d8       	rcall	.-4044   	; 0xfffff36a <__eeprom_end+0xff7ef36a>
     336:	e8 2f       	mov	r30, r24
     338:	ff 27       	eor	r31, r31
     33a:	e8 51       	subi	r30, 0x18	; 24
     33c:	ff 4f       	sbci	r31, 0xFF	; 255
     33e:	80 81       	ld	r24, Z
     340:	88 23       	and	r24, r24
     342:	a9 f4       	brne	.+42     	; 0x36e <BlockAvgMean+0x4e>
     344:	0c 2f       	mov	r16, r28
     346:	1d 2f       	mov	r17, r29
     348:	0c 5f       	subi	r16, 0xFC	; 252
     34a:	1f 4f       	sbci	r17, 0xFF	; 255
     34c:	91 2f       	mov	r25, r17
     34e:	80 2f       	mov	r24, r16
     350:	0c d8       	rcall	.-4072   	; 0xfffff36a <__eeprom_end+0xff7ef36a>
     352:	e8 2f       	mov	r30, r24
     354:	ff 27       	eor	r31, r31
     356:	e8 51       	subi	r30, 0x18	; 24
     358:	ff 4f       	sbci	r31, 0xFF	; 255
     35a:	10 82       	st	Z, r1
     35c:	91 2f       	mov	r25, r17
     35e:	80 2f       	mov	r24, r16
     360:	04 d8       	rcall	.-4088   	; 0xfffff36a <__eeprom_end+0xff7ef36a>
     362:	e8 2f       	mov	r30, r24
     364:	ff 27       	eor	r31, r31
     366:	e8 51       	subi	r30, 0x18	; 24
     368:	ff 4f       	sbci	r31, 0xFF	; 255
     36a:	11 82       	std	Z+1, r1	; 0x01
     36c:	75 c0       	rjmp	.+234    	; 0x458 <BlockAvgMean+0x138>
     36e:	8c 2f       	mov	r24, r28
     370:	9d 2f       	mov	r25, r29
     372:	01 96       	adiw	r24, 0x01	; 1
     374:	fa d7       	rcall	.+4084   	; 0x136a <HALGetExtROMByte>
     376:	e8 2f       	mov	r30, r24
     378:	ff 27       	eor	r31, r31
     37a:	e8 51       	subi	r30, 0x18	; 24
     37c:	ff 4f       	sbci	r31, 0xFF	; 255
     37e:	10 81       	ld	r17, Z
     380:	8c 2f       	mov	r24, r28
     382:	9d 2f       	mov	r25, r29
     384:	02 96       	adiw	r24, 0x02	; 2
     386:	f1 d7       	rcall	.+4066   	; 0x136a <HALGetExtROMByte>
     388:	e8 2f       	mov	r30, r24
     38a:	ff 27       	eor	r31, r31
     38c:	e8 51       	subi	r30, 0x18	; 24
     38e:	ff 4f       	sbci	r31, 0xFF	; 255
     390:	c0 80       	ld	r12, Z
     392:	8c 2f       	mov	r24, r28
     394:	9d 2f       	mov	r25, r29
     396:	03 96       	adiw	r24, 0x03	; 3
     398:	e8 d7       	rcall	.+4048   	; 0x136a <HALGetExtROMByte>
     39a:	e8 2f       	mov	r30, r24
     39c:	ff 27       	eor	r31, r31
     39e:	e8 51       	subi	r30, 0x18	; 24
     3a0:	ff 4f       	sbci	r31, 0xFF	; 255
     3a2:	30 81       	ld	r19, Z
     3a4:	19 30       	cpi	r17, 0x09	; 9
     3a6:	70 f4       	brcc	.+28     	; 0x3c4 <BlockAvgMean+0xa4>
     3a8:	81 2f       	mov	r24, r17
     3aa:	99 27       	eor	r25, r25
     3ac:	67 e0       	ldi	r22, 0x07	; 7
     3ae:	70 e0       	ldi	r23, 0x00	; 0
     3b0:	60 d9       	rcall	.-3392   	; 0xfffff672 <__eeprom_end+0xff7ef672>
     3b2:	f9 2f       	mov	r31, r25
     3b4:	e8 2f       	mov	r30, r24
     3b6:	e7 55       	subi	r30, 0x57	; 87
     3b8:	ff 4f       	sbci	r31, 0xFF	; 255
     3ba:	82 81       	ldd	r24, Z+2	; 0x02
     3bc:	c8 16       	cp	r12, r24
     3be:	10 f4       	brcc	.+4      	; 0x3c4 <BlockAvgMean+0xa4>
     3c0:	38 17       	cp	r19, r24
     3c2:	10 f0       	brcs	.+4      	; 0x3c8 <BlockAvgMean+0xa8>
     3c4:	82 e0       	ldi	r24, 0x02	; 2
     3c6:	03 c0       	rjmp	.+6      	; 0x3ce <BlockAvgMean+0xae>
     3c8:	c3 16       	cp	r12, r19
     3ca:	30 f0       	brcs	.+12     	; 0x3d8 <BlockAvgMean+0xb8>
     3cc:	81 e0       	ldi	r24, 0x01	; 1
     3ce:	80 93 29 01 	sts	0x0129, r24
     3d2:	80 e0       	ldi	r24, 0x00	; 0
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	42 c0       	rjmp	.+132    	; 0x45c <BlockAvgMean+0x13c>
     3d8:	45 81       	ldd	r20, Z+5	; 0x05
     3da:	56 81       	ldd	r21, Z+6	; 0x06
     3dc:	23 2f       	mov	r18, r19
     3de:	2c 19       	sub	r18, r12
     3e0:	ee 24       	eor	r14, r14
     3e2:	ff 24       	eor	r15, r15
     3e4:	00 27       	eor	r16, r16
     3e6:	11 27       	eor	r17, r17
     3e8:	0f c0       	rjmp	.+30     	; 0x408 <BlockAvgMean+0xe8>
     3ea:	ec 2d       	mov	r30, r12
     3ec:	ff 27       	eor	r31, r31
     3ee:	ee 0f       	add	r30, r30
     3f0:	ff 1f       	adc	r31, r31
     3f2:	e4 0f       	add	r30, r20
     3f4:	f5 1f       	adc	r31, r21
     3f6:	80 81       	ld	r24, Z
     3f8:	91 81       	ldd	r25, Z+1	; 0x01
     3fa:	aa 27       	eor	r26, r26
     3fc:	bb 27       	eor	r27, r27
     3fe:	e8 0e       	add	r14, r24
     400:	f9 1e       	adc	r15, r25
     402:	0a 1f       	adc	r16, r26
     404:	1b 1f       	adc	r17, r27
     406:	c3 94       	inc	r12
     408:	3c 15       	cp	r19, r12
     40a:	78 f7       	brcc	.-34     	; 0x3ea <BlockAvgMean+0xca>
     40c:	2f 5f       	subi	r18, 0xFF	; 255
     40e:	33 27       	eor	r19, r19
     410:	44 27       	eor	r20, r20
     412:	55 27       	eor	r21, r21
     414:	91 2f       	mov	r25, r17
     416:	80 2f       	mov	r24, r16
     418:	7f 2d       	mov	r23, r15
     41a:	6e 2d       	mov	r22, r14
     41c:	5e d9       	rcall	.-3396   	; 0xfffff6da <__eeprom_end+0xff7ef6da>
     41e:	e2 2e       	mov	r14, r18
     420:	f3 2e       	mov	r15, r19
     422:	04 2f       	mov	r16, r20
     424:	15 2f       	mov	r17, r21
     426:	34 e0       	ldi	r19, 0x04	; 4
     428:	c3 2e       	mov	r12, r19
     42a:	d1 2c       	mov	r13, r1
     42c:	cc 0e       	add	r12, r28
     42e:	dd 1e       	adc	r13, r29
     430:	9d 2d       	mov	r25, r13
     432:	8c 2d       	mov	r24, r12
     434:	9a d7       	rcall	.+3892   	; 0x136a <HALGetExtROMByte>
     436:	e8 2f       	mov	r30, r24
     438:	ff 27       	eor	r31, r31
     43a:	e8 51       	subi	r30, 0x18	; 24
     43c:	ff 4f       	sbci	r31, 0xFF	; 255
     43e:	e0 82       	st	Z, r14
     440:	9d 2d       	mov	r25, r13
     442:	8c 2d       	mov	r24, r12
     444:	92 d7       	rcall	.+3876   	; 0x136a <HALGetExtROMByte>
     446:	e8 2f       	mov	r30, r24
     448:	ff 27       	eor	r31, r31
     44a:	e8 51       	subi	r30, 0x18	; 24
     44c:	ff 4f       	sbci	r31, 0xFF	; 255
     44e:	ef 2c       	mov	r14, r15
     450:	f0 2e       	mov	r15, r16
     452:	01 2f       	mov	r16, r17
     454:	11 27       	eor	r17, r17
     456:	e1 82       	std	Z+1, r14	; 0x01
     458:	81 e0       	ldi	r24, 0x01	; 1
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	df 91       	pop	r29
     45e:	cf 91       	pop	r28
     460:	1f 91       	pop	r17
     462:	0f 91       	pop	r16
     464:	ff 90       	pop	r15
     466:	ef 90       	pop	r14
     468:	df 90       	pop	r13
     46a:	cf 90       	pop	r12
     46c:	08 95       	ret

0000046e <BlockDiv>:
     46e:	0f 93       	push	r16
     470:	1f 93       	push	r17
     472:	cf 93       	push	r28
     474:	df 93       	push	r29
     476:	d9 2f       	mov	r29, r25
     478:	c8 2f       	mov	r28, r24
     47a:	77 d7       	rcall	.+3822   	; 0x136a <HALGetExtROMByte>
     47c:	e8 2f       	mov	r30, r24
     47e:	ff 27       	eor	r31, r31
     480:	e8 51       	subi	r30, 0x18	; 24
     482:	ff 4f       	sbci	r31, 0xFF	; 255
     484:	80 81       	ld	r24, Z
     486:	2c 2f       	mov	r18, r28
     488:	3d 2f       	mov	r19, r29
     48a:	2d 5f       	subi	r18, 0xFD	; 253
     48c:	3f 4f       	sbci	r19, 0xFF	; 255
     48e:	88 23       	and	r24, r24
     490:	49 f4       	brne	.+18     	; 0x4a4 <BlockDiv+0x36>
     492:	93 2f       	mov	r25, r19
     494:	82 2f       	mov	r24, r18
     496:	69 d7       	rcall	.+3794   	; 0x136a <HALGetExtROMByte>
     498:	e8 2f       	mov	r30, r24
     49a:	ff 27       	eor	r31, r31
     49c:	e8 51       	subi	r30, 0x18	; 24
     49e:	ff 4f       	sbci	r31, 0xFF	; 255
     4a0:	10 82       	st	Z, r1
     4a2:	1d c0       	rjmp	.+58     	; 0x4de <BlockDiv+0x70>
     4a4:	93 2f       	mov	r25, r19
     4a6:	82 2f       	mov	r24, r18
     4a8:	60 d7       	rcall	.+3776   	; 0x136a <HALGetExtROMByte>
     4aa:	08 2f       	mov	r16, r24
     4ac:	8c 2f       	mov	r24, r28
     4ae:	9d 2f       	mov	r25, r29
     4b0:	01 96       	adiw	r24, 0x01	; 1
     4b2:	5b d7       	rcall	.+3766   	; 0x136a <HALGetExtROMByte>
     4b4:	e8 2f       	mov	r30, r24
     4b6:	ff 27       	eor	r31, r31
     4b8:	e8 51       	subi	r30, 0x18	; 24
     4ba:	ff 4f       	sbci	r31, 0xFF	; 255
     4bc:	10 81       	ld	r17, Z
     4be:	8c 2f       	mov	r24, r28
     4c0:	9d 2f       	mov	r25, r29
     4c2:	02 96       	adiw	r24, 0x02	; 2
     4c4:	52 d7       	rcall	.+3748   	; 0x136a <HALGetExtROMByte>
     4c6:	a0 2f       	mov	r26, r16
     4c8:	bb 27       	eor	r27, r27
     4ca:	a8 51       	subi	r26, 0x18	; 24
     4cc:	bf 4f       	sbci	r27, 0xFF	; 255
     4ce:	e8 2f       	mov	r30, r24
     4d0:	ff 27       	eor	r31, r31
     4d2:	e8 51       	subi	r30, 0x18	; 24
     4d4:	ff 4f       	sbci	r31, 0xFF	; 255
     4d6:	60 81       	ld	r22, Z
     4d8:	81 2f       	mov	r24, r17
     4da:	dd d8       	rcall	.-3654   	; 0xfffff696 <__eeprom_end+0xff7ef696>
     4dc:	8c 93       	st	X, r24
     4de:	81 e0       	ldi	r24, 0x01	; 1
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	df 91       	pop	r29
     4e4:	cf 91       	pop	r28
     4e6:	1f 91       	pop	r17
     4e8:	0f 91       	pop	r16
     4ea:	08 95       	ret

000004ec <BlockBufLen>:
     4ec:	1f 93       	push	r17
     4ee:	cf 93       	push	r28
     4f0:	df 93       	push	r29
     4f2:	d9 2f       	mov	r29, r25
     4f4:	c8 2f       	mov	r28, r24
     4f6:	39 d7       	rcall	.+3698   	; 0x136a <HALGetExtROMByte>
     4f8:	e8 2f       	mov	r30, r24
     4fa:	ff 27       	eor	r31, r31
     4fc:	e8 51       	subi	r30, 0x18	; 24
     4fe:	ff 4f       	sbci	r31, 0xFF	; 255
     500:	10 81       	ld	r17, Z
     502:	19 30       	cpi	r17, 0x09	; 9
     504:	30 f0       	brcs	.+12     	; 0x512 <BlockBufLen+0x26>
     506:	82 e0       	ldi	r24, 0x02	; 2
     508:	80 93 29 01 	sts	0x0129, r24
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	17 c0       	rjmp	.+46     	; 0x540 <BlockBufLen+0x54>
     512:	8c 2f       	mov	r24, r28
     514:	9d 2f       	mov	r25, r29
     516:	01 96       	adiw	r24, 0x01	; 1
     518:	28 d7       	rcall	.+3664   	; 0x136a <HALGetExtROMByte>
     51a:	e8 2f       	mov	r30, r24
     51c:	ff 27       	eor	r31, r31
     51e:	e8 51       	subi	r30, 0x18	; 24
     520:	ff 4f       	sbci	r31, 0xFF	; 255
     522:	81 2f       	mov	r24, r17
     524:	99 27       	eor	r25, r25
     526:	67 e0       	ldi	r22, 0x07	; 7
     528:	70 e0       	ldi	r23, 0x00	; 0
     52a:	a3 d8       	rcall	.-3770   	; 0xfffff672 <__eeprom_end+0xff7ef672>
     52c:	b9 2f       	mov	r27, r25
     52e:	a8 2f       	mov	r26, r24
     530:	a7 55       	subi	r26, 0x57	; 87
     532:	bf 4f       	sbci	r27, 0xFF	; 255
     534:	db 2f       	mov	r29, r27
     536:	ca 2f       	mov	r28, r26
     538:	8a 81       	ldd	r24, Y+2	; 0x02
     53a:	80 83       	st	Z, r24
     53c:	81 e0       	ldi	r24, 0x01	; 1
     53e:	90 e0       	ldi	r25, 0x00	; 0
     540:	df 91       	pop	r29
     542:	cf 91       	pop	r28
     544:	1f 91       	pop	r17
     546:	08 95       	ret

00000548 <BlockBitToByte>:
     548:	df 92       	push	r13
     54a:	ef 92       	push	r14
     54c:	ff 92       	push	r15
     54e:	0f 93       	push	r16
     550:	1f 93       	push	r17
     552:	cf 93       	push	r28
     554:	df 93       	push	r29
     556:	e8 2e       	mov	r14, r24
     558:	f9 2e       	mov	r15, r25
     55a:	dd 24       	eor	r13, r13
     55c:	00 e0       	ldi	r16, 0x00	; 0
     55e:	10 e0       	ldi	r17, 0x00	; 0
     560:	d9 2f       	mov	r29, r25
     562:	c8 2f       	mov	r28, r24
     564:	d6 94       	lsr	r13
     566:	8c 2f       	mov	r24, r28
     568:	9d 2f       	mov	r25, r29
     56a:	ff d6       	rcall	.+3582   	; 0x136a <HALGetExtROMByte>
     56c:	e8 2f       	mov	r30, r24
     56e:	ff 27       	eor	r31, r31
     570:	e8 51       	subi	r30, 0x18	; 24
     572:	ff 4f       	sbci	r31, 0xFF	; 255
     574:	80 81       	ld	r24, Z
     576:	88 23       	and	r24, r24
     578:	11 f0       	breq	.+4      	; 0x57e <BlockBitToByte+0x36>
     57a:	80 e8       	ldi	r24, 0x80	; 128
     57c:	d8 2a       	or	r13, r24
     57e:	0f 5f       	subi	r16, 0xFF	; 255
     580:	1f 4f       	sbci	r17, 0xFF	; 255
     582:	21 96       	adiw	r28, 0x01	; 1
     584:	08 30       	cpi	r16, 0x08	; 8
     586:	11 05       	cpc	r17, r1
     588:	69 f7       	brne	.-38     	; 0x564 <BlockBitToByte+0x1c>
     58a:	9f 2d       	mov	r25, r15
     58c:	8e 2d       	mov	r24, r14
     58e:	08 96       	adiw	r24, 0x08	; 8
     590:	ec d6       	rcall	.+3544   	; 0x136a <HALGetExtROMByte>
     592:	e8 2f       	mov	r30, r24
     594:	ff 27       	eor	r31, r31
     596:	e8 51       	subi	r30, 0x18	; 24
     598:	ff 4f       	sbci	r31, 0xFF	; 255
     59a:	d0 82       	st	Z, r13
     59c:	81 e0       	ldi	r24, 0x01	; 1
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	df 91       	pop	r29
     5a2:	cf 91       	pop	r28
     5a4:	1f 91       	pop	r17
     5a6:	0f 91       	pop	r16
     5a8:	ff 90       	pop	r15
     5aa:	ef 90       	pop	r14
     5ac:	df 90       	pop	r13
     5ae:	08 95       	ret

000005b0 <BlockByteToBit>:
     5b0:	ef 92       	push	r14
     5b2:	ff 92       	push	r15
     5b4:	0f 93       	push	r16
     5b6:	1f 93       	push	r17
     5b8:	08 2f       	mov	r16, r24
     5ba:	19 2f       	mov	r17, r25
     5bc:	d6 d6       	rcall	.+3500   	; 0x136a <HALGetExtROMByte>
     5be:	e8 2f       	mov	r30, r24
     5c0:	ff 27       	eor	r31, r31
     5c2:	e8 51       	subi	r30, 0x18	; 24
     5c4:	ff 4f       	sbci	r31, 0xFF	; 255
     5c6:	f0 80       	ld	r15, Z
     5c8:	0f 5f       	subi	r16, 0xFF	; 255
     5ca:	1f 4f       	sbci	r17, 0xFF	; 255
     5cc:	71 e0       	ldi	r23, 0x01	; 1
     5ce:	e7 2e       	mov	r14, r23
     5d0:	91 2f       	mov	r25, r17
     5d2:	80 2f       	mov	r24, r16
     5d4:	ca d6       	rcall	.+3476   	; 0x136a <HALGetExtROMByte>
     5d6:	e8 2f       	mov	r30, r24
     5d8:	ff 27       	eor	r31, r31
     5da:	e8 51       	subi	r30, 0x18	; 24
     5dc:	ff 4f       	sbci	r31, 0xFF	; 255
     5de:	8f 2d       	mov	r24, r15
     5e0:	81 70       	andi	r24, 0x01	; 1
     5e2:	80 83       	st	Z, r24
     5e4:	f6 94       	lsr	r15
     5e6:	e3 94       	inc	r14
     5e8:	0f 5f       	subi	r16, 0xFF	; 255
     5ea:	1f 4f       	sbci	r17, 0xFF	; 255
     5ec:	89 e0       	ldi	r24, 0x09	; 9
     5ee:	e8 16       	cp	r14, r24
     5f0:	79 f7       	brne	.-34     	; 0x5d0 <BlockByteToBit+0x20>
     5f2:	81 e0       	ldi	r24, 0x01	; 1
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	1f 91       	pop	r17
     5f8:	0f 91       	pop	r16
     5fa:	ff 90       	pop	r15
     5fc:	ef 90       	pop	r14
     5fe:	08 95       	ret

00000600 <BlockWordToHexStr>:
     600:	0f 93       	push	r16
     602:	1f 93       	push	r17
     604:	cf 93       	push	r28
     606:	df 93       	push	r29
     608:	08 2f       	mov	r16, r24
     60a:	19 2f       	mov	r17, r25
     60c:	01 96       	adiw	r24, 0x01	; 1
     60e:	ad d6       	rcall	.+3418   	; 0x136a <HALGetExtROMByte>
     610:	c8 2f       	mov	r28, r24
     612:	dd 27       	eor	r29, r29
     614:	91 2f       	mov	r25, r17
     616:	80 2f       	mov	r24, r16
     618:	a8 d6       	rcall	.+3408   	; 0x136a <HALGetExtROMByte>
     61a:	a8 2f       	mov	r26, r24
     61c:	bb 27       	eor	r27, r27
     61e:	fb 2f       	mov	r31, r27
     620:	ea 2f       	mov	r30, r26
     622:	e8 51       	subi	r30, 0x18	; 24
     624:	ff 4f       	sbci	r31, 0xFF	; 255
     626:	80 81       	ld	r24, Z
     628:	28 2f       	mov	r18, r24
     62a:	22 95       	swap	r18
     62c:	2f 70       	andi	r18, 0x0F	; 15
     62e:	98 2f       	mov	r25, r24
     630:	9f 70       	andi	r25, 0x0F	; 15
     632:	9a 30       	cpi	r25, 0x0A	; 10
     634:	10 f4       	brcc	.+4      	; 0x63a <BlockWordToHexStr+0x3a>
     636:	90 5d       	subi	r25, 0xD0	; 208
     638:	07 c0       	rjmp	.+14     	; 0x648 <BlockWordToHexStr+0x48>
     63a:	89 2f       	mov	r24, r25
     63c:	8a 50       	subi	r24, 0x0A	; 10
     63e:	86 30       	cpi	r24, 0x06	; 6
     640:	10 f0       	brcs	.+4      	; 0x646 <BlockWordToHexStr+0x46>
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	01 c0       	rjmp	.+2      	; 0x648 <BlockWordToHexStr+0x48>
     646:	99 5c       	subi	r25, 0xC9	; 201
     648:	2a 30       	cpi	r18, 0x0A	; 10
     64a:	18 f4       	brcc	.+6      	; 0x652 <BlockWordToHexStr+0x52>
     64c:	82 2f       	mov	r24, r18
     64e:	80 5d       	subi	r24, 0xD0	; 208
     650:	08 c0       	rjmp	.+16     	; 0x662 <BlockWordToHexStr+0x62>
     652:	82 2f       	mov	r24, r18
     654:	8a 50       	subi	r24, 0x0A	; 10
     656:	86 30       	cpi	r24, 0x06	; 6
     658:	10 f0       	brcs	.+4      	; 0x65e <BlockWordToHexStr+0x5e>
     65a:	80 e0       	ldi	r24, 0x00	; 0
     65c:	02 c0       	rjmp	.+4      	; 0x662 <BlockWordToHexStr+0x62>
     65e:	82 2f       	mov	r24, r18
     660:	89 5c       	subi	r24, 0xC9	; 201
     662:	fd 2f       	mov	r31, r29
     664:	ec 2f       	mov	r30, r28
     666:	e8 51       	subi	r30, 0x18	; 24
     668:	ff 4f       	sbci	r31, 0xFF	; 255
     66a:	82 83       	std	Z+2, r24	; 0x02
     66c:	93 83       	std	Z+3, r25	; 0x03
     66e:	a8 51       	subi	r26, 0x18	; 24
     670:	bf 4f       	sbci	r27, 0xFF	; 255
     672:	fb 2f       	mov	r31, r27
     674:	ea 2f       	mov	r30, r26
     676:	81 81       	ldd	r24, Z+1	; 0x01
     678:	98 2f       	mov	r25, r24
     67a:	92 95       	swap	r25
     67c:	9f 70       	andi	r25, 0x0F	; 15
     67e:	e8 2f       	mov	r30, r24
     680:	ef 70       	andi	r30, 0x0F	; 15
     682:	ea 30       	cpi	r30, 0x0A	; 10
     684:	18 f4       	brcc	.+6      	; 0x68c <BlockWordToHexStr+0x8c>
     686:	2e 2f       	mov	r18, r30
     688:	20 5d       	subi	r18, 0xD0	; 208
     68a:	08 c0       	rjmp	.+16     	; 0x69c <BlockWordToHexStr+0x9c>
     68c:	8e 2f       	mov	r24, r30
     68e:	8a 50       	subi	r24, 0x0A	; 10
     690:	86 30       	cpi	r24, 0x06	; 6
     692:	10 f0       	brcs	.+4      	; 0x698 <BlockWordToHexStr+0x98>
     694:	20 e0       	ldi	r18, 0x00	; 0
     696:	02 c0       	rjmp	.+4      	; 0x69c <BlockWordToHexStr+0x9c>
     698:	2e 2f       	mov	r18, r30
     69a:	29 5c       	subi	r18, 0xC9	; 201
     69c:	9a 30       	cpi	r25, 0x0A	; 10
     69e:	18 f4       	brcc	.+6      	; 0x6a6 <BlockWordToHexStr+0xa6>
     6a0:	89 2f       	mov	r24, r25
     6a2:	80 5d       	subi	r24, 0xD0	; 208
     6a4:	08 c0       	rjmp	.+16     	; 0x6b6 <BlockWordToHexStr+0xb6>
     6a6:	89 2f       	mov	r24, r25
     6a8:	8a 50       	subi	r24, 0x0A	; 10
     6aa:	86 30       	cpi	r24, 0x06	; 6
     6ac:	10 f0       	brcs	.+4      	; 0x6b2 <BlockWordToHexStr+0xb2>
     6ae:	80 e0       	ldi	r24, 0x00	; 0
     6b0:	02 c0       	rjmp	.+4      	; 0x6b6 <BlockWordToHexStr+0xb6>
     6b2:	89 2f       	mov	r24, r25
     6b4:	89 5c       	subi	r24, 0xC9	; 201
     6b6:	fd 2f       	mov	r31, r29
     6b8:	ec 2f       	mov	r30, r28
     6ba:	e8 51       	subi	r30, 0x18	; 24
     6bc:	ff 4f       	sbci	r31, 0xFF	; 255
     6be:	80 83       	st	Z, r24
     6c0:	21 83       	std	Z+1, r18	; 0x01
     6c2:	81 e0       	ldi	r24, 0x01	; 1
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	df 91       	pop	r29
     6c8:	cf 91       	pop	r28
     6ca:	1f 91       	pop	r17
     6cc:	0f 91       	pop	r16
     6ce:	08 95       	ret

000006d0 <BlockHexStrToWord>:
     6d0:	ff 92       	push	r15
     6d2:	0f 93       	push	r16
     6d4:	1f 93       	push	r17
     6d6:	08 2f       	mov	r16, r24
     6d8:	19 2f       	mov	r17, r25
     6da:	47 d6       	rcall	.+3214   	; 0x136a <HALGetExtROMByte>
     6dc:	f8 2e       	mov	r15, r24
     6de:	91 2f       	mov	r25, r17
     6e0:	80 2f       	mov	r24, r16
     6e2:	01 96       	adiw	r24, 0x01	; 1
     6e4:	42 d6       	rcall	.+3204   	; 0x136a <HALGetExtROMByte>
     6e6:	38 2f       	mov	r19, r24
     6e8:	ef 2d       	mov	r30, r15
     6ea:	ff 27       	eor	r31, r31
     6ec:	e8 51       	subi	r30, 0x18	; 24
     6ee:	ff 4f       	sbci	r31, 0xFF	; 255
     6f0:	93 81       	ldd	r25, Z+3	; 0x03
     6f2:	29 2f       	mov	r18, r25
     6f4:	20 53       	subi	r18, 0x30	; 48
     6f6:	2a 30       	cpi	r18, 0x0A	; 10
     6f8:	28 f0       	brcs	.+10     	; 0x704 <BlockHexStrToWord+0x34>
     6fa:	89 2f       	mov	r24, r25
     6fc:	81 54       	subi	r24, 0x41	; 65
     6fe:	86 30       	cpi	r24, 0x06	; 6
     700:	70 f5       	brcc	.+92     	; 0x75e <BlockHexStrToWord+0x8e>
     702:	27 50       	subi	r18, 0x07	; 7
     704:	92 81       	ldd	r25, Z+2	; 0x02
     706:	89 2f       	mov	r24, r25
     708:	80 53       	subi	r24, 0x30	; 48
     70a:	8a 30       	cpi	r24, 0x0A	; 10
     70c:	20 f0       	brcs	.+8      	; 0x716 <BlockHexStrToWord+0x46>
     70e:	81 51       	subi	r24, 0x11	; 17
     710:	86 30       	cpi	r24, 0x06	; 6
     712:	28 f5       	brcc	.+74     	; 0x75e <BlockHexStrToWord+0x8e>
     714:	86 5f       	subi	r24, 0xF6	; 246
     716:	a3 2f       	mov	r26, r19
     718:	bb 27       	eor	r27, r27
     71a:	a8 51       	subi	r26, 0x18	; 24
     71c:	bf 4f       	sbci	r27, 0xFF	; 255
     71e:	82 95       	swap	r24
     720:	80 7f       	andi	r24, 0xF0	; 240
     722:	82 2b       	or	r24, r18
     724:	8c 93       	st	X, r24
     726:	91 81       	ldd	r25, Z+1	; 0x01
     728:	29 2f       	mov	r18, r25
     72a:	20 53       	subi	r18, 0x30	; 48
     72c:	2a 30       	cpi	r18, 0x0A	; 10
     72e:	28 f0       	brcs	.+10     	; 0x73a <BlockHexStrToWord+0x6a>
     730:	89 2f       	mov	r24, r25
     732:	81 54       	subi	r24, 0x41	; 65
     734:	86 30       	cpi	r24, 0x06	; 6
     736:	98 f4       	brcc	.+38     	; 0x75e <BlockHexStrToWord+0x8e>
     738:	27 50       	subi	r18, 0x07	; 7
     73a:	90 81       	ld	r25, Z
     73c:	89 2f       	mov	r24, r25
     73e:	80 53       	subi	r24, 0x30	; 48
     740:	8a 30       	cpi	r24, 0x0A	; 10
     742:	20 f0       	brcs	.+8      	; 0x74c <BlockHexStrToWord+0x7c>
     744:	81 51       	subi	r24, 0x11	; 17
     746:	86 30       	cpi	r24, 0x06	; 6
     748:	50 f4       	brcc	.+20     	; 0x75e <BlockHexStrToWord+0x8e>
     74a:	86 5f       	subi	r24, 0xF6	; 246
     74c:	82 95       	swap	r24
     74e:	80 7f       	andi	r24, 0xF0	; 240
     750:	82 2b       	or	r24, r18
     752:	fb 2f       	mov	r31, r27
     754:	ea 2f       	mov	r30, r26
     756:	81 83       	std	Z+1, r24	; 0x01
     758:	81 e0       	ldi	r24, 0x01	; 1
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	05 c0       	rjmp	.+10     	; 0x768 <BlockHexStrToWord+0x98>
     75e:	81 e0       	ldi	r24, 0x01	; 1
     760:	80 93 29 01 	sts	0x0129, r24
     764:	80 e0       	ldi	r24, 0x00	; 0
     766:	90 e0       	ldi	r25, 0x00	; 0
     768:	1f 91       	pop	r17
     76a:	0f 91       	pop	r16
     76c:	ff 90       	pop	r15
     76e:	08 95       	ret

00000770 <BlockInCommandBuffId>:
     770:	fc d5       	rcall	.+3064   	; 0x136a <HALGetExtROMByte>
     772:	e8 ee       	ldi	r30, 0xE8	; 232
     774:	f0 e0       	ldi	r31, 0x00	; 0
     776:	e8 0f       	add	r30, r24
     778:	f1 1d       	adc	r31, r1
     77a:	88 e0       	ldi	r24, 0x08	; 8
     77c:	80 83       	st	Z, r24
     77e:	81 e0       	ldi	r24, 0x01	; 1
     780:	90 e0       	ldi	r25, 0x00	; 0
     782:	08 95       	ret

00000784 <BlockCRCError>:
     784:	f2 d5       	rcall	.+3044   	; 0x136a <HALGetExtROMByte>
     786:	e8 2f       	mov	r30, r24
     788:	ff 27       	eor	r31, r31
     78a:	e8 51       	subi	r30, 0x18	; 24
     78c:	ff 4f       	sbci	r31, 0xFF	; 255
     78e:	80 81       	ld	r24, Z
     790:	88 23       	and	r24, r24
     792:	19 f4       	brne	.+6      	; 0x79a <BlockCRCError+0x16>
     794:	81 e0       	ldi	r24, 0x01	; 1
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	08 95       	ret
     79a:	83 e0       	ldi	r24, 0x03	; 3
     79c:	80 93 29 01 	sts	0x0129, r24
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	08 95       	ret

000007a6 <BlockCRC>:
     7a6:	1f 93       	push	r17
     7a8:	cf 93       	push	r28
     7aa:	df 93       	push	r29
     7ac:	d9 2f       	mov	r29, r25
     7ae:	c8 2f       	mov	r28, r24
     7b0:	02 96       	adiw	r24, 0x02	; 2
     7b2:	db d5       	rcall	.+2998   	; 0x136a <HALGetExtROMByte>
     7b4:	e8 2f       	mov	r30, r24
     7b6:	ff 27       	eor	r31, r31
     7b8:	e8 51       	subi	r30, 0x18	; 24
     7ba:	ff 4f       	sbci	r31, 0xFF	; 255
     7bc:	80 81       	ld	r24, Z
     7be:	88 23       	and	r24, r24
     7c0:	09 f4       	brne	.+2      	; 0x7c4 <BlockCRC+0x1e>
     7c2:	4a c0       	rjmp	.+148    	; 0x858 <BlockCRC+0xb2>
     7c4:	8c 2f       	mov	r24, r28
     7c6:	9d 2f       	mov	r25, r29
     7c8:	d0 d5       	rcall	.+2976   	; 0x136a <HALGetExtROMByte>
     7ca:	e8 2f       	mov	r30, r24
     7cc:	ff 27       	eor	r31, r31
     7ce:	e8 51       	subi	r30, 0x18	; 24
     7d0:	ff 4f       	sbci	r31, 0xFF	; 255
     7d2:	10 81       	ld	r17, Z
     7d4:	19 30       	cpi	r17, 0x09	; 9
     7d6:	b8 f4       	brcc	.+46     	; 0x806 <BlockCRC+0x60>
     7d8:	8c 2f       	mov	r24, r28
     7da:	9d 2f       	mov	r25, r29
     7dc:	01 96       	adiw	r24, 0x01	; 1
     7de:	c5 d5       	rcall	.+2954   	; 0x136a <HALGetExtROMByte>
     7e0:	e8 2f       	mov	r30, r24
     7e2:	ff 27       	eor	r31, r31
     7e4:	e8 51       	subi	r30, 0x18	; 24
     7e6:	ff 4f       	sbci	r31, 0xFF	; 255
     7e8:	20 81       	ld	r18, Z
     7ea:	81 2f       	mov	r24, r17
     7ec:	99 27       	eor	r25, r25
     7ee:	67 e0       	ldi	r22, 0x07	; 7
     7f0:	70 e0       	ldi	r23, 0x00	; 0
     7f2:	3f d7       	rcall	.+3710   	; 0x1672 <__mulhi3>
     7f4:	b9 2f       	mov	r27, r25
     7f6:	a8 2f       	mov	r26, r24
     7f8:	a7 55       	subi	r26, 0x57	; 87
     7fa:	bf 4f       	sbci	r27, 0xFF	; 255
     7fc:	fb 2f       	mov	r31, r27
     7fe:	ea 2f       	mov	r30, r26
     800:	82 81       	ldd	r24, Z+2	; 0x02
     802:	82 17       	cp	r24, r18
     804:	30 f4       	brcc	.+12     	; 0x812 <BlockCRC+0x6c>
     806:	82 e0       	ldi	r24, 0x02	; 2
     808:	80 93 29 01 	sts	0x0129, r24
     80c:	80 e0       	ldi	r24, 0x00	; 0
     80e:	90 e0       	ldi	r25, 0x00	; 0
     810:	25 c0       	rjmp	.+74     	; 0x85c <BlockCRC+0xb6>
     812:	fb 2f       	mov	r31, r27
     814:	ea 2f       	mov	r30, r26
     816:	64 81       	ldd	r22, Z+4	; 0x04
     818:	82 2f       	mov	r24, r18
     81a:	22 d7       	rcall	.+3652   	; 0x1660 <__mulqi3>
     81c:	98 2f       	mov	r25, r24
     81e:	a5 81       	ldd	r26, Z+5	; 0x05
     820:	b6 81       	ldd	r27, Z+6	; 0x06
     822:	1f ef       	ldi	r17, 0xFF	; 255
     824:	0e c0       	rjmp	.+28     	; 0x842 <BlockCRC+0x9c>
     826:	8c 91       	ld	r24, X
     828:	18 27       	eor	r17, r24
     82a:	80 e0       	ldi	r24, 0x00	; 0
     82c:	21 e3       	ldi	r18, 0x31	; 49
     82e:	17 ff       	sbrs	r17, 7
     830:	03 c0       	rjmp	.+6      	; 0x838 <BlockCRC+0x92>
     832:	11 0f       	add	r17, r17
     834:	12 27       	eor	r17, r18
     836:	01 c0       	rjmp	.+2      	; 0x83a <BlockCRC+0x94>
     838:	11 0f       	add	r17, r17
     83a:	8f 5f       	subi	r24, 0xFF	; 255
     83c:	88 30       	cpi	r24, 0x08	; 8
     83e:	b9 f7       	brne	.-18     	; 0x82e <BlockCRC+0x88>
     840:	11 96       	adiw	r26, 0x01	; 1
     842:	91 50       	subi	r25, 0x01	; 1
     844:	80 f7       	brcc	.-32     	; 0x826 <BlockCRC+0x80>
     846:	8c 2f       	mov	r24, r28
     848:	9d 2f       	mov	r25, r29
     84a:	04 96       	adiw	r24, 0x04	; 4
     84c:	8e d5       	rcall	.+2844   	; 0x136a <HALGetExtROMByte>
     84e:	e8 2f       	mov	r30, r24
     850:	ff 27       	eor	r31, r31
     852:	e8 51       	subi	r30, 0x18	; 24
     854:	ff 4f       	sbci	r31, 0xFF	; 255
     856:	10 83       	st	Z, r17
     858:	81 e0       	ldi	r24, 0x01	; 1
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	df 91       	pop	r29
     85e:	cf 91       	pop	r28
     860:	1f 91       	pop	r17
     862:	08 95       	ret

00000864 <BlockAnd>:
     864:	1f 93       	push	r17
     866:	cf 93       	push	r28
     868:	df 93       	push	r29
     86a:	d9 2f       	mov	r29, r25
     86c:	c8 2f       	mov	r28, r24
     86e:	02 96       	adiw	r24, 0x02	; 2
     870:	7c d5       	rcall	.+2808   	; 0x136a <HALGetExtROMByte>
     872:	18 2f       	mov	r17, r24
     874:	8c 2f       	mov	r24, r28
     876:	9d 2f       	mov	r25, r29
     878:	78 d5       	rcall	.+2800   	; 0x136a <HALGetExtROMByte>
     87a:	e8 2f       	mov	r30, r24
     87c:	ff 27       	eor	r31, r31
     87e:	e8 51       	subi	r30, 0x18	; 24
     880:	ff 4f       	sbci	r31, 0xFF	; 255
     882:	80 81       	ld	r24, Z
     884:	88 23       	and	r24, r24
     886:	71 f0       	breq	.+28     	; 0x8a4 <BlockAnd+0x40>
     888:	8c 2f       	mov	r24, r28
     88a:	9d 2f       	mov	r25, r29
     88c:	01 96       	adiw	r24, 0x01	; 1
     88e:	6d d5       	rcall	.+2778   	; 0x136a <HALGetExtROMByte>
     890:	e8 2f       	mov	r30, r24
     892:	ff 27       	eor	r31, r31
     894:	e8 51       	subi	r30, 0x18	; 24
     896:	ff 4f       	sbci	r31, 0xFF	; 255
     898:	80 81       	ld	r24, Z
     89a:	88 23       	and	r24, r24
     89c:	19 f0       	breq	.+6      	; 0x8a4 <BlockAnd+0x40>
     89e:	81 e0       	ldi	r24, 0x01	; 1
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	02 c0       	rjmp	.+4      	; 0x8a8 <BlockAnd+0x44>
     8a4:	80 e0       	ldi	r24, 0x00	; 0
     8a6:	90 e0       	ldi	r25, 0x00	; 0
     8a8:	e1 2f       	mov	r30, r17
     8aa:	ff 27       	eor	r31, r31
     8ac:	e8 51       	subi	r30, 0x18	; 24
     8ae:	ff 4f       	sbci	r31, 0xFF	; 255
     8b0:	80 83       	st	Z, r24
     8b2:	81 e0       	ldi	r24, 0x01	; 1
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	df 91       	pop	r29
     8b8:	cf 91       	pop	r28
     8ba:	1f 91       	pop	r17
     8bc:	08 95       	ret

000008be <BlockSortBuf>:
     8be:	ef 92       	push	r14
     8c0:	ff 92       	push	r15
     8c2:	0f 93       	push	r16
     8c4:	1f 93       	push	r17
     8c6:	cf 93       	push	r28
     8c8:	df 93       	push	r29
     8ca:	08 2f       	mov	r16, r24
     8cc:	19 2f       	mov	r17, r25
     8ce:	4d d5       	rcall	.+2714   	; 0x136a <HALGetExtROMByte>
     8d0:	e8 2f       	mov	r30, r24
     8d2:	ff 27       	eor	r31, r31
     8d4:	e8 51       	subi	r30, 0x18	; 24
     8d6:	ff 4f       	sbci	r31, 0xFF	; 255
     8d8:	f0 80       	ld	r15, Z
     8da:	91 2f       	mov	r25, r17
     8dc:	80 2f       	mov	r24, r16
     8de:	03 96       	adiw	r24, 0x03	; 3
     8e0:	44 d5       	rcall	.+2696   	; 0x136a <HALGetExtROMByte>
     8e2:	e8 2f       	mov	r30, r24
     8e4:	ff 27       	eor	r31, r31
     8e6:	e8 51       	subi	r30, 0x18	; 24
     8e8:	ff 4f       	sbci	r31, 0xFF	; 255
     8ea:	f0 82       	st	Z, r15
     8ec:	91 2f       	mov	r25, r17
     8ee:	80 2f       	mov	r24, r16
     8f0:	01 96       	adiw	r24, 0x01	; 1
     8f2:	3b d5       	rcall	.+2678   	; 0x136a <HALGetExtROMByte>
     8f4:	e8 2f       	mov	r30, r24
     8f6:	ff 27       	eor	r31, r31
     8f8:	e8 51       	subi	r30, 0x18	; 24
     8fa:	ff 4f       	sbci	r31, 0xFF	; 255
     8fc:	80 81       	ld	r24, Z
     8fe:	88 23       	and	r24, r24
     900:	09 f4       	brne	.+2      	; 0x904 <BlockSortBuf+0x46>
     902:	42 c0       	rjmp	.+132    	; 0x988 <BlockSortBuf+0xca>
     904:	28 e0       	ldi	r18, 0x08	; 8
     906:	2f 15       	cp	r18, r15
     908:	30 f4       	brcc	.+12     	; 0x916 <BlockSortBuf+0x58>
     90a:	82 e0       	ldi	r24, 0x02	; 2
     90c:	80 93 29 01 	sts	0x0129, r24
     910:	80 e0       	ldi	r24, 0x00	; 0
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	3b c0       	rjmp	.+118    	; 0x98c <BlockSortBuf+0xce>
     916:	8f 2d       	mov	r24, r15
     918:	99 27       	eor	r25, r25
     91a:	67 e0       	ldi	r22, 0x07	; 7
     91c:	70 e0       	ldi	r23, 0x00	; 0
     91e:	a9 d6       	rcall	.+3410   	; 0x1672 <__mulhi3>
     920:	f9 2f       	mov	r31, r25
     922:	e8 2f       	mov	r30, r24
     924:	e7 55       	subi	r30, 0x57	; 87
     926:	ff 4f       	sbci	r31, 0xFF	; 255
     928:	05 81       	ldd	r16, Z+5	; 0x05
     92a:	16 81       	ldd	r17, Z+6	; 0x06
     92c:	82 81       	ldd	r24, Z+2	; 0x02
     92e:	e0 2e       	mov	r14, r16
     930:	f1 2e       	mov	r15, r17
     932:	41 e0       	ldi	r20, 0x01	; 1
     934:	50 e0       	ldi	r21, 0x00	; 0
     936:	99 27       	eor	r25, r25
     938:	24 c0       	rjmp	.+72     	; 0x982 <BlockSortBuf+0xc4>
     93a:	df 2d       	mov	r29, r15
     93c:	ce 2d       	mov	r28, r14
     93e:	6a 81       	ldd	r22, Y+2	; 0x02
     940:	7b 81       	ldd	r23, Y+3	; 0x03
     942:	f5 2f       	mov	r31, r21
     944:	e4 2f       	mov	r30, r20
     946:	31 97       	sbiw	r30, 0x01	; 1
     948:	bf 2d       	mov	r27, r15
     94a:	ae 2d       	mov	r26, r14
     94c:	05 c0       	rjmp	.+10     	; 0x958 <BlockSortBuf+0x9a>
     94e:	db 2f       	mov	r29, r27
     950:	ca 2f       	mov	r28, r26
     952:	3d 83       	std	Y+5, r19	; 0x05
     954:	2c 83       	std	Y+4, r18	; 0x04
     956:	31 97       	sbiw	r30, 0x01	; 1
     958:	f7 fd       	sbrc	r31, 7
     95a:	07 c0       	rjmp	.+14     	; 0x96a <BlockSortBuf+0xac>
     95c:	2d 91       	ld	r18, X+
     95e:	3c 91       	ld	r19, X
     960:	11 97       	sbiw	r26, 0x01	; 1
     962:	12 97       	sbiw	r26, 0x02	; 2
     964:	62 17       	cp	r22, r18
     966:	73 07       	cpc	r23, r19
     968:	90 f3       	brcs	.-28     	; 0x94e <BlockSortBuf+0x90>
     96a:	ee 0f       	add	r30, r30
     96c:	ff 1f       	adc	r31, r31
     96e:	e0 0f       	add	r30, r16
     970:	f1 1f       	adc	r31, r17
     972:	73 83       	std	Z+3, r23	; 0x03
     974:	62 83       	std	Z+2, r22	; 0x02
     976:	4f 5f       	subi	r20, 0xFF	; 255
     978:	5f 4f       	sbci	r21, 0xFF	; 255
     97a:	e2 e0       	ldi	r30, 0x02	; 2
     97c:	f0 e0       	ldi	r31, 0x00	; 0
     97e:	ee 0e       	add	r14, r30
     980:	ff 1e       	adc	r15, r31
     982:	48 17       	cp	r20, r24
     984:	59 07       	cpc	r21, r25
     986:	cc f2       	brlt	.-78     	; 0x93a <BlockSortBuf+0x7c>
     988:	81 e0       	ldi	r24, 0x01	; 1
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	df 91       	pop	r29
     98e:	cf 91       	pop	r28
     990:	1f 91       	pop	r17
     992:	0f 91       	pop	r16
     994:	ff 90       	pop	r15
     996:	ef 90       	pop	r14
     998:	08 95       	ret

0000099a <BlockLastError>:
     99a:	e7 d4       	rcall	.+2510   	; 0x136a <HALGetExtROMByte>
     99c:	e8 ee       	ldi	r30, 0xE8	; 232
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	e8 0f       	add	r30, r24
     9a2:	f1 1d       	adc	r31, r1
     9a4:	80 91 29 01 	lds	r24, 0x0129
     9a8:	80 83       	st	Z, r24
     9aa:	81 e0       	ldi	r24, 0x01	; 1
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	08 95       	ret

000009b0 <BlockNot>:
     9b0:	ff 92       	push	r15
     9b2:	0f 93       	push	r16
     9b4:	1f 93       	push	r17
     9b6:	08 2f       	mov	r16, r24
     9b8:	19 2f       	mov	r17, r25
     9ba:	01 96       	adiw	r24, 0x01	; 1
     9bc:	d6 d4       	rcall	.+2476   	; 0x136a <HALGetExtROMByte>
     9be:	f8 2e       	mov	r15, r24
     9c0:	91 2f       	mov	r25, r17
     9c2:	80 2f       	mov	r24, r16
     9c4:	d2 d4       	rcall	.+2468   	; 0x136a <HALGetExtROMByte>
     9c6:	af 2d       	mov	r26, r15
     9c8:	bb 27       	eor	r27, r27
     9ca:	a8 51       	subi	r26, 0x18	; 24
     9cc:	bf 4f       	sbci	r27, 0xFF	; 255
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	e8 2f       	mov	r30, r24
     9d2:	ff 27       	eor	r31, r31
     9d4:	e8 51       	subi	r30, 0x18	; 24
     9d6:	ff 4f       	sbci	r31, 0xFF	; 255
     9d8:	80 81       	ld	r24, Z
     9da:	88 23       	and	r24, r24
     9dc:	09 f4       	brne	.+2      	; 0x9e0 <BlockNot+0x30>
     9de:	91 e0       	ldi	r25, 0x01	; 1
     9e0:	9c 93       	st	X, r25
     9e2:	81 e0       	ldi	r24, 0x01	; 1
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	1f 91       	pop	r17
     9e8:	0f 91       	pop	r16
     9ea:	ff 90       	pop	r15
     9ec:	08 95       	ret

000009ee <BlockBreak>:
     9ee:	bd d4       	rcall	.+2426   	; 0x136a <HALGetExtROMByte>
     9f0:	e8 2f       	mov	r30, r24
     9f2:	ff 27       	eor	r31, r31
     9f4:	e8 51       	subi	r30, 0x18	; 24
     9f6:	ff 4f       	sbci	r31, 0xFF	; 255
     9f8:	80 81       	ld	r24, Z
     9fa:	88 23       	and	r24, r24
     9fc:	19 f0       	breq	.+6      	; 0xa04 <BlockBreak+0x16>
     9fe:	82 e0       	ldi	r24, 0x02	; 2
     a00:	90 e0       	ldi	r25, 0x00	; 0
     a02:	08 95       	ret
     a04:	81 e0       	ldi	r24, 0x01	; 1
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	08 95       	ret

00000a0a <BlockCmpByte>:
     a0a:	0f 93       	push	r16
     a0c:	1f 93       	push	r17
     a0e:	cf 93       	push	r28
     a10:	df 93       	push	r29
     a12:	d9 2f       	mov	r29, r25
     a14:	c8 2f       	mov	r28, r24
     a16:	a9 d4       	rcall	.+2386   	; 0x136a <HALGetExtROMByte>
     a18:	e8 2f       	mov	r30, r24
     a1a:	ff 27       	eor	r31, r31
     a1c:	e8 51       	subi	r30, 0x18	; 24
     a1e:	ff 4f       	sbci	r31, 0xFF	; 255
     a20:	10 81       	ld	r17, Z
     a22:	8c 2f       	mov	r24, r28
     a24:	9d 2f       	mov	r25, r29
     a26:	01 96       	adiw	r24, 0x01	; 1
     a28:	a0 d4       	rcall	.+2368   	; 0x136a <HALGetExtROMByte>
     a2a:	00 e0       	ldi	r16, 0x00	; 0
     a2c:	e8 2f       	mov	r30, r24
     a2e:	ff 27       	eor	r31, r31
     a30:	e8 51       	subi	r30, 0x18	; 24
     a32:	ff 4f       	sbci	r31, 0xFF	; 255
     a34:	80 81       	ld	r24, Z
     a36:	18 17       	cp	r17, r24
     a38:	09 f4       	brne	.+2      	; 0xa3c <BlockCmpByte+0x32>
     a3a:	01 e0       	ldi	r16, 0x01	; 1
     a3c:	8c 2f       	mov	r24, r28
     a3e:	9d 2f       	mov	r25, r29
     a40:	02 96       	adiw	r24, 0x02	; 2
     a42:	93 d4       	rcall	.+2342   	; 0x136a <HALGetExtROMByte>
     a44:	e8 2f       	mov	r30, r24
     a46:	ff 27       	eor	r31, r31
     a48:	e8 51       	subi	r30, 0x18	; 24
     a4a:	ff 4f       	sbci	r31, 0xFF	; 255
     a4c:	00 83       	st	Z, r16
     a4e:	81 e0       	ldi	r24, 0x01	; 1
     a50:	90 e0       	ldi	r25, 0x00	; 0
     a52:	df 91       	pop	r29
     a54:	cf 91       	pop	r28
     a56:	1f 91       	pop	r17
     a58:	0f 91       	pop	r16
     a5a:	08 95       	ret

00000a5c <BlockConst2>:
     a5c:	86 d4       	rcall	.+2316   	; 0x136a <HALGetExtROMByte>
     a5e:	e8 ee       	ldi	r30, 0xE8	; 232
     a60:	f0 e0       	ldi	r31, 0x00	; 0
     a62:	e8 0f       	add	r30, r24
     a64:	f1 1d       	adc	r31, r1
     a66:	82 e0       	ldi	r24, 0x02	; 2
     a68:	80 83       	st	Z, r24
     a6a:	81 e0       	ldi	r24, 0x01	; 1
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	08 95       	ret

00000a70 <BlockConst1>:
     a70:	7c d4       	rcall	.+2296   	; 0x136a <HALGetExtROMByte>
     a72:	e8 ee       	ldi	r30, 0xE8	; 232
     a74:	f0 e0       	ldi	r31, 0x00	; 0
     a76:	e8 0f       	add	r30, r24
     a78:	f1 1d       	adc	r31, r1
     a7a:	81 e0       	ldi	r24, 0x01	; 1
     a7c:	80 83       	st	Z, r24
     a7e:	81 e0       	ldi	r24, 0x01	; 1
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	08 95       	ret

00000a84 <BlockConst0>:
     a84:	72 d4       	rcall	.+2276   	; 0x136a <HALGetExtROMByte>
     a86:	e8 ee       	ldi	r30, 0xE8	; 232
     a88:	f0 e0       	ldi	r31, 0x00	; 0
     a8a:	e8 0f       	add	r30, r24
     a8c:	f1 1d       	adc	r31, r1
     a8e:	10 82       	st	Z, r1
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	08 95       	ret

00000a96 <BlockByteToHexStr>:
     a96:	ff 92       	push	r15
     a98:	0f 93       	push	r16
     a9a:	1f 93       	push	r17
     a9c:	08 2f       	mov	r16, r24
     a9e:	19 2f       	mov	r17, r25
     aa0:	01 96       	adiw	r24, 0x01	; 1
     aa2:	63 d4       	rcall	.+2246   	; 0x136a <HALGetExtROMByte>
     aa4:	f8 2e       	mov	r15, r24
     aa6:	91 2f       	mov	r25, r17
     aa8:	80 2f       	mov	r24, r16
     aaa:	5f d4       	rcall	.+2238   	; 0x136a <HALGetExtROMByte>
     aac:	e8 2f       	mov	r30, r24
     aae:	ff 27       	eor	r31, r31
     ab0:	e8 51       	subi	r30, 0x18	; 24
     ab2:	ff 4f       	sbci	r31, 0xFF	; 255
     ab4:	80 81       	ld	r24, Z
     ab6:	28 2f       	mov	r18, r24
     ab8:	22 95       	swap	r18
     aba:	2f 70       	andi	r18, 0x0F	; 15
     abc:	98 2f       	mov	r25, r24
     abe:	9f 70       	andi	r25, 0x0F	; 15
     ac0:	9a 30       	cpi	r25, 0x0A	; 10
     ac2:	10 f4       	brcc	.+4      	; 0xac8 <BlockByteToHexStr+0x32>
     ac4:	90 5d       	subi	r25, 0xD0	; 208
     ac6:	07 c0       	rjmp	.+14     	; 0xad6 <BlockByteToHexStr+0x40>
     ac8:	89 2f       	mov	r24, r25
     aca:	8a 50       	subi	r24, 0x0A	; 10
     acc:	86 30       	cpi	r24, 0x06	; 6
     ace:	10 f0       	brcs	.+4      	; 0xad4 <BlockByteToHexStr+0x3e>
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	01 c0       	rjmp	.+2      	; 0xad6 <BlockByteToHexStr+0x40>
     ad4:	99 5c       	subi	r25, 0xC9	; 201
     ad6:	2a 30       	cpi	r18, 0x0A	; 10
     ad8:	18 f4       	brcc	.+6      	; 0xae0 <BlockByteToHexStr+0x4a>
     ada:	82 2f       	mov	r24, r18
     adc:	80 5d       	subi	r24, 0xD0	; 208
     ade:	08 c0       	rjmp	.+16     	; 0xaf0 <BlockByteToHexStr+0x5a>
     ae0:	82 2f       	mov	r24, r18
     ae2:	8a 50       	subi	r24, 0x0A	; 10
     ae4:	86 30       	cpi	r24, 0x06	; 6
     ae6:	10 f0       	brcs	.+4      	; 0xaec <BlockByteToHexStr+0x56>
     ae8:	80 e0       	ldi	r24, 0x00	; 0
     aea:	02 c0       	rjmp	.+4      	; 0xaf0 <BlockByteToHexStr+0x5a>
     aec:	82 2f       	mov	r24, r18
     aee:	89 5c       	subi	r24, 0xC9	; 201
     af0:	ef 2d       	mov	r30, r15
     af2:	ff 27       	eor	r31, r31
     af4:	e8 51       	subi	r30, 0x18	; 24
     af6:	ff 4f       	sbci	r31, 0xFF	; 255
     af8:	80 83       	st	Z, r24
     afa:	91 83       	std	Z+1, r25	; 0x01
     afc:	81 e0       	ldi	r24, 0x01	; 1
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	1f 91       	pop	r17
     b02:	0f 91       	pop	r16
     b04:	ff 90       	pop	r15
     b06:	08 95       	ret

00000b08 <BlockHexStrToByte>:
     b08:	0f 93       	push	r16
     b0a:	1f 93       	push	r17
     b0c:	cf 93       	push	r28
     b0e:	df 93       	push	r29
     b10:	d9 2f       	mov	r29, r25
     b12:	c8 2f       	mov	r28, r24
     b14:	2a d4       	rcall	.+2132   	; 0x136a <HALGetExtROMByte>
     b16:	e8 2f       	mov	r30, r24
     b18:	ff 27       	eor	r31, r31
     b1a:	e8 51       	subi	r30, 0x18	; 24
     b1c:	ff 4f       	sbci	r31, 0xFF	; 255
     b1e:	91 81       	ldd	r25, Z+1	; 0x01
     b20:	09 2f       	mov	r16, r25
     b22:	00 53       	subi	r16, 0x30	; 48
     b24:	0a 30       	cpi	r16, 0x0A	; 10
     b26:	28 f0       	brcs	.+10     	; 0xb32 <BlockHexStrToByte+0x2a>
     b28:	89 2f       	mov	r24, r25
     b2a:	81 54       	subi	r24, 0x41	; 65
     b2c:	86 30       	cpi	r24, 0x06	; 6
     b2e:	d0 f4       	brcc	.+52     	; 0xb64 <BlockHexStrToByte+0x5c>
     b30:	07 50       	subi	r16, 0x07	; 7
     b32:	90 81       	ld	r25, Z
     b34:	19 2f       	mov	r17, r25
     b36:	10 53       	subi	r17, 0x30	; 48
     b38:	1a 30       	cpi	r17, 0x0A	; 10
     b3a:	28 f0       	brcs	.+10     	; 0xb46 <BlockHexStrToByte+0x3e>
     b3c:	89 2f       	mov	r24, r25
     b3e:	81 54       	subi	r24, 0x41	; 65
     b40:	86 30       	cpi	r24, 0x06	; 6
     b42:	80 f4       	brcc	.+32     	; 0xb64 <BlockHexStrToByte+0x5c>
     b44:	17 50       	subi	r17, 0x07	; 7
     b46:	8c 2f       	mov	r24, r28
     b48:	9d 2f       	mov	r25, r29
     b4a:	01 96       	adiw	r24, 0x01	; 1
     b4c:	0e d4       	rcall	.+2076   	; 0x136a <HALGetExtROMByte>
     b4e:	e8 2f       	mov	r30, r24
     b50:	ff 27       	eor	r31, r31
     b52:	e8 51       	subi	r30, 0x18	; 24
     b54:	ff 4f       	sbci	r31, 0xFF	; 255
     b56:	12 95       	swap	r17
     b58:	10 7f       	andi	r17, 0xF0	; 240
     b5a:	10 2b       	or	r17, r16
     b5c:	10 83       	st	Z, r17
     b5e:	81 e0       	ldi	r24, 0x01	; 1
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	05 c0       	rjmp	.+10     	; 0xb6e <BlockHexStrToByte+0x66>
     b64:	81 e0       	ldi	r24, 0x01	; 1
     b66:	80 93 29 01 	sts	0x0129, r24
     b6a:	80 e0       	ldi	r24, 0x00	; 0
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	df 91       	pop	r29
     b70:	cf 91       	pop	r28
     b72:	1f 91       	pop	r17
     b74:	0f 91       	pop	r16
     b76:	08 95       	ret

00000b78 <BlockMinus>:
     b78:	cf 92       	push	r12
     b7a:	df 92       	push	r13
     b7c:	ef 92       	push	r14
     b7e:	ff 92       	push	r15
     b80:	0f 93       	push	r16
     b82:	1f 93       	push	r17
     b84:	e8 2e       	mov	r14, r24
     b86:	f9 2e       	mov	r15, r25
     b88:	02 96       	adiw	r24, 0x02	; 2
     b8a:	ef d3       	rcall	.+2014   	; 0x136a <HALGetExtROMByte>
     b8c:	c8 2e       	mov	r12, r24
     b8e:	9f 2d       	mov	r25, r15
     b90:	8e 2d       	mov	r24, r14
     b92:	eb d3       	rcall	.+2006   	; 0x136a <HALGetExtROMByte>
     b94:	08 ee       	ldi	r16, 0xE8	; 232
     b96:	10 e0       	ldi	r17, 0x00	; 0
     b98:	f1 2f       	mov	r31, r17
     b9a:	e0 2f       	mov	r30, r16
     b9c:	e8 0f       	add	r30, r24
     b9e:	f1 1d       	adc	r31, r1
     ba0:	d0 80       	ld	r13, Z
     ba2:	9f 2d       	mov	r25, r15
     ba4:	8e 2d       	mov	r24, r14
     ba6:	01 96       	adiw	r24, 0x01	; 1
     ba8:	e0 d3       	rcall	.+1984   	; 0x136a <HALGetExtROMByte>
     baa:	f1 2f       	mov	r31, r17
     bac:	e0 2f       	mov	r30, r16
     bae:	ec 0d       	add	r30, r12
     bb0:	f1 1d       	adc	r31, r1
     bb2:	08 0f       	add	r16, r24
     bb4:	11 1d       	adc	r17, r1
     bb6:	b1 2f       	mov	r27, r17
     bb8:	a0 2f       	mov	r26, r16
     bba:	8c 91       	ld	r24, X
     bbc:	d8 1a       	sub	r13, r24
     bbe:	d0 82       	st	Z, r13
     bc0:	81 e0       	ldi	r24, 0x01	; 1
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	1f 91       	pop	r17
     bc6:	0f 91       	pop	r16
     bc8:	ff 90       	pop	r15
     bca:	ef 90       	pop	r14
     bcc:	df 90       	pop	r13
     bce:	cf 90       	pop	r12
     bd0:	08 95       	ret

00000bd2 <BlockPlus>:
     bd2:	cf 92       	push	r12
     bd4:	df 92       	push	r13
     bd6:	ef 92       	push	r14
     bd8:	ff 92       	push	r15
     bda:	0f 93       	push	r16
     bdc:	1f 93       	push	r17
     bde:	e8 2e       	mov	r14, r24
     be0:	f9 2e       	mov	r15, r25
     be2:	02 96       	adiw	r24, 0x02	; 2
     be4:	c2 d3       	rcall	.+1924   	; 0x136a <HALGetExtROMByte>
     be6:	c8 2e       	mov	r12, r24
     be8:	9f 2d       	mov	r25, r15
     bea:	8e 2d       	mov	r24, r14
     bec:	be d3       	rcall	.+1916   	; 0x136a <HALGetExtROMByte>
     bee:	08 ee       	ldi	r16, 0xE8	; 232
     bf0:	10 e0       	ldi	r17, 0x00	; 0
     bf2:	f1 2f       	mov	r31, r17
     bf4:	e0 2f       	mov	r30, r16
     bf6:	e8 0f       	add	r30, r24
     bf8:	f1 1d       	adc	r31, r1
     bfa:	d0 80       	ld	r13, Z
     bfc:	9f 2d       	mov	r25, r15
     bfe:	8e 2d       	mov	r24, r14
     c00:	01 96       	adiw	r24, 0x01	; 1
     c02:	b3 d3       	rcall	.+1894   	; 0x136a <HALGetExtROMByte>
     c04:	f1 2f       	mov	r31, r17
     c06:	e0 2f       	mov	r30, r16
     c08:	ec 0d       	add	r30, r12
     c0a:	f1 1d       	adc	r31, r1
     c0c:	08 0f       	add	r16, r24
     c0e:	11 1d       	adc	r17, r1
     c10:	b1 2f       	mov	r27, r17
     c12:	a0 2f       	mov	r26, r16
     c14:	8c 91       	ld	r24, X
     c16:	d8 0e       	add	r13, r24
     c18:	d0 82       	st	Z, r13
     c1a:	81 e0       	ldi	r24, 0x01	; 1
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	1f 91       	pop	r17
     c20:	0f 91       	pop	r16
     c22:	ff 90       	pop	r15
     c24:	ef 90       	pop	r14
     c26:	df 90       	pop	r13
     c28:	cf 90       	pop	r12
     c2a:	08 95       	ret

00000c2c <Block0>:
     c2c:	ef 92       	push	r14
     c2e:	ff 92       	push	r15
     c30:	0f 93       	push	r16
     c32:	1f 93       	push	r17
     c34:	cf 93       	push	r28
     c36:	df 93       	push	r29
     c38:	08 2f       	mov	r16, r24
     c3a:	19 2f       	mov	r17, r25
     c3c:	96 d3       	rcall	.+1836   	; 0x136a <HALGetExtROMByte>
     c3e:	e8 2e       	mov	r14, r24
     c40:	d1 2f       	mov	r29, r17
     c42:	c0 2f       	mov	r28, r16
     c44:	21 96       	adiw	r28, 0x01	; 1
     c46:	ff 24       	eor	r15, r15
     c48:	29 c0       	rjmp	.+82     	; 0xc9c <Block0+0x70>
     c4a:	8c 2f       	mov	r24, r28
     c4c:	9d 2f       	mov	r25, r29
     c4e:	8d d3       	rcall	.+1818   	; 0x136a <HALGetExtROMByte>
     c50:	08 2f       	mov	r16, r24
     c52:	8c 2f       	mov	r24, r28
     c54:	9d 2f       	mov	r25, r29
     c56:	01 96       	adiw	r24, 0x01	; 1
     c58:	88 d3       	rcall	.+1808   	; 0x136a <HALGetExtROMByte>
     c5a:	18 2f       	mov	r17, r24
     c5c:	8c 2f       	mov	r24, r28
     c5e:	9d 2f       	mov	r25, r29
     c60:	02 96       	adiw	r24, 0x02	; 2
     c62:	83 d3       	rcall	.+1798   	; 0x136a <HALGetExtROMByte>
     c64:	68 2f       	mov	r22, r24
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	41 2f       	mov	r20, r17
     c6a:	55 27       	eor	r21, r21
     c6c:	48 51       	subi	r20, 0x18	; 24
     c6e:	5f 4f       	sbci	r21, 0xFF	; 255
     c70:	20 91 e6 00 	lds	r18, 0x00E6
     c74:	30 91 e7 00 	lds	r19, 0x00E7
     c78:	20 0f       	add	r18, r16
     c7a:	31 1d       	adc	r19, r1
     c7c:	0b c0       	rjmp	.+22     	; 0xc94 <Block0+0x68>
     c7e:	e9 2f       	mov	r30, r25
     c80:	ff 27       	eor	r31, r31
     c82:	b5 2f       	mov	r27, r21
     c84:	a4 2f       	mov	r26, r20
     c86:	ae 0f       	add	r26, r30
     c88:	bf 1f       	adc	r27, r31
     c8a:	e2 0f       	add	r30, r18
     c8c:	f3 1f       	adc	r31, r19
     c8e:	80 81       	ld	r24, Z
     c90:	8c 93       	st	X, r24
     c92:	9f 5f       	subi	r25, 0xFF	; 255
     c94:	96 17       	cp	r25, r22
     c96:	99 f7       	brne	.-26     	; 0xc7e <Block0+0x52>
     c98:	23 96       	adiw	r28, 0x03	; 3
     c9a:	f3 94       	inc	r15
     c9c:	fe 14       	cp	r15, r14
     c9e:	a9 f6       	brne	.-86     	; 0xc4a <Block0+0x1e>
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	df 91       	pop	r29
     ca6:	cf 91       	pop	r28
     ca8:	1f 91       	pop	r17
     caa:	0f 91       	pop	r16
     cac:	ff 90       	pop	r15
     cae:	ef 90       	pop	r14
     cb0:	08 95       	ret

00000cb2 <BlockApprox>:
     cb2:	8f 92       	push	r8
     cb4:	9f 92       	push	r9
     cb6:	af 92       	push	r10
     cb8:	bf 92       	push	r11
     cba:	cf 92       	push	r12
     cbc:	df 92       	push	r13
     cbe:	ef 92       	push	r14
     cc0:	ff 92       	push	r15
     cc2:	0f 93       	push	r16
     cc4:	1f 93       	push	r17
     cc6:	cf 93       	push	r28
     cc8:	df 93       	push	r29
     cca:	88 2e       	mov	r8, r24
     ccc:	99 2e       	mov	r9, r25
     cce:	4d d3       	rcall	.+1690   	; 0x136a <HALGetExtROMByte>
     cd0:	e8 2f       	mov	r30, r24
     cd2:	ff 27       	eor	r31, r31
     cd4:	e8 51       	subi	r30, 0x18	; 24
     cd6:	ff 4f       	sbci	r31, 0xFF	; 255
     cd8:	80 81       	ld	r24, Z
     cda:	d9 2d       	mov	r29, r9
     cdc:	c8 2d       	mov	r28, r8
     cde:	22 96       	adiw	r28, 0x02	; 2
     ce0:	88 23       	and	r24, r24
     ce2:	41 f5       	brne	.+80     	; 0xd34 <BlockApprox+0x82>
     ce4:	19 2d       	mov	r17, r9
     ce6:	08 2d       	mov	r16, r8
     ce8:	0d 5f       	subi	r16, 0xFD	; 253
     cea:	1f 4f       	sbci	r17, 0xFF	; 255
     cec:	91 2f       	mov	r25, r17
     cee:	80 2f       	mov	r24, r16
     cf0:	3c d3       	rcall	.+1656   	; 0x136a <HALGetExtROMByte>
     cf2:	f8 2e       	mov	r15, r24
     cf4:	8c 2f       	mov	r24, r28
     cf6:	9d 2f       	mov	r25, r29
     cf8:	38 d3       	rcall	.+1648   	; 0x136a <HALGetExtROMByte>
     cfa:	af 2d       	mov	r26, r15
     cfc:	bb 27       	eor	r27, r27
     cfe:	a8 51       	subi	r26, 0x18	; 24
     d00:	bf 4f       	sbci	r27, 0xFF	; 255
     d02:	e8 2f       	mov	r30, r24
     d04:	ff 27       	eor	r31, r31
     d06:	e8 51       	subi	r30, 0x18	; 24
     d08:	ff 4f       	sbci	r31, 0xFF	; 255
     d0a:	80 81       	ld	r24, Z
     d0c:	8c 93       	st	X, r24
     d0e:	91 2f       	mov	r25, r17
     d10:	80 2f       	mov	r24, r16
     d12:	2b d3       	rcall	.+1622   	; 0x136a <HALGetExtROMByte>
     d14:	08 2f       	mov	r16, r24
     d16:	8c 2f       	mov	r24, r28
     d18:	9d 2f       	mov	r25, r29
     d1a:	27 d3       	rcall	.+1614   	; 0x136a <HALGetExtROMByte>
     d1c:	a0 2f       	mov	r26, r16
     d1e:	bb 27       	eor	r27, r27
     d20:	a8 51       	subi	r26, 0x18	; 24
     d22:	bf 4f       	sbci	r27, 0xFF	; 255
     d24:	e8 2f       	mov	r30, r24
     d26:	ff 27       	eor	r31, r31
     d28:	e8 51       	subi	r30, 0x18	; 24
     d2a:	ff 4f       	sbci	r31, 0xFF	; 255
     d2c:	81 81       	ldd	r24, Z+1	; 0x01
     d2e:	fb 2f       	mov	r31, r27
     d30:	ea 2f       	mov	r30, r26
     d32:	67 c0       	rjmp	.+206    	; 0xe02 <BlockApprox+0x150>
     d34:	99 2d       	mov	r25, r9
     d36:	88 2d       	mov	r24, r8
     d38:	01 96       	adiw	r24, 0x01	; 1
     d3a:	17 d3       	rcall	.+1582   	; 0x136a <HALGetExtROMByte>
     d3c:	e8 2f       	mov	r30, r24
     d3e:	ff 27       	eor	r31, r31
     d40:	e8 51       	subi	r30, 0x18	; 24
     d42:	ff 4f       	sbci	r31, 0xFF	; 255
     d44:	f0 80       	ld	r15, Z
     d46:	8c 2f       	mov	r24, r28
     d48:	9d 2f       	mov	r25, r29
     d4a:	0f d3       	rcall	.+1566   	; 0x136a <HALGetExtROMByte>
     d4c:	e8 2f       	mov	r30, r24
     d4e:	ff 27       	eor	r31, r31
     d50:	e8 51       	subi	r30, 0x18	; 24
     d52:	ff 4f       	sbci	r31, 0xFF	; 255
     d54:	81 81       	ldd	r24, Z+1	; 0x01
     d56:	99 27       	eor	r25, r25
     d58:	b8 2e       	mov	r11, r24
     d5a:	aa 24       	eor	r10, r10
     d5c:	8c 2f       	mov	r24, r28
     d5e:	9d 2f       	mov	r25, r29
     d60:	04 d3       	rcall	.+1544   	; 0x136a <HALGetExtROMByte>
     d62:	e8 2f       	mov	r30, r24
     d64:	ff 27       	eor	r31, r31
     d66:	e8 51       	subi	r30, 0x18	; 24
     d68:	ff 4f       	sbci	r31, 0xFF	; 255
     d6a:	80 81       	ld	r24, Z
     d6c:	99 27       	eor	r25, r25
     d6e:	a8 2a       	or	r10, r24
     d70:	b9 2a       	or	r11, r25
     d72:	1b 2d       	mov	r17, r11
     d74:	0a 2d       	mov	r16, r10
     d76:	00 0f       	add	r16, r16
     d78:	01 2f       	mov	r16, r17
     d7a:	00 1f       	adc	r16, r16
     d7c:	11 0b       	sbc	r17, r17
     d7e:	11 95       	neg	r17
     d80:	c0 2e       	mov	r12, r16
     d82:	dd 24       	eor	r13, r13
     d84:	8f 2d       	mov	r24, r15
     d86:	99 27       	eor	r25, r25
     d88:	69 e0       	ldi	r22, 0x09	; 9
     d8a:	70 e0       	ldi	r23, 0x00	; 0
     d8c:	72 d4       	rcall	.+2276   	; 0x1672 <__mulhi3>
     d8e:	d9 2f       	mov	r29, r25
     d90:	c8 2f       	mov	r28, r24
     d92:	cc 0d       	add	r28, r12
     d94:	dd 1d       	adc	r29, r13
     d96:	cc 0f       	add	r28, r28
     d98:	dd 1f       	adc	r29, r29
     d9a:	8c 2f       	mov	r24, r28
     d9c:	9d 2f       	mov	r25, r29
     d9e:	4e 96       	adiw	r24, 0x1e	; 30
     da0:	8d d3       	rcall	.+1818   	; 0x14bc <HALGetEEPROMWord>
     da2:	e8 2e       	mov	r14, r24
     da4:	f9 2e       	mov	r15, r25
     da6:	08 30       	cpi	r16, 0x08	; 8
     da8:	b8 f4       	brcc	.+46     	; 0xdd8 <BlockApprox+0x126>
     daa:	8c 2f       	mov	r24, r28
     dac:	9d 2f       	mov	r25, r29
     dae:	80 96       	adiw	r24, 0x20	; 32
     db0:	85 d3       	rcall	.+1802   	; 0x14bc <HALGetEEPROMWord>
     db2:	8e 19       	sub	r24, r14
     db4:	9f 09       	sbc	r25, r15
     db6:	d6 94       	lsr	r13
     db8:	dc 2c       	mov	r13, r12
     dba:	cc 24       	eor	r12, r12
     dbc:	d7 94       	ror	r13
     dbe:	c7 94       	ror	r12
     dc0:	ac 18       	sub	r10, r12
     dc2:	bd 08       	sbc	r11, r13
     dc4:	88 0f       	add	r24, r24
     dc6:	89 2f       	mov	r24, r25
     dc8:	88 1f       	adc	r24, r24
     dca:	99 0b       	sbc	r25, r25
     dcc:	91 95       	neg	r25
     dce:	7b 2d       	mov	r23, r11
     dd0:	6a 2d       	mov	r22, r10
     dd2:	4f d4       	rcall	.+2206   	; 0x1672 <__mulhi3>
     dd4:	e8 0e       	add	r14, r24
     dd6:	f9 1e       	adc	r15, r25
     dd8:	19 2d       	mov	r17, r9
     dda:	08 2d       	mov	r16, r8
     ddc:	0d 5f       	subi	r16, 0xFD	; 253
     dde:	1f 4f       	sbci	r17, 0xFF	; 255
     de0:	91 2f       	mov	r25, r17
     de2:	80 2f       	mov	r24, r16
     de4:	c2 d2       	rcall	.+1412   	; 0x136a <HALGetExtROMByte>
     de6:	e8 2f       	mov	r30, r24
     de8:	ff 27       	eor	r31, r31
     dea:	e8 51       	subi	r30, 0x18	; 24
     dec:	ff 4f       	sbci	r31, 0xFF	; 255
     dee:	e0 82       	st	Z, r14
     df0:	91 2f       	mov	r25, r17
     df2:	80 2f       	mov	r24, r16
     df4:	ba d2       	rcall	.+1396   	; 0x136a <HALGetExtROMByte>
     df6:	e8 2f       	mov	r30, r24
     df8:	ff 27       	eor	r31, r31
     dfa:	e8 51       	subi	r30, 0x18	; 24
     dfc:	ff 4f       	sbci	r31, 0xFF	; 255
     dfe:	8f 2d       	mov	r24, r15
     e00:	99 27       	eor	r25, r25
     e02:	81 83       	std	Z+1, r24	; 0x01
     e04:	81 e0       	ldi	r24, 0x01	; 1
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	df 91       	pop	r29
     e0a:	cf 91       	pop	r28
     e0c:	1f 91       	pop	r17
     e0e:	0f 91       	pop	r16
     e10:	ff 90       	pop	r15
     e12:	ef 90       	pop	r14
     e14:	df 90       	pop	r13
     e16:	cf 90       	pop	r12
     e18:	bf 90       	pop	r11
     e1a:	af 90       	pop	r10
     e1c:	9f 90       	pop	r9
     e1e:	8f 90       	pop	r8
     e20:	08 95       	ret

00000e22 <BlockADCChannelConfig>:
     e22:	bf 92       	push	r11
     e24:	cf 92       	push	r12
     e26:	df 92       	push	r13
     e28:	ef 92       	push	r14
     e2a:	ff 92       	push	r15
     e2c:	0f 93       	push	r16
     e2e:	1f 93       	push	r17
     e30:	cf 93       	push	r28
     e32:	df 93       	push	r29
     e34:	d9 2f       	mov	r29, r25
     e36:	c8 2f       	mov	r28, r24
     e38:	01 96       	adiw	r24, 0x01	; 1
     e3a:	97 d2       	rcall	.+1326   	; 0x136a <HALGetExtROMByte>
     e3c:	e8 2f       	mov	r30, r24
     e3e:	ff 27       	eor	r31, r31
     e40:	e8 51       	subi	r30, 0x18	; 24
     e42:	ff 4f       	sbci	r31, 0xFF	; 255
     e44:	b0 80       	ld	r11, Z
     e46:	8c 2f       	mov	r24, r28
     e48:	9d 2f       	mov	r25, r29
     e4a:	02 96       	adiw	r24, 0x02	; 2
     e4c:	8e d2       	rcall	.+1308   	; 0x136a <HALGetExtROMByte>
     e4e:	e8 2f       	mov	r30, r24
     e50:	ff 27       	eor	r31, r31
     e52:	e8 51       	subi	r30, 0x18	; 24
     e54:	ff 4f       	sbci	r31, 0xFF	; 255
     e56:	00 81       	ld	r16, Z
     e58:	8c 2f       	mov	r24, r28
     e5a:	9d 2f       	mov	r25, r29
     e5c:	86 d2       	rcall	.+1292   	; 0x136a <HALGetExtROMByte>
     e5e:	e8 2f       	mov	r30, r24
     e60:	ff 27       	eor	r31, r31
     e62:	e8 51       	subi	r30, 0x18	; 24
     e64:	ff 4f       	sbci	r31, 0xFF	; 255
     e66:	80 81       	ld	r24, Z
     e68:	88 23       	and	r24, r24
     e6a:	09 f4       	brne	.+2      	; 0xe6e <BlockADCChannelConfig+0x4c>
     e6c:	7f c0       	rjmp	.+254    	; 0xf6c <BlockADCChannelConfig+0x14a>
     e6e:	c0 2e       	mov	r12, r16
     e70:	dd 24       	eor	r13, r13
     e72:	c0 fe       	sbrs	r12, 0
     e74:	19 c0       	rjmp	.+50     	; 0xea8 <BlockADCChannelConfig+0x86>
     e76:	8c 2f       	mov	r24, r28
     e78:	9d 2f       	mov	r25, r29
     e7a:	03 96       	adiw	r24, 0x03	; 3
     e7c:	76 d2       	rcall	.+1260   	; 0x136a <HALGetExtROMByte>
     e7e:	e8 2f       	mov	r30, r24
     e80:	ff 27       	eor	r31, r31
     e82:	e8 51       	subi	r30, 0x18	; 24
     e84:	ff 4f       	sbci	r31, 0xFF	; 255
     e86:	21 81       	ldd	r18, Z+1	; 0x01
     e88:	33 27       	eor	r19, r19
     e8a:	32 2f       	mov	r19, r18
     e8c:	22 27       	eor	r18, r18
     e8e:	80 81       	ld	r24, Z
     e90:	99 27       	eor	r25, r25
     e92:	28 2b       	or	r18, r24
     e94:	39 2b       	or	r19, r25
     e96:	8b 2d       	mov	r24, r11
     e98:	99 27       	eor	r25, r25
     e9a:	67 e0       	ldi	r22, 0x07	; 7
     e9c:	70 e0       	ldi	r23, 0x00	; 0
     e9e:	e9 d3       	rcall	.+2002   	; 0x1672 <__mulhi3>
     ea0:	73 2f       	mov	r23, r19
     ea2:	62 2f       	mov	r22, r18
     ea4:	04 96       	adiw	r24, 0x04	; 4
     ea6:	11 d3       	rcall	.+1570   	; 0x14ca <HALSetEEPROMWord>
     ea8:	c1 fe       	sbrs	r12, 1
     eaa:	19 c0       	rjmp	.+50     	; 0xede <BlockADCChannelConfig+0xbc>
     eac:	8c 2f       	mov	r24, r28
     eae:	9d 2f       	mov	r25, r29
     eb0:	04 96       	adiw	r24, 0x04	; 4
     eb2:	5b d2       	rcall	.+1206   	; 0x136a <HALGetExtROMByte>
     eb4:	e8 2f       	mov	r30, r24
     eb6:	ff 27       	eor	r31, r31
     eb8:	e8 51       	subi	r30, 0x18	; 24
     eba:	ff 4f       	sbci	r31, 0xFF	; 255
     ebc:	21 81       	ldd	r18, Z+1	; 0x01
     ebe:	33 27       	eor	r19, r19
     ec0:	32 2f       	mov	r19, r18
     ec2:	22 27       	eor	r18, r18
     ec4:	80 81       	ld	r24, Z
     ec6:	99 27       	eor	r25, r25
     ec8:	28 2b       	or	r18, r24
     eca:	39 2b       	or	r19, r25
     ecc:	8b 2d       	mov	r24, r11
     ece:	99 27       	eor	r25, r25
     ed0:	67 e0       	ldi	r22, 0x07	; 7
     ed2:	70 e0       	ldi	r23, 0x00	; 0
     ed4:	ce d3       	rcall	.+1948   	; 0x1672 <__mulhi3>
     ed6:	73 2f       	mov	r23, r19
     ed8:	62 2f       	mov	r22, r18
     eda:	02 96       	adiw	r24, 0x02	; 2
     edc:	f6 d2       	rcall	.+1516   	; 0x14ca <HALSetEEPROMWord>
     ede:	c2 fe       	sbrs	r12, 2
     ee0:	20 c0       	rjmp	.+64     	; 0xf22 <BlockADCChannelConfig+0x100>
     ee2:	8c 2f       	mov	r24, r28
     ee4:	9d 2f       	mov	r25, r29
     ee6:	05 96       	adiw	r24, 0x05	; 5
     ee8:	40 d2       	rcall	.+1152   	; 0x136a <HALGetExtROMByte>
     eea:	e8 2f       	mov	r30, r24
     eec:	8b 2d       	mov	r24, r11
     eee:	99 27       	eor	r25, r25
     ef0:	67 e0       	ldi	r22, 0x07	; 7
     ef2:	70 e0       	ldi	r23, 0x00	; 0
     ef4:	be d3       	rcall	.+1916   	; 0x1672 <__mulhi3>
     ef6:	08 2f       	mov	r16, r24
     ef8:	19 2f       	mov	r17, r25
     efa:	56 e0       	ldi	r21, 0x06	; 6
     efc:	e5 2e       	mov	r14, r21
     efe:	f1 2c       	mov	r15, r1
     f00:	e8 0e       	add	r14, r24
     f02:	f9 1e       	adc	r15, r25
     f04:	ff 27       	eor	r31, r31
     f06:	e8 51       	subi	r30, 0x18	; 24
     f08:	ff 4f       	sbci	r31, 0xFF	; 255
     f0a:	60 81       	ld	r22, Z
     f0c:	9f 2d       	mov	r25, r15
     f0e:	8e 2d       	mov	r24, r14
     f10:	cf d2       	rcall	.+1438   	; 0x14b0 <HALSetEEPROMByte>
     f12:	9f 2d       	mov	r25, r15
     f14:	8e 2d       	mov	r24, r14
     f16:	c5 d2       	rcall	.+1418   	; 0x14a2 <HALGetEEPROMByte>
     f18:	07 55       	subi	r16, 0x57	; 87
     f1a:	1f 4f       	sbci	r17, 0xFF	; 255
     f1c:	f1 2f       	mov	r31, r17
     f1e:	e0 2f       	mov	r30, r16
     f20:	82 83       	std	Z+2, r24	; 0x02
     f22:	c3 fe       	sbrs	r12, 3
     f24:	10 c0       	rjmp	.+32     	; 0xf46 <BlockADCChannelConfig+0x124>
     f26:	8c 2f       	mov	r24, r28
     f28:	9d 2f       	mov	r25, r29
     f2a:	06 96       	adiw	r24, 0x06	; 6
     f2c:	1e d2       	rcall	.+1084   	; 0x136a <HALGetExtROMByte>
     f2e:	e8 2f       	mov	r30, r24
     f30:	ff 27       	eor	r31, r31
     f32:	e8 51       	subi	r30, 0x18	; 24
     f34:	ff 4f       	sbci	r31, 0xFF	; 255
     f36:	8b 2d       	mov	r24, r11
     f38:	99 27       	eor	r25, r25
     f3a:	67 e0       	ldi	r22, 0x07	; 7
     f3c:	70 e0       	ldi	r23, 0x00	; 0
     f3e:	99 d3       	rcall	.+1842   	; 0x1672 <__mulhi3>
     f40:	60 81       	ld	r22, Z
     f42:	07 96       	adiw	r24, 0x07	; 7
     f44:	b5 d2       	rcall	.+1386   	; 0x14b0 <HALSetEEPROMByte>
     f46:	c4 fe       	sbrs	r12, 4
     f48:	62 c0       	rjmp	.+196    	; 0x100e <BlockADCChannelConfig+0x1ec>
     f4a:	8c 2f       	mov	r24, r28
     f4c:	9d 2f       	mov	r25, r29
     f4e:	07 96       	adiw	r24, 0x07	; 7
     f50:	0c d2       	rcall	.+1048   	; 0x136a <HALGetExtROMByte>
     f52:	e8 2f       	mov	r30, r24
     f54:	ff 27       	eor	r31, r31
     f56:	e8 51       	subi	r30, 0x18	; 24
     f58:	ff 4f       	sbci	r31, 0xFF	; 255
     f5a:	8b 2d       	mov	r24, r11
     f5c:	99 27       	eor	r25, r25
     f5e:	67 e0       	ldi	r22, 0x07	; 7
     f60:	70 e0       	ldi	r23, 0x00	; 0
     f62:	87 d3       	rcall	.+1806   	; 0x1672 <__mulhi3>
     f64:	60 81       	ld	r22, Z
     f66:	08 96       	adiw	r24, 0x08	; 8
     f68:	a3 d2       	rcall	.+1350   	; 0x14b0 <HALSetEEPROMByte>
     f6a:	51 c0       	rjmp	.+162    	; 0x100e <BlockADCChannelConfig+0x1ec>
     f6c:	8c 2f       	mov	r24, r28
     f6e:	9d 2f       	mov	r25, r29
     f70:	09 96       	adiw	r24, 0x09	; 9
     f72:	fb d1       	rcall	.+1014   	; 0x136a <HALGetExtROMByte>
     f74:	e8 2e       	mov	r14, r24
     f76:	8b 2d       	mov	r24, r11
     f78:	99 27       	eor	r25, r25
     f7a:	67 e0       	ldi	r22, 0x07	; 7
     f7c:	70 e0       	ldi	r23, 0x00	; 0
     f7e:	79 d3       	rcall	.+1778   	; 0x1672 <__mulhi3>
     f80:	08 2f       	mov	r16, r24
     f82:	19 2f       	mov	r17, r25
     f84:	04 96       	adiw	r24, 0x04	; 4
     f86:	9a d2       	rcall	.+1332   	; 0x14bc <HALGetEEPROMWord>
     f88:	ee 2d       	mov	r30, r14
     f8a:	ff 27       	eor	r31, r31
     f8c:	e8 51       	subi	r30, 0x18	; 24
     f8e:	ff 4f       	sbci	r31, 0xFF	; 255
     f90:	80 83       	st	Z, r24
     f92:	89 2f       	mov	r24, r25
     f94:	99 27       	eor	r25, r25
     f96:	81 83       	std	Z+1, r24	; 0x01
     f98:	8c 2f       	mov	r24, r28
     f9a:	9d 2f       	mov	r25, r29
     f9c:	0a 96       	adiw	r24, 0x0a	; 10
     f9e:	e5 d1       	rcall	.+970    	; 0x136a <HALGetExtROMByte>
     fa0:	e8 2e       	mov	r14, r24
     fa2:	91 2f       	mov	r25, r17
     fa4:	80 2f       	mov	r24, r16
     fa6:	02 96       	adiw	r24, 0x02	; 2
     fa8:	89 d2       	rcall	.+1298   	; 0x14bc <HALGetEEPROMWord>
     faa:	ee 2d       	mov	r30, r14
     fac:	ff 27       	eor	r31, r31
     fae:	e8 51       	subi	r30, 0x18	; 24
     fb0:	ff 4f       	sbci	r31, 0xFF	; 255
     fb2:	80 83       	st	Z, r24
     fb4:	89 2f       	mov	r24, r25
     fb6:	99 27       	eor	r25, r25
     fb8:	81 83       	std	Z+1, r24	; 0x01
     fba:	8c 2f       	mov	r24, r28
     fbc:	9d 2f       	mov	r25, r29
     fbe:	0b 96       	adiw	r24, 0x0b	; 11
     fc0:	d4 d1       	rcall	.+936    	; 0x136a <HALGetExtROMByte>
     fc2:	e8 2e       	mov	r14, r24
     fc4:	91 2f       	mov	r25, r17
     fc6:	80 2f       	mov	r24, r16
     fc8:	06 96       	adiw	r24, 0x06	; 6
     fca:	6b d2       	rcall	.+1238   	; 0x14a2 <HALGetEEPROMByte>
     fcc:	ee 2d       	mov	r30, r14
     fce:	ff 27       	eor	r31, r31
     fd0:	e8 51       	subi	r30, 0x18	; 24
     fd2:	ff 4f       	sbci	r31, 0xFF	; 255
     fd4:	80 83       	st	Z, r24
     fd6:	8c 2f       	mov	r24, r28
     fd8:	9d 2f       	mov	r25, r29
     fda:	0c 96       	adiw	r24, 0x0c	; 12
     fdc:	c6 d1       	rcall	.+908    	; 0x136a <HALGetExtROMByte>
     fde:	e8 2e       	mov	r14, r24
     fe0:	91 2f       	mov	r25, r17
     fe2:	80 2f       	mov	r24, r16
     fe4:	07 96       	adiw	r24, 0x07	; 7
     fe6:	5d d2       	rcall	.+1210   	; 0x14a2 <HALGetEEPROMByte>
     fe8:	ee 2d       	mov	r30, r14
     fea:	ff 27       	eor	r31, r31
     fec:	e8 51       	subi	r30, 0x18	; 24
     fee:	ff 4f       	sbci	r31, 0xFF	; 255
     ff0:	80 83       	st	Z, r24
     ff2:	8c 2f       	mov	r24, r28
     ff4:	9d 2f       	mov	r25, r29
     ff6:	0d 96       	adiw	r24, 0x0d	; 13
     ff8:	b8 d1       	rcall	.+880    	; 0x136a <HALGetExtROMByte>
     ffa:	e8 2e       	mov	r14, r24
     ffc:	91 2f       	mov	r25, r17
     ffe:	80 2f       	mov	r24, r16
    1000:	08 96       	adiw	r24, 0x08	; 8
    1002:	4f d2       	rcall	.+1182   	; 0x14a2 <HALGetEEPROMByte>
    1004:	ee 2d       	mov	r30, r14
    1006:	ff 27       	eor	r31, r31
    1008:	e8 51       	subi	r30, 0x18	; 24
    100a:	ff 4f       	sbci	r31, 0xFF	; 255
    100c:	80 83       	st	Z, r24
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	df 91       	pop	r29
    1014:	cf 91       	pop	r28
    1016:	1f 91       	pop	r17
    1018:	0f 91       	pop	r16
    101a:	ff 90       	pop	r15
    101c:	ef 90       	pop	r14
    101e:	df 90       	pop	r13
    1020:	cf 90       	pop	r12
    1022:	bf 90       	pop	r11
    1024:	08 95       	ret

00001026 <BlockADCMask>:
    1026:	1f 93       	push	r17
    1028:	cf 93       	push	r28
    102a:	df 93       	push	r29
    102c:	d9 2f       	mov	r29, r25
    102e:	c8 2f       	mov	r28, r24
    1030:	9c d1       	rcall	.+824    	; 0x136a <HALGetExtROMByte>
    1032:	e8 2f       	mov	r30, r24
    1034:	ff 27       	eor	r31, r31
    1036:	e8 51       	subi	r30, 0x18	; 24
    1038:	ff 4f       	sbci	r31, 0xFF	; 255
    103a:	80 81       	ld	r24, Z
    103c:	88 23       	and	r24, r24
    103e:	71 f0       	breq	.+28     	; 0x105c <BlockADCMask+0x36>
    1040:	8c 2f       	mov	r24, r28
    1042:	9d 2f       	mov	r25, r29
    1044:	01 96       	adiw	r24, 0x01	; 1
    1046:	91 d1       	rcall	.+802    	; 0x136a <HALGetExtROMByte>
    1048:	e8 2f       	mov	r30, r24
    104a:	ff 27       	eor	r31, r31
    104c:	e8 51       	subi	r30, 0x18	; 24
    104e:	ff 4f       	sbci	r31, 0xFF	; 255
    1050:	10 81       	ld	r17, Z
    1052:	61 2f       	mov	r22, r17
    1054:	81 e0       	ldi	r24, 0x01	; 1
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	2b d2       	rcall	.+1110   	; 0x14b0 <HALSetEEPROMByte>
    105a:	04 c0       	rjmp	.+8      	; 0x1064 <BlockADCMask+0x3e>
    105c:	81 e0       	ldi	r24, 0x01	; 1
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	20 d2       	rcall	.+1088   	; 0x14a2 <HALGetEEPROMByte>
    1062:	18 2f       	mov	r17, r24
    1064:	8c 2f       	mov	r24, r28
    1066:	9d 2f       	mov	r25, r29
    1068:	03 96       	adiw	r24, 0x03	; 3
    106a:	7f d1       	rcall	.+766    	; 0x136a <HALGetExtROMByte>
    106c:	e8 2f       	mov	r30, r24
    106e:	ff 27       	eor	r31, r31
    1070:	e8 51       	subi	r30, 0x18	; 24
    1072:	ff 4f       	sbci	r31, 0xFF	; 255
    1074:	10 83       	st	Z, r17
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	df 91       	pop	r29
    107c:	cf 91       	pop	r28
    107e:	1f 91       	pop	r17
    1080:	08 95       	ret

00001082 <BlockModuleAddress>:
    1082:	1f 93       	push	r17
    1084:	cf 93       	push	r28
    1086:	df 93       	push	r29
    1088:	d9 2f       	mov	r29, r25
    108a:	c8 2f       	mov	r28, r24
    108c:	6e d1       	rcall	.+732    	; 0x136a <HALGetExtROMByte>
    108e:	e8 2f       	mov	r30, r24
    1090:	ff 27       	eor	r31, r31
    1092:	e8 51       	subi	r30, 0x18	; 24
    1094:	ff 4f       	sbci	r31, 0xFF	; 255
    1096:	80 81       	ld	r24, Z
    1098:	88 23       	and	r24, r24
    109a:	29 f4       	brne	.+10     	; 0x10a6 <BlockModuleAddress+0x24>
    109c:	80 e0       	ldi	r24, 0x00	; 0
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	00 d2       	rcall	.+1024   	; 0x14a2 <HALGetEEPROMByte>
    10a2:	18 2f       	mov	r17, r24
    10a4:	0d c0       	rjmp	.+26     	; 0x10c0 <BlockModuleAddress+0x3e>
    10a6:	8c 2f       	mov	r24, r28
    10a8:	9d 2f       	mov	r25, r29
    10aa:	01 96       	adiw	r24, 0x01	; 1
    10ac:	5e d1       	rcall	.+700    	; 0x136a <HALGetExtROMByte>
    10ae:	e8 2f       	mov	r30, r24
    10b0:	ff 27       	eor	r31, r31
    10b2:	e8 51       	subi	r30, 0x18	; 24
    10b4:	ff 4f       	sbci	r31, 0xFF	; 255
    10b6:	10 81       	ld	r17, Z
    10b8:	61 2f       	mov	r22, r17
    10ba:	80 e0       	ldi	r24, 0x00	; 0
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	f8 d1       	rcall	.+1008   	; 0x14b0 <HALSetEEPROMByte>
    10c0:	8c 2f       	mov	r24, r28
    10c2:	9d 2f       	mov	r25, r29
    10c4:	03 96       	adiw	r24, 0x03	; 3
    10c6:	51 d1       	rcall	.+674    	; 0x136a <HALGetExtROMByte>
    10c8:	e8 2f       	mov	r30, r24
    10ca:	ff 27       	eor	r31, r31
    10cc:	e8 51       	subi	r30, 0x18	; 24
    10ce:	ff 4f       	sbci	r31, 0xFF	; 255
    10d0:	10 83       	st	Z, r17
    10d2:	81 e0       	ldi	r24, 0x01	; 1
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	df 91       	pop	r29
    10d8:	cf 91       	pop	r28
    10da:	1f 91       	pop	r17
    10dc:	08 95       	ret

000010de <BlockADC>:
    10de:	cf 93       	push	r28
    10e0:	df 93       	push	r29
    10e2:	d9 2f       	mov	r29, r25
    10e4:	c8 2f       	mov	r28, r24
    10e6:	41 d1       	rcall	.+642    	; 0x136a <HALGetExtROMByte>
    10e8:	e8 2f       	mov	r30, r24
    10ea:	ff 27       	eor	r31, r31
    10ec:	e8 51       	subi	r30, 0x18	; 24
    10ee:	ff 4f       	sbci	r31, 0xFF	; 255
    10f0:	80 81       	ld	r24, Z
    10f2:	88 23       	and	r24, r24
    10f4:	41 f0       	breq	.+16     	; 0x1106 <BlockADC+0x28>
    10f6:	3a d2       	rcall	.+1140   	; 0x156c <HALGetADCReady>
    10f8:	88 23       	and	r24, r24
    10fa:	41 f0       	breq	.+16     	; 0x110c <BlockADC+0x2e>
    10fc:	81 e0       	ldi	r24, 0x01	; 1
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	d0 d1       	rcall	.+928    	; 0x14a2 <HALGetEEPROMByte>
    1102:	0b d2       	rcall	.+1046   	; 0x151a <HALRunADC>
    1104:	58 c0       	rjmp	.+176    	; 0x11b6 <BlockADC+0xd8>
    1106:	32 d2       	rcall	.+1124   	; 0x156c <HALGetADCReady>
    1108:	88 23       	and	r24, r24
    110a:	31 f4       	brne	.+12     	; 0x1118 <BlockADC+0x3a>
    110c:	84 e0       	ldi	r24, 0x04	; 4
    110e:	80 93 29 01 	sts	0x0129, r24
    1112:	80 e0       	ldi	r24, 0x00	; 0
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	51 c0       	rjmp	.+162    	; 0x11ba <BlockADC+0xdc>
    1118:	8c 2f       	mov	r24, r28
    111a:	9d 2f       	mov	r25, r29
    111c:	03 96       	adiw	r24, 0x03	; 3
    111e:	25 d1       	rcall	.+586    	; 0x136a <HALGetExtROMByte>
    1120:	e8 2f       	mov	r30, r24
    1122:	ff 27       	eor	r31, r31
    1124:	e8 51       	subi	r30, 0x18	; 24
    1126:	ff 4f       	sbci	r31, 0xFF	; 255
    1128:	10 82       	st	Z, r1
    112a:	8c 2f       	mov	r24, r28
    112c:	9d 2f       	mov	r25, r29
    112e:	04 96       	adiw	r24, 0x04	; 4
    1130:	1c d1       	rcall	.+568    	; 0x136a <HALGetExtROMByte>
    1132:	e8 2f       	mov	r30, r24
    1134:	ff 27       	eor	r31, r31
    1136:	e8 51       	subi	r30, 0x18	; 24
    1138:	ff 4f       	sbci	r31, 0xFF	; 255
    113a:	81 e0       	ldi	r24, 0x01	; 1
    113c:	80 83       	st	Z, r24
    113e:	8c 2f       	mov	r24, r28
    1140:	9d 2f       	mov	r25, r29
    1142:	05 96       	adiw	r24, 0x05	; 5
    1144:	12 d1       	rcall	.+548    	; 0x136a <HALGetExtROMByte>
    1146:	e8 2f       	mov	r30, r24
    1148:	ff 27       	eor	r31, r31
    114a:	e8 51       	subi	r30, 0x18	; 24
    114c:	ff 4f       	sbci	r31, 0xFF	; 255
    114e:	82 e0       	ldi	r24, 0x02	; 2
    1150:	80 83       	st	Z, r24
    1152:	8c 2f       	mov	r24, r28
    1154:	9d 2f       	mov	r25, r29
    1156:	06 96       	adiw	r24, 0x06	; 6
    1158:	08 d1       	rcall	.+528    	; 0x136a <HALGetExtROMByte>
    115a:	e8 2f       	mov	r30, r24
    115c:	ff 27       	eor	r31, r31
    115e:	e8 51       	subi	r30, 0x18	; 24
    1160:	ff 4f       	sbci	r31, 0xFF	; 255
    1162:	83 e0       	ldi	r24, 0x03	; 3
    1164:	80 83       	st	Z, r24
    1166:	8c 2f       	mov	r24, r28
    1168:	9d 2f       	mov	r25, r29
    116a:	07 96       	adiw	r24, 0x07	; 7
    116c:	fe d0       	rcall	.+508    	; 0x136a <HALGetExtROMByte>
    116e:	e8 2f       	mov	r30, r24
    1170:	ff 27       	eor	r31, r31
    1172:	e8 51       	subi	r30, 0x18	; 24
    1174:	ff 4f       	sbci	r31, 0xFF	; 255
    1176:	84 e0       	ldi	r24, 0x04	; 4
    1178:	80 83       	st	Z, r24
    117a:	8c 2f       	mov	r24, r28
    117c:	9d 2f       	mov	r25, r29
    117e:	08 96       	adiw	r24, 0x08	; 8
    1180:	f4 d0       	rcall	.+488    	; 0x136a <HALGetExtROMByte>
    1182:	e8 2f       	mov	r30, r24
    1184:	ff 27       	eor	r31, r31
    1186:	e8 51       	subi	r30, 0x18	; 24
    1188:	ff 4f       	sbci	r31, 0xFF	; 255
    118a:	85 e0       	ldi	r24, 0x05	; 5
    118c:	80 83       	st	Z, r24
    118e:	8c 2f       	mov	r24, r28
    1190:	9d 2f       	mov	r25, r29
    1192:	09 96       	adiw	r24, 0x09	; 9
    1194:	ea d0       	rcall	.+468    	; 0x136a <HALGetExtROMByte>
    1196:	e8 2f       	mov	r30, r24
    1198:	ff 27       	eor	r31, r31
    119a:	e8 51       	subi	r30, 0x18	; 24
    119c:	ff 4f       	sbci	r31, 0xFF	; 255
    119e:	86 e0       	ldi	r24, 0x06	; 6
    11a0:	80 83       	st	Z, r24
    11a2:	8c 2f       	mov	r24, r28
    11a4:	9d 2f       	mov	r25, r29
    11a6:	0a 96       	adiw	r24, 0x0a	; 10
    11a8:	e0 d0       	rcall	.+448    	; 0x136a <HALGetExtROMByte>
    11aa:	e8 2f       	mov	r30, r24
    11ac:	ff 27       	eor	r31, r31
    11ae:	e8 51       	subi	r30, 0x18	; 24
    11b0:	ff 4f       	sbci	r31, 0xFF	; 255
    11b2:	87 e0       	ldi	r24, 0x07	; 7
    11b4:	80 83       	st	Z, r24
    11b6:	81 e0       	ldi	r24, 0x01	; 1
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	df 91       	pop	r29
    11bc:	cf 91       	pop	r28
    11be:	08 95       	ret

000011c0 <Block1>:
    11c0:	bf 92       	push	r11
    11c2:	cf 92       	push	r12
    11c4:	df 92       	push	r13
    11c6:	ef 92       	push	r14
    11c8:	ff 92       	push	r15
    11ca:	0f 93       	push	r16
    11cc:	1f 93       	push	r17
    11ce:	cf 93       	push	r28
    11d0:	df 93       	push	r29
    11d2:	08 2f       	mov	r16, r24
    11d4:	19 2f       	mov	r17, r25
    11d6:	c9 d0       	rcall	.+402    	; 0x136a <HALGetExtROMByte>
    11d8:	b8 2e       	mov	r11, r24
    11da:	e0 2e       	mov	r14, r16
    11dc:	f1 2e       	mov	r15, r17
    11de:	08 94       	sec
    11e0:	e1 1c       	adc	r14, r1
    11e2:	f1 1c       	adc	r15, r1
    11e4:	cc 24       	eor	r12, r12
    11e6:	ab c0       	rjmp	.+342    	; 0x133e <Block1+0x17e>
    11e8:	9f 2d       	mov	r25, r15
    11ea:	8e 2d       	mov	r24, r14
    11ec:	be d0       	rcall	.+380    	; 0x136a <HALGetExtROMByte>
    11ee:	08 2f       	mov	r16, r24
    11f0:	9f 2d       	mov	r25, r15
    11f2:	8e 2d       	mov	r24, r14
    11f4:	01 96       	adiw	r24, 0x01	; 1
    11f6:	b9 d0       	rcall	.+370    	; 0x136a <HALGetExtROMByte>
    11f8:	18 2f       	mov	r17, r24
    11fa:	9f 2d       	mov	r25, r15
    11fc:	8e 2d       	mov	r24, r14
    11fe:	02 96       	adiw	r24, 0x02	; 2
    1200:	b4 d0       	rcall	.+360    	; 0x136a <HALGetExtROMByte>
    1202:	d8 2e       	mov	r13, r24
    1204:	11 23       	and	r17, r17
    1206:	69 f4       	brne	.+26     	; 0x1222 <Block1+0x62>
    1208:	09 c0       	rjmp	.+18     	; 0x121c <Block1+0x5c>
    120a:	e0 2f       	mov	r30, r16
    120c:	ff 27       	eor	r31, r31
    120e:	e8 51       	subi	r30, 0x18	; 24
    1210:	ff 4f       	sbci	r31, 0xFF	; 255
    1212:	e1 0f       	add	r30, r17
    1214:	f1 1d       	adc	r31, r1
    1216:	80 81       	ld	r24, Z
    1218:	04 d1       	rcall	.+520    	; 0x1422 <HALWriteOutCommandByte>
    121a:	1f 5f       	subi	r17, 0xFF	; 255
    121c:	1d 15       	cp	r17, r13
    121e:	a9 f7       	brne	.-22     	; 0x120a <Block1+0x4a>
    1220:	89 c0       	rjmp	.+274    	; 0x1334 <Block1+0x174>
    1222:	12 30       	cpi	r17, 0x02	; 2
    1224:	09 f0       	breq	.+2      	; 0x1228 <Block1+0x68>
    1226:	82 c0       	rjmp	.+260    	; 0x132c <Block1+0x16c>
    1228:	e0 2f       	mov	r30, r16
    122a:	ff 27       	eor	r31, r31
    122c:	e8 51       	subi	r30, 0x18	; 24
    122e:	ff 4f       	sbci	r31, 0xFF	; 255
    1230:	20 81       	ld	r18, Z
    1232:	c2 2f       	mov	r28, r18
    1234:	dd 27       	eor	r29, r29
    1236:	8c 2f       	mov	r24, r28
    1238:	9d 2f       	mov	r25, r29
    123a:	67 e0       	ldi	r22, 0x07	; 7
    123c:	70 e0       	ldi	r23, 0x00	; 0
    123e:	19 d2       	rcall	.+1074   	; 0x1672 <__mulhi3>
    1240:	b9 2f       	mov	r27, r25
    1242:	a8 2f       	mov	r26, r24
    1244:	a7 55       	subi	r26, 0x57	; 87
    1246:	bf 4f       	sbci	r27, 0xFF	; 255
    1248:	fb 2f       	mov	r31, r27
    124a:	ea 2f       	mov	r30, r26
    124c:	84 81       	ldd	r24, Z+4	; 0x04
    124e:	81 30       	cpi	r24, 0x01	; 1
    1250:	11 f4       	brne	.+4      	; 0x1256 <Block1+0x96>
    1252:	02 81       	ldd	r16, Z+2	; 0x02
    1254:	08 c0       	rjmp	.+16     	; 0x1266 <Block1+0xa6>
    1256:	82 30       	cpi	r24, 0x02	; 2
    1258:	11 f0       	breq	.+4      	; 0x125e <Block1+0x9e>
    125a:	00 e0       	ldi	r16, 0x00	; 0
    125c:	04 c0       	rjmp	.+8      	; 0x1266 <Block1+0xa6>
    125e:	fb 2f       	mov	r31, r27
    1260:	ea 2f       	mov	r30, r26
    1262:	02 81       	ldd	r16, Z+2	; 0x02
    1264:	00 0f       	add	r16, r16
    1266:	29 30       	cpi	r18, 0x09	; 9
    1268:	40 f0       	brcs	.+16     	; 0x127a <Block1+0xba>
    126a:	82 e0       	ldi	r24, 0x02	; 2
    126c:	80 93 29 01 	sts	0x0129, r24
    1270:	8d e0       	ldi	r24, 0x0D	; 13
    1272:	d7 d0       	rcall	.+430    	; 0x1422 <HALWriteOutCommandByte>
    1274:	80 e0       	ldi	r24, 0x00	; 0
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	69 c0       	rjmp	.+210    	; 0x134c <Block1+0x18c>
    127a:	8c 2f       	mov	r24, r28
    127c:	9d 2f       	mov	r25, r29
    127e:	67 e0       	ldi	r22, 0x07	; 7
    1280:	70 e0       	ldi	r23, 0x00	; 0
    1282:	f7 d1       	rcall	.+1006   	; 0x1672 <__mulhi3>
    1284:	f9 2f       	mov	r31, r25
    1286:	e8 2f       	mov	r30, r24
    1288:	e7 55       	subi	r30, 0x57	; 87
    128a:	ff 4f       	sbci	r31, 0xFF	; 255
    128c:	80 81       	ld	r24, Z
    128e:	88 23       	and	r24, r24
    1290:	11 f4       	brne	.+4      	; 0x1296 <Block1+0xd6>
    1292:	10 e0       	ldi	r17, 0x00	; 0
    1294:	48 c0       	rjmp	.+144    	; 0x1326 <Block1+0x166>
    1296:	dd 24       	eor	r13, r13
    1298:	32 c0       	rjmp	.+100    	; 0x12fe <Block1+0x13e>
    129a:	8c 2f       	mov	r24, r28
    129c:	9d 2f       	mov	r25, r29
    129e:	67 e0       	ldi	r22, 0x07	; 7
    12a0:	70 e0       	ldi	r23, 0x00	; 0
    12a2:	e7 d1       	rcall	.+974    	; 0x1672 <__mulhi3>
    12a4:	f9 2f       	mov	r31, r25
    12a6:	e8 2f       	mov	r30, r24
    12a8:	e7 55       	subi	r30, 0x57	; 87
    12aa:	ff 4f       	sbci	r31, 0xFF	; 255
    12ac:	05 80       	ldd	r0, Z+5	; 0x05
    12ae:	f6 81       	ldd	r31, Z+6	; 0x06
    12b0:	e0 2d       	mov	r30, r0
    12b2:	ed 0d       	add	r30, r13
    12b4:	f1 1d       	adc	r31, r1
    12b6:	80 81       	ld	r24, Z
    12b8:	98 2f       	mov	r25, r24
    12ba:	9f 70       	andi	r25, 0x0F	; 15
    12bc:	28 2f       	mov	r18, r24
    12be:	22 95       	swap	r18
    12c0:	2f 70       	andi	r18, 0x0F	; 15
    12c2:	9a 30       	cpi	r25, 0x0A	; 10
    12c4:	18 f4       	brcc	.+6      	; 0x12cc <Block1+0x10c>
    12c6:	19 2f       	mov	r17, r25
    12c8:	10 5d       	subi	r17, 0xD0	; 208
    12ca:	08 c0       	rjmp	.+16     	; 0x12dc <Block1+0x11c>
    12cc:	89 2f       	mov	r24, r25
    12ce:	8a 50       	subi	r24, 0x0A	; 10
    12d0:	86 30       	cpi	r24, 0x06	; 6
    12d2:	10 f0       	brcs	.+4      	; 0x12d8 <Block1+0x118>
    12d4:	10 e0       	ldi	r17, 0x00	; 0
    12d6:	02 c0       	rjmp	.+4      	; 0x12dc <Block1+0x11c>
    12d8:	19 2f       	mov	r17, r25
    12da:	19 5c       	subi	r17, 0xC9	; 201
    12dc:	2a 30       	cpi	r18, 0x0A	; 10
    12de:	18 f4       	brcc	.+6      	; 0x12e6 <Block1+0x126>
    12e0:	82 2f       	mov	r24, r18
    12e2:	80 5d       	subi	r24, 0xD0	; 208
    12e4:	08 c0       	rjmp	.+16     	; 0x12f6 <Block1+0x136>
    12e6:	82 2f       	mov	r24, r18
    12e8:	8a 50       	subi	r24, 0x0A	; 10
    12ea:	86 30       	cpi	r24, 0x06	; 6
    12ec:	10 f0       	brcs	.+4      	; 0x12f2 <Block1+0x132>
    12ee:	80 e0       	ldi	r24, 0x00	; 0
    12f0:	02 c0       	rjmp	.+4      	; 0x12f6 <Block1+0x136>
    12f2:	82 2f       	mov	r24, r18
    12f4:	89 5c       	subi	r24, 0xC9	; 201
    12f6:	95 d0       	rcall	.+298    	; 0x1422 <HALWriteOutCommandByte>
    12f8:	81 2f       	mov	r24, r17
    12fa:	93 d0       	rcall	.+294    	; 0x1422 <HALWriteOutCommandByte>
    12fc:	d3 94       	inc	r13
    12fe:	d0 16       	cp	r13, r16
    1300:	61 f6       	brne	.-104    	; 0x129a <Block1+0xda>
    1302:	18 c0       	rjmp	.+48     	; 0x1334 <Block1+0x174>
    1304:	8c 2f       	mov	r24, r28
    1306:	9d 2f       	mov	r25, r29
    1308:	67 e0       	ldi	r22, 0x07	; 7
    130a:	70 e0       	ldi	r23, 0x00	; 0
    130c:	b2 d1       	rcall	.+868    	; 0x1672 <__mulhi3>
    130e:	f9 2f       	mov	r31, r25
    1310:	e8 2f       	mov	r30, r24
    1312:	e7 55       	subi	r30, 0x57	; 87
    1314:	ff 4f       	sbci	r31, 0xFF	; 255
    1316:	05 80       	ldd	r0, Z+5	; 0x05
    1318:	f6 81       	ldd	r31, Z+6	; 0x06
    131a:	e0 2d       	mov	r30, r0
    131c:	e1 0f       	add	r30, r17
    131e:	f1 1d       	adc	r31, r1
    1320:	80 81       	ld	r24, Z
    1322:	7f d0       	rcall	.+254    	; 0x1422 <HALWriteOutCommandByte>
    1324:	1f 5f       	subi	r17, 0xFF	; 255
    1326:	10 17       	cp	r17, r16
    1328:	69 f7       	brne	.-38     	; 0x1304 <Block1+0x144>
    132a:	04 c0       	rjmp	.+8      	; 0x1334 <Block1+0x174>
    132c:	11 30       	cpi	r17, 0x01	; 1
    132e:	11 f4       	brne	.+4      	; 0x1334 <Block1+0x174>
    1330:	80 2f       	mov	r24, r16
    1332:	77 d0       	rcall	.+238    	; 0x1422 <HALWriteOutCommandByte>
    1334:	83 e0       	ldi	r24, 0x03	; 3
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	e8 0e       	add	r14, r24
    133a:	f9 1e       	adc	r15, r25
    133c:	c3 94       	inc	r12
    133e:	cb 14       	cp	r12, r11
    1340:	09 f0       	breq	.+2      	; 0x1344 <Block1+0x184>
    1342:	52 cf       	rjmp	.-348    	; 0x11e8 <Block1+0x28>
    1344:	8d e0       	ldi	r24, 0x0D	; 13
    1346:	6d d0       	rcall	.+218    	; 0x1422 <HALWriteOutCommandByte>
    1348:	81 e0       	ldi	r24, 0x01	; 1
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	df 91       	pop	r29
    134e:	cf 91       	pop	r28
    1350:	1f 91       	pop	r17
    1352:	0f 91       	pop	r16
    1354:	ff 90       	pop	r15
    1356:	ef 90       	pop	r14
    1358:	df 90       	pop	r13
    135a:	cf 90       	pop	r12
    135c:	bf 90       	pop	r11
    135e:	08 95       	ret

00001360 <HALInitExtROM>:
// ******************************************************

inline void HALInitExtROM (void)
{
	DDRB = _BV(DDB7) | _BV(DDB5);
    1360:	80 ea       	ldi	r24, 0xA0	; 160
    1362:	87 bb       	out	0x17, r24	; 23
	SPCR = _BV(SPE) | _BV(MSTR);
    1364:	80 e5       	ldi	r24, 0x50	; 80
    1366:	8d b9       	out	0x0d, r24	; 13
    1368:	08 95       	ret

0000136a <HALGetExtROMByte>:
}

unsigned char HALGetExtROMByte (unsigned short addr)
{
    136a:	28 2f       	mov	r18, r24
    136c:	39 2f       	mov	r19, r25
	unsigned char dataByte = 0;
	
	SPDR = (addr >> 8);				// hi
    136e:	83 2f       	mov	r24, r19
    1370:	99 27       	eor	r25, r25
    1372:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
    1374:	77 9b       	sbis	0x0e, 7	; 14
    1376:	fe cf       	rjmp	.-4      	; 0x1374 <HALGetExtROMByte+0xa>
	SPDR = (unsigned char)addr;	// lo
    1378:	2f b9       	out	0x0f, r18	; 15
	loop_until_bit_is_set(SPSR, SPIF);
    137a:	77 9b       	sbis	0x0e, 7	; 14
    137c:	fe cf       	rjmp	.-4      	; 0x137a <HALGetExtROMByte+0x10>
	SPDR = 0xFF;
    137e:	8f ef       	ldi	r24, 0xFF	; 255
    1380:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
    1382:	77 9b       	sbis	0x0e, 7	; 14
    1384:	fe cf       	rjmp	.-4      	; 0x1382 <HALGetExtROMByte+0x18>
	dataByte = SPDR;
    1386:	8f b1       	in	r24, 0x0f	; 15
	
	return dataByte;
}
    1388:	99 27       	eor	r25, r25
    138a:	08 95       	ret

0000138c <HALInitUART>:

// ******************************************************
// ********     Чтение\запись команд в UART     *********
// ******************************************************

inline void HALInitUART (void)
{
	UBRR = (F_CPU / (16UL * UART_BAUD)) - 1;
    138c:	8c e0       	ldi	r24, 0x0C	; 12
    138e:	89 b9       	out	0x09, r24	; 9
	UCR = _BV(TXEN) | _BV(RXEN) | _BV(TXB8) | _BV(RXCIE);
    1390:	89 e9       	ldi	r24, 0x99	; 153
    1392:	8a b9       	out	0x0a, r24	; 10
    1394:	08 95       	ret

00001396 <__vector_11>:
}

ISR(UART_RX_vect)
{	
    1396:	1f 92       	push	r1
    1398:	0f 92       	push	r0
    139a:	0f b6       	in	r0, 0x3f	; 63
    139c:	0f 92       	push	r0
    139e:	11 24       	eor	r1, r1
    13a0:	2f 93       	push	r18
    13a2:	3f 93       	push	r19
    13a4:	4f 93       	push	r20
    13a6:	5f 93       	push	r21
    13a8:	8f 93       	push	r24
    13aa:	9f 93       	push	r25
    13ac:	ef 93       	push	r30
    13ae:	ff 93       	push	r31
	unsigned char c;
	unsigned short bufSize;
	
	c = UDR;
    13b0:	5c b1       	in	r21, 0x0c	; 12
	
	if (ComProcData.InCommandState == IN_COMMAND_STATE_PROCESSED)	
    13b2:	80 91 28 01 	lds	r24, 0x0128
    13b6:	88 23       	and	r24, r24
    13b8:	39 f5       	brne	.+78     	; 0x1408 <__vector_11+0x72>
	{
		bufSize = Buffers[BUFFER_IN_COMMAND_ID].Size;
    13ba:	40 91 e3 00 	lds	r20, 0x00E3
    13be:	24 2f       	mov	r18, r20
    13c0:	33 27       	eor	r19, r19
		if ((bufSize >= Buffers[BUFFER_IN_COMMAND_ID].MaxSize) || (c == EOC))
    13c2:	80 91 e2 00 	lds	r24, 0x00E2
    13c6:	99 27       	eor	r25, r25
    13c8:	28 17       	cp	r18, r24
    13ca:	39 07       	cpc	r19, r25
    13cc:	10 f4       	brcc	.+4      	; 0x13d2 <__vector_11+0x3c>
    13ce:	5d 30       	cpi	r21, 0x0D	; 13
    13d0:	81 f4       	brne	.+32     	; 0x13f2 <__vector_11+0x5c>
		{
			// внутренние команды игнорируются
  			if ((bufSize > 0) && (Buffers[BUFFER_IN_COMMAND_ID].Data[0] == INTERNAL_COMMAND_PREFIX))
    13d2:	44 23       	and	r20, r20
    13d4:	51 f0       	breq	.+20     	; 0x13ea <__vector_11+0x54>
    13d6:	e0 91 e6 00 	lds	r30, 0x00E6
    13da:	f0 91 e7 00 	lds	r31, 0x00E7
    13de:	80 81       	ld	r24, Z
    13e0:	80 34       	cpi	r24, 0x40	; 64
    13e2:	19 f4       	brne	.+6      	; 0x13ea <__vector_11+0x54>
  			{
  				Buffers[BUFFER_IN_COMMAND_ID].Size = 0;
    13e4:	10 92 e3 00 	sts	0x00E3, r1
    13e8:	0f c0       	rjmp	.+30     	; 0x1408 <__vector_11+0x72>
  				return;	
  			}
  							
			ComProcData.InCommandState = IN_COMMAND_STATE_READY_TO_PROCESS;
    13ea:	81 e0       	ldi	r24, 0x01	; 1
    13ec:	80 93 28 01 	sts	0x0128, r24
    13f0:	0b c0       	rjmp	.+22     	; 0x1408 <__vector_11+0x72>
			return;		
		}

		Buffers[BUFFER_IN_COMMAND_ID].Data[bufSize] = c;
    13f2:	e0 91 e6 00 	lds	r30, 0x00E6
    13f6:	f0 91 e7 00 	lds	r31, 0x00E7
    13fa:	e2 0f       	add	r30, r18
    13fc:	f3 1f       	adc	r31, r19
    13fe:	50 83       	st	Z, r21
		bufSize++;
		Buffers[BUFFER_IN_COMMAND_ID].Size = bufSize;
    1400:	2f 5f       	subi	r18, 0xFF	; 255
    1402:	3f 4f       	sbci	r19, 0xFF	; 255
    1404:	20 93 e3 00 	sts	0x00E3, r18
    1408:	ff 91       	pop	r31
    140a:	ef 91       	pop	r30
    140c:	9f 91       	pop	r25
    140e:	8f 91       	pop	r24
    1410:	5f 91       	pop	r21
    1412:	4f 91       	pop	r20
    1414:	3f 91       	pop	r19
    1416:	2f 91       	pop	r18
    1418:	0f 90       	pop	r0
    141a:	0f be       	out	0x3f, r0	; 63
    141c:	0f 90       	pop	r0
    141e:	1f 90       	pop	r1
    1420:	18 95       	reti

00001422 <HALWriteOutCommandByte>:
	}
}

void HALWriteOutCommandByte (unsigned char byte)
{
	loop_until_bit_is_set(USR, UDRE);
    1422:	5d 9b       	sbis	0x0b, 5	; 11
    1424:	fe cf       	rjmp	.-4      	; 0x1422 <HALWriteOutCommandByte>
	UDR = byte;
    1426:	8c b9       	out	0x0c, r24	; 12
    1428:	08 95       	ret

0000142a <HALInitEEPROM>:
}

// ******************************************************
// ******** Чтение\запись конфигурации в EEPROM *********
// ******************************************************

inline void HALInitEEPROM (void)
{
    142a:	ed e2       	ldi	r30, 0x2D	; 45
    142c:	f1 e0       	ldi	r31, 0x01	; 1
	//TODO: сделать инициализацию реальной EEPROM (если это вообще нужно)
	unsigned short i;
	
	// сейчас инициализация временной структуры нулями
	for (i = 0; i < EEPROM_SIZE; i++)
		EEPROMData[i] = 0;
    142e:	11 92       	st	Z+, r1
    1430:	81 e0       	ldi	r24, 0x01	; 1
    1432:	ed 35       	cpi	r30, 0x5D	; 93
    1434:	f8 07       	cpc	r31, r24
    1436:	d9 f7       	brne	.-10     	; 0x142e <HALInitEEPROM+0x4>
		
	HALSetEEPROMWord(EEPROM_APPROX_TABLES + 0, 0); // code 0
	HALSetEEPROMWord(EEPROM_APPROX_TABLES + 2, 5000); // code 128
	HALSetEEPROMWord(EEPROM_APPROX_TABLES + 4, 10000); // code 256
	HALSetEEPROMWord(EEPROM_APPROX_TABLES + 6, 15000); // code 384
	HALSetEEPROMWord(EEPROM_APPROX_TABLES + 8, 20000); // code 512
	HALSetEEPROMWord(EEPROM_APPROX_TABLES + 10, 30000); // code 640
	HALSetEEPROMWord(EEPROM_APPROX_TABLES + 12, 45000); // code 768
	HALSetEEPROMWord(EEPROM_APPROX_TABLES + 14, 50000); // code 896
	HALSetEEPROMWord(EEPROM_APPROX_TABLES + 16, 60000); // code 1024
}

unsigned char HALGetEEPROMByte(unsigned short addr)
{
	//TODO: через EEPROM
	return EEPROMData[addr];
}

void HALSetEEPROMByte(unsigned short addr, unsigned char byte)
{
	//TODO: через EEPROM
	EEPROMData[addr] = byte;
}

unsigned short HALGetEEPROMWord(unsigned short addr)
{
	//TODO: через EEPROM
	//unsigned short word;
	
	//CREATE_WORD(EEPROMData[addr], EEPROMData[addr + 1], word);
	return *(unsigned short *)(EEPROMData + addr);
}

void HALSetEEPROMWord(unsigned short addr, unsigned short word)
{
	//TODO: через EEPROM
	*(unsigned short *)(EEPROMData + addr) = word;
    1438:	10 92 4c 01 	sts	0x014C, r1
    143c:	10 92 4b 01 	sts	0x014B, r1
    1440:	88 e8       	ldi	r24, 0x88	; 136
    1442:	93 e1       	ldi	r25, 0x13	; 19
    1444:	90 93 4e 01 	sts	0x014E, r25
    1448:	80 93 4d 01 	sts	0x014D, r24
    144c:	80 e1       	ldi	r24, 0x10	; 16
    144e:	97 e2       	ldi	r25, 0x27	; 39
    1450:	90 93 50 01 	sts	0x0150, r25
    1454:	80 93 4f 01 	sts	0x014F, r24
    1458:	88 e9       	ldi	r24, 0x98	; 152
    145a:	9a e3       	ldi	r25, 0x3A	; 58
    145c:	90 93 52 01 	sts	0x0152, r25
    1460:	80 93 51 01 	sts	0x0151, r24
    1464:	80 e2       	ldi	r24, 0x20	; 32
    1466:	9e e4       	ldi	r25, 0x4E	; 78
    1468:	90 93 54 01 	sts	0x0154, r25
    146c:	80 93 53 01 	sts	0x0153, r24
    1470:	80 e3       	ldi	r24, 0x30	; 48
    1472:	95 e7       	ldi	r25, 0x75	; 117
    1474:	90 93 56 01 	sts	0x0156, r25
    1478:	80 93 55 01 	sts	0x0155, r24
    147c:	88 ec       	ldi	r24, 0xC8	; 200
    147e:	9f ea       	ldi	r25, 0xAF	; 175
    1480:	90 93 58 01 	sts	0x0158, r25
    1484:	80 93 57 01 	sts	0x0157, r24
    1488:	80 e5       	ldi	r24, 0x50	; 80
    148a:	93 ec       	ldi	r25, 0xC3	; 195
    148c:	90 93 5a 01 	sts	0x015A, r25
    1490:	80 93 59 01 	sts	0x0159, r24
    1494:	80 e6       	ldi	r24, 0x60	; 96
    1496:	9a ee       	ldi	r25, 0xEA	; 234
    1498:	90 93 5c 01 	sts	0x015C, r25
    149c:	80 93 5b 01 	sts	0x015B, r24
    14a0:	08 95       	ret

000014a2 <HALGetEEPROMByte>:
    14a2:	f9 2f       	mov	r31, r25
    14a4:	e8 2f       	mov	r30, r24
    14a6:	e3 5d       	subi	r30, 0xD3	; 211
    14a8:	fe 4f       	sbci	r31, 0xFE	; 254
    14aa:	80 81       	ld	r24, Z
    14ac:	99 27       	eor	r25, r25
    14ae:	08 95       	ret

000014b0 <HALSetEEPROMByte>:
    14b0:	f9 2f       	mov	r31, r25
    14b2:	e8 2f       	mov	r30, r24
    14b4:	e3 5d       	subi	r30, 0xD3	; 211
    14b6:	fe 4f       	sbci	r31, 0xFE	; 254
    14b8:	60 83       	st	Z, r22
    14ba:	08 95       	ret

000014bc <HALGetEEPROMWord>:
    14bc:	f9 2f       	mov	r31, r25
    14be:	e8 2f       	mov	r30, r24
    14c0:	e3 5d       	subi	r30, 0xD3	; 211
    14c2:	fe 4f       	sbci	r31, 0xFE	; 254
    14c4:	80 81       	ld	r24, Z
    14c6:	91 81       	ldd	r25, Z+1	; 0x01
    14c8:	08 95       	ret

000014ca <HALSetEEPROMWord>:
    14ca:	f9 2f       	mov	r31, r25
    14cc:	e8 2f       	mov	r30, r24
    14ce:	e3 5d       	subi	r30, 0xD3	; 211
    14d0:	fe 4f       	sbci	r31, 0xFE	; 254
    14d2:	71 83       	std	Z+1, r23	; 0x01
    14d4:	60 83       	st	Z, r22
    14d6:	08 95       	ret

000014d8 <HALInitADC>:
}

/*
void HALGetEEPROMData(unsigned short addr, void* data, unsigned short size)
{
	//TODO: через EEPROM
	unsigned short i;
	
	for (i = 0; i < size; i++, addr++)
		((unsigned char*)data)[i] = HALGetEEPROMByte(addr);	
}

void HALSetEEPROMData(unsigned short addr, void* data, unsigned short size)
{
	//TODO: через EEPROM
	unsigned short i;
	
	for (i = 0; i < size; i++, addr++)
		HALSetEEPROMByte(addr, ((unsigned char*)data)[i]);
}
*/

// ******************************************************
// ********             Работа с АЦП            *********
// ******************************************************

typedef struct
{
	unsigned char ChannelsMask;		   	// маска задействованых каналов
	unsigned char CurChannelIdx; 				// индекс текущего канала в массиве задействованых каналов
	unsigned char NotReadyChannelsCount;	// количество не до конца заполненых каналов
} HALADCDataStruct;

HALADCDataStruct HALADCData;

inline void HALInitADC (void)
{
	HALADCData.ChannelsMask = 0;
    14d8:	10 92 2a 01 	sts	0x012A, r1
	HALADCData.CurChannelIdx = 0;
    14dc:	10 92 2b 01 	sts	0x012B, r1
	HALADCData.NotReadyChannelsCount = 0; // считаем, что АЦП готов
    14e0:	10 92 2c 01 	sts	0x012C, r1
	
	ADCSR = _BV(ADEN) | _BV(ADIE) | _BV(ADPS0) | _BV(ADPS1) | _BV(ADPS2);	
    14e4:	8f e8       	ldi	r24, 0x8F	; 143
    14e6:	86 b9       	out	0x06, r24	; 6
    14e8:	08 95       	ret

000014ea <HALSetNextADCChannel>:
}

void HALSetNextADCChannel(void)
{
	// переходим к следующему задействованному каналу
	// внимание, алгоритм зациклится, если маска каналов нулевая	
	do
	{
		if (HALADCData.CurChannelIdx == 7)
			HALADCData.CurChannelIdx = 0;
		else
			HALADCData.CurChannelIdx++;	
	}
	while (((HALADCData.ChannelsMask >> HALADCData.CurChannelIdx) & 0x01) == 0);
    14ea:	80 91 2a 01 	lds	r24, 0x012A
    14ee:	48 2f       	mov	r20, r24
    14f0:	55 27       	eor	r21, r21
    14f2:	20 91 2b 01 	lds	r18, 0x012B
    14f6:	27 30       	cpi	r18, 0x07	; 7
    14f8:	11 f4       	brne	.+4      	; 0x14fe <HALSetNextADCChannel+0x14>
    14fa:	20 e0       	ldi	r18, 0x00	; 0
    14fc:	01 c0       	rjmp	.+2      	; 0x1500 <HALSetNextADCChannel+0x16>
    14fe:	2f 5f       	subi	r18, 0xFF	; 255
    1500:	95 2f       	mov	r25, r21
    1502:	84 2f       	mov	r24, r20
    1504:	02 2e       	mov	r0, r18
    1506:	02 c0       	rjmp	.+4      	; 0x150c <HALSetNextADCChannel+0x22>
    1508:	95 95       	asr	r25
    150a:	87 95       	ror	r24
    150c:	0a 94       	dec	r0
    150e:	e2 f7       	brpl	.-8      	; 0x1508 <HALSetNextADCChannel+0x1e>
    1510:	80 ff       	sbrs	r24, 0
    1512:	f1 cf       	rjmp	.-30     	; 0x14f6 <HALSetNextADCChannel+0xc>
    1514:	20 93 2b 01 	sts	0x012B, r18
    1518:	08 95       	ret

0000151a <HALRunADC>:
}

void HALRunADC (unsigned char ChannelsMask)
{
	unsigned char i;
	
	HALADCData.ChannelsMask = ChannelsMask;
    151a:	80 93 2a 01 	sts	0x012A, r24
	HALADCData.CurChannelIdx = 7;
    151e:	97 e0       	ldi	r25, 0x07	; 7
    1520:	90 93 2b 01 	sts	0x012B, r25
	HALADCData.NotReadyChannelsCount = 0;
    1524:	10 92 2c 01 	sts	0x012C, r1
    1528:	60 e0       	ldi	r22, 0x00	; 0
    152a:	20 e0       	ldi	r18, 0x00	; 0
    152c:	30 e0       	ldi	r19, 0x00	; 0
    152e:	ec ea       	ldi	r30, 0xAC	; 172
    1530:	f0 e0       	ldi	r31, 0x00	; 0
    1532:	48 2f       	mov	r20, r24
    1534:	55 27       	eor	r21, r21
	
	for (i = 0; i < 8; i++)
	{
		if ((ChannelsMask >> i) & 0x01)
    1536:	95 2f       	mov	r25, r21
    1538:	84 2f       	mov	r24, r20
    153a:	02 2e       	mov	r0, r18
    153c:	02 c0       	rjmp	.+4      	; 0x1542 <HALRunADC+0x28>
    153e:	95 95       	asr	r25
    1540:	87 95       	ror	r24
    1542:	0a 94       	dec	r0
    1544:	e2 f7       	brpl	.-8      	; 0x153e <HALRunADC+0x24>
    1546:	80 fd       	sbrc	r24, 0
			HALADCData.NotReadyChannelsCount++;
    1548:	6f 5f       	subi	r22, 0xFF	; 255
			
		Buffers[BUFFER_ADC_FIRST_BUF_INDEX + i].Pos = 0;
    154a:	10 82       	st	Z, r1
    154c:	2f 5f       	subi	r18, 0xFF	; 255
    154e:	3f 4f       	sbci	r19, 0xFF	; 255
    1550:	37 96       	adiw	r30, 0x07	; 7
    1552:	28 30       	cpi	r18, 0x08	; 8
    1554:	31 05       	cpc	r19, r1
    1556:	79 f7       	brne	.-34     	; 0x1536 <HALRunADC+0x1c>
    1558:	60 93 2c 01 	sts	0x012C, r22
	}
	
	// запускаем АЦП, если маска не нулевая
	if (HALADCData.NotReadyChannelsCount > 0)
    155c:	66 23       	and	r22, r22
    155e:	29 f0       	breq	.+10     	; 0x156a <HALRunADC+0x50>
	{
		HALSetNextADCChannel(); 				// переходим к первому из задействованых каналов
    1560:	c4 df       	rcall	.-120    	; 0x14ea <HALSetNextADCChannel>
		ADMUX = HALADCData.CurChannelIdx; 	// для этого канала и будем запускать АЦП
    1562:	80 91 2b 01 	lds	r24, 0x012B
    1566:	87 b9       	out	0x07, r24	; 7
		ADCSR = ADCSR | _BV(ADSC);	
    1568:	36 9a       	sbi	0x06, 6	; 6
    156a:	08 95       	ret

0000156c <HALGetADCReady>:
	}
}

unsigned char HALGetADCReady(void)
{
    156c:	20 e0       	ldi	r18, 0x00	; 0
    156e:	30 e0       	ldi	r19, 0x00	; 0
    1570:	80 91 2c 01 	lds	r24, 0x012C
    1574:	88 23       	and	r24, r24
    1576:	11 f4       	brne	.+4      	; 0x157c <HALGetADCReady+0x10>
    1578:	21 e0       	ldi	r18, 0x01	; 1
    157a:	30 e0       	ldi	r19, 0x00	; 0
	if (HALADCData.NotReadyChannelsCount == 0)
		return 1;
	return 0;
}
    157c:	93 2f       	mov	r25, r19
    157e:	82 2f       	mov	r24, r18
    1580:	08 95       	ret

00001582 <__vector_14>:

ISR(ADC_vect)
{
    1582:	1f 92       	push	r1
    1584:	0f 92       	push	r0
    1586:	0f b6       	in	r0, 0x3f	; 63
    1588:	0f 92       	push	r0
    158a:	11 24       	eor	r1, r1
    158c:	0f 93       	push	r16
    158e:	1f 93       	push	r17
    1590:	2f 93       	push	r18
    1592:	3f 93       	push	r19
    1594:	4f 93       	push	r20
    1596:	5f 93       	push	r21
    1598:	6f 93       	push	r22
    159a:	7f 93       	push	r23
    159c:	8f 93       	push	r24
    159e:	9f 93       	push	r25
    15a0:	af 93       	push	r26
    15a2:	bf 93       	push	r27
    15a4:	cf 93       	push	r28
    15a6:	df 93       	push	r29
    15a8:	ef 93       	push	r30
    15aa:	ff 93       	push	r31
	unsigned char byteLo;
	unsigned char byteHi;
	unsigned short word;
	unsigned char bufIdx;
	
	// кладем значение с АЦП в буфер текущего канала	
	byteLo = ADCL;
    15ac:	04 b1       	in	r16, 0x04	; 4
	byteHi = ADCH;	
    15ae:	25 b1       	in	r18, 0x05	; 5
	CREATE_WORD(byteLo, byteHi, word);
    15b0:	33 27       	eor	r19, r19
    15b2:	32 2f       	mov	r19, r18
    15b4:	22 27       	eor	r18, r18
	
	// TODO: допусковый контроль
	
	bufIdx = BUFFER_ADC_FIRST_BUF_INDEX + HALADCData.CurChannelIdx;
	((unsigned short*)Buffers[bufIdx].Data)[Buffers[bufIdx].Pos] = word;
    15b6:	80 91 2b 01 	lds	r24, 0x012B
    15ba:	99 27       	eor	r25, r25
    15bc:	67 e0       	ldi	r22, 0x07	; 7
    15be:	70 e0       	ldi	r23, 0x00	; 0
    15c0:	58 d0       	rcall	.+176    	; 0x1672 <__mulhi3>
    15c2:	b9 2f       	mov	r27, r25
    15c4:	a8 2f       	mov	r26, r24
    15c6:	a7 55       	subi	r26, 0x57	; 87
    15c8:	bf 4f       	sbci	r27, 0xFF	; 255
    15ca:	db 2f       	mov	r29, r27
    15cc:	ca 2f       	mov	r28, r26
    15ce:	eb 81       	ldd	r30, Y+3	; 0x03
    15d0:	ff 27       	eor	r31, r31
    15d2:	ee 0f       	add	r30, r30
    15d4:	ff 1f       	adc	r31, r31
    15d6:	8d 81       	ldd	r24, Y+5	; 0x05
    15d8:	9e 81       	ldd	r25, Y+6	; 0x06
    15da:	e8 0f       	add	r30, r24
    15dc:	f9 1f       	adc	r31, r25
    15de:	11 27       	eor	r17, r17
    15e0:	20 2b       	or	r18, r16
    15e2:	31 2b       	or	r19, r17
    15e4:	31 83       	std	Z+1, r19	; 0x01
    15e6:	20 83       	st	Z, r18
   Buffers[bufIdx].Pos++;
    15e8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ea:	8f 5f       	subi	r24, 0xFF	; 255
    15ec:	8b 83       	std	Y+3, r24	; 0x03

	// если текущий буфер заполнен, то декрементируем количество незаполненых буферов
   if (Buffers[bufIdx].Pos >= Buffers[bufIdx].Size)
    15ee:	9a 81       	ldd	r25, Y+2	; 0x02
    15f0:	89 17       	cp	r24, r25
    15f2:	28 f0       	brcs	.+10     	; 0x15fe <__vector_14+0x7c>
   	HALADCData.NotReadyChannelsCount--;
    15f4:	80 91 2c 01 	lds	r24, 0x012C
    15f8:	81 50       	subi	r24, 0x01	; 1
    15fa:	80 93 2c 01 	sts	0x012C, r24
   	
  	// если был заполнен последний незаполненый буфер, то к следующему каналу не переходим
   if (HALADCData.NotReadyChannelsCount == 0)
    15fe:	80 91 2c 01 	lds	r24, 0x012C
    1602:	88 23       	and	r24, r24
    1604:	29 f0       	breq	.+10     	; 0x1610 <__vector_14+0x8e>
   	return;
   		
	HALSetNextADCChannel(); 				// переходим к следующему каналу
    1606:	71 df       	rcall	.-286    	; 0x14ea <HALSetNextADCChannel>
	ADMUX = HALADCData.CurChannelIdx; 	// для этого канала и будем запускать АЦП
    1608:	80 91 2b 01 	lds	r24, 0x012B
    160c:	87 b9       	out	0x07, r24	; 7
	ADCSR = ADCSR | _BV(ADSC);          // и запускаем
    160e:	36 9a       	sbi	0x06, 6	; 6
    1610:	ff 91       	pop	r31
    1612:	ef 91       	pop	r30
    1614:	df 91       	pop	r29
    1616:	cf 91       	pop	r28
    1618:	bf 91       	pop	r27
    161a:	af 91       	pop	r26
    161c:	9f 91       	pop	r25
    161e:	8f 91       	pop	r24
    1620:	7f 91       	pop	r23
    1622:	6f 91       	pop	r22
    1624:	5f 91       	pop	r21
    1626:	4f 91       	pop	r20
    1628:	3f 91       	pop	r19
    162a:	2f 91       	pop	r18
    162c:	1f 91       	pop	r17
    162e:	0f 91       	pop	r16
    1630:	0f 90       	pop	r0
    1632:	0f be       	out	0x3f, r0	; 63
    1634:	0f 90       	pop	r0
    1636:	1f 90       	pop	r1
    1638:	18 95       	reti

0000163a <HALInit>:
}

// ******************************************************
// ********          Инициализация HAL          *********
// ******************************************************

void HALInit (void)
{	
	HALInitEEPROM();
    163a:	f7 de       	rcall	.-530    	; 0x142a <HALInitEEPROM>
    163c:	80 ea       	ldi	r24, 0xA0	; 160
    163e:	87 bb       	out	0x17, r24	; 23
    1640:	80 e5       	ldi	r24, 0x50	; 80
    1642:	8d b9       	out	0x0d, r24	; 13
    1644:	10 92 2a 01 	sts	0x012A, r1
    1648:	10 92 2b 01 	sts	0x012B, r1
    164c:	10 92 2c 01 	sts	0x012C, r1
    1650:	8f e8       	ldi	r24, 0x8F	; 143
    1652:	86 b9       	out	0x06, r24	; 6
    1654:	8c e0       	ldi	r24, 0x0C	; 12
    1656:	89 b9       	out	0x09, r24	; 9
    1658:	89 e9       	ldi	r24, 0x99	; 153
    165a:	8a b9       	out	0x0a, r24	; 10
	HALInitExtROM();
	HALInitADC();	
	HALInitUART();
	
	sei();
    165c:	78 94       	sei
    165e:	08 95       	ret

00001660 <__mulqi3>:
    1660:	00 24       	eor	r0, r0

00001662 <__mulqi3_loop>:
    1662:	80 fd       	sbrc	r24, 0
    1664:	06 0e       	add	r0, r22
    1666:	66 0f       	add	r22, r22
    1668:	11 f0       	breq	.+4      	; 0x166e <__mulqi3_exit>
    166a:	86 95       	lsr	r24
    166c:	d1 f7       	brne	.-12     	; 0x1662 <__mulqi3_loop>

0000166e <__mulqi3_exit>:
    166e:	80 2d       	mov	r24, r0
    1670:	08 95       	ret

00001672 <__mulhi3>:
    1672:	55 27       	eor	r21, r21
    1674:	00 24       	eor	r0, r0

00001676 <__mulhi3_loop>:
    1676:	80 ff       	sbrs	r24, 0
    1678:	02 c0       	rjmp	.+4      	; 0x167e <__mulhi3_skip1>
    167a:	06 0e       	add	r0, r22
    167c:	57 1f       	adc	r21, r23

0000167e <__mulhi3_skip1>:
    167e:	66 0f       	add	r22, r22
    1680:	77 1f       	adc	r23, r23
    1682:	61 15       	cp	r22, r1
    1684:	71 05       	cpc	r23, r1
    1686:	21 f0       	breq	.+8      	; 0x1690 <__mulhi3_exit>
    1688:	96 95       	lsr	r25
    168a:	87 95       	ror	r24
    168c:	00 97       	sbiw	r24, 0x00	; 0
    168e:	99 f7       	brne	.-26     	; 0x1676 <__mulhi3_loop>

00001690 <__mulhi3_exit>:
    1690:	95 2f       	mov	r25, r21
    1692:	80 2d       	mov	r24, r0
    1694:	08 95       	ret

00001696 <__udivmodqi4>:
    1696:	99 1b       	sub	r25, r25
    1698:	79 e0       	ldi	r23, 0x09	; 9
    169a:	04 c0       	rjmp	.+8      	; 0x16a4 <__udivmodqi4_ep>

0000169c <__udivmodqi4_loop>:
    169c:	99 1f       	adc	r25, r25
    169e:	96 17       	cp	r25, r22
    16a0:	08 f0       	brcs	.+2      	; 0x16a4 <__udivmodqi4_ep>
    16a2:	96 1b       	sub	r25, r22

000016a4 <__udivmodqi4_ep>:
    16a4:	88 1f       	adc	r24, r24
    16a6:	7a 95       	dec	r23
    16a8:	c9 f7       	brne	.-14     	; 0x169c <__udivmodqi4_loop>
    16aa:	80 95       	com	r24
    16ac:	08 95       	ret

000016ae <__udivmodhi4>:
    16ae:	aa 1b       	sub	r26, r26
    16b0:	bb 1b       	sub	r27, r27
    16b2:	51 e1       	ldi	r21, 0x11	; 17
    16b4:	07 c0       	rjmp	.+14     	; 0x16c4 <__udivmodhi4_ep>

000016b6 <__udivmodhi4_loop>:
    16b6:	aa 1f       	adc	r26, r26
    16b8:	bb 1f       	adc	r27, r27
    16ba:	a6 17       	cp	r26, r22
    16bc:	b7 07       	cpc	r27, r23
    16be:	10 f0       	brcs	.+4      	; 0x16c4 <__udivmodhi4_ep>
    16c0:	a6 1b       	sub	r26, r22
    16c2:	b7 0b       	sbc	r27, r23

000016c4 <__udivmodhi4_ep>:
    16c4:	88 1f       	adc	r24, r24
    16c6:	99 1f       	adc	r25, r25
    16c8:	5a 95       	dec	r21
    16ca:	a9 f7       	brne	.-22     	; 0x16b6 <__udivmodhi4_loop>
    16cc:	80 95       	com	r24
    16ce:	90 95       	com	r25
    16d0:	68 2f       	mov	r22, r24
    16d2:	79 2f       	mov	r23, r25
    16d4:	8a 2f       	mov	r24, r26
    16d6:	9b 2f       	mov	r25, r27
    16d8:	08 95       	ret

000016da <__udivmodsi4>:
    16da:	a1 e2       	ldi	r26, 0x21	; 33
    16dc:	1a 2e       	mov	r1, r26
    16de:	aa 1b       	sub	r26, r26
    16e0:	bb 1b       	sub	r27, r27
    16e2:	ea 2f       	mov	r30, r26
    16e4:	fb 2f       	mov	r31, r27
    16e6:	0d c0       	rjmp	.+26     	; 0x1702 <__udivmodsi4_ep>

000016e8 <__udivmodsi4_loop>:
    16e8:	aa 1f       	adc	r26, r26
    16ea:	bb 1f       	adc	r27, r27
    16ec:	ee 1f       	adc	r30, r30
    16ee:	ff 1f       	adc	r31, r31
    16f0:	a2 17       	cp	r26, r18
    16f2:	b3 07       	cpc	r27, r19
    16f4:	e4 07       	cpc	r30, r20
    16f6:	f5 07       	cpc	r31, r21
    16f8:	20 f0       	brcs	.+8      	; 0x1702 <__udivmodsi4_ep>
    16fa:	a2 1b       	sub	r26, r18
    16fc:	b3 0b       	sbc	r27, r19
    16fe:	e4 0b       	sbc	r30, r20
    1700:	f5 0b       	sbc	r31, r21

00001702 <__udivmodsi4_ep>:
    1702:	66 1f       	adc	r22, r22
    1704:	77 1f       	adc	r23, r23
    1706:	88 1f       	adc	r24, r24
    1708:	99 1f       	adc	r25, r25
    170a:	1a 94       	dec	r1
    170c:	69 f7       	brne	.-38     	; 0x16e8 <__udivmodsi4_loop>
    170e:	60 95       	com	r22
    1710:	70 95       	com	r23
    1712:	80 95       	com	r24
    1714:	90 95       	com	r25
    1716:	26 2f       	mov	r18, r22
    1718:	37 2f       	mov	r19, r23
    171a:	48 2f       	mov	r20, r24
    171c:	59 2f       	mov	r21, r25
    171e:	6a 2f       	mov	r22, r26
    1720:	7b 2f       	mov	r23, r27
    1722:	8e 2f       	mov	r24, r30
    1724:	9f 2f       	mov	r25, r31
    1726:	08 95       	ret
